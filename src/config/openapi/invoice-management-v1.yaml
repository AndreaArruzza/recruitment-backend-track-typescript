openapi: 3.0.3
info:
  title: Invoice Management API
  version: 1.1.0
  description: >
    Spec-first per Users, Invoices, Tax Profiles, con pagination/filtri avanzati,
    errori Problem Details e sicurezza (JWT bearer + API Key).

tags:
  - name: Auth
  - name: Users
  - name: Invoices
  - name: TaxProfiles

servers:
  - url: /
  
paths:
  /auth/login:
    post:
      tags: [Auth]
      summary: Effettua il login (JWT)
      description: Ritorna access e refresh token
      security: []   # PUBBLICO
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginRequest' }
      responses:
        "200":
          description: Login ok
          content:
            application/json:
              schema: { $ref: '#/components/schemas/LoginResponse' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "400": { $ref: '#/components/responses/BadRequest' }


  /users:
    get:
      tags: [Users]
      operationId: getUsers
      summary: restituisce una lista di utenti, Ã¨ possibile filtrare e paginare
      security: [ { bearerAuth: [] } ]
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - name: email
          in: query
          schema: { type: string, format: email, nullable: true }
          description: Filtra per email esatta
        - name: role
          in: query
          schema: 
            type: string
            nullable: true
            allOf:
              - $ref: '#/components/schemas/UserRole'
        - name: isEnabled
          in: query
          schema: { type: boolean, nullable: true }
        - name: q
          in: query
          schema: { type: string , nullable: true}
          description: Ricerca full-text su nome/cognome/email
      responses:
        "200":
          description: Lista utenti
          headers:
            X-Total-Count:
              schema: { type: integer }
              description: Totale elementi senza pagination
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PaginatedUsers' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "400": { $ref: '#/components/responses/BadRequest' }
    post:
      tags: [Users]
      operationId: createUser
      summary: Crea un nuovo utente (solo ADMIN)
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserCreateRequest' }
      responses:
        "201":
          description: Nuovo utente creato con successo
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CreatedId' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "403": { $ref: '#/components/responses/Forbidden' }
        "409": { $ref: '#/components/responses/Conflict' }
        "400": { $ref: '#/components/responses/BadRequest' }

  /users/{id}:
    get:
      tags: [Users]
      operationId: getUserById
      security: [ { bearerAuth: [] } ]
      parameters: [ { $ref: '#/components/parameters/id' } ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserResponse' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "404": { $ref: '#/components/responses/NotFound' }
    put:
      tags: [Users]
      operationId: updateUserById
      summary: Aggiorna dti utente (anche dati sensibili come ruolo, password, email)
      security: [ { bearerAuth: [] } ]
      parameters: [ { $ref: '#/components/parameters/id' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserUpdateRequest' }
      responses:
        "200":
          description: Utente aggiornato con successo
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserResponse' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "403": { $ref: '#/components/responses/Forbidden' }
        "404": { $ref: '#/components/responses/NotFound' }
        "400": { $ref: '#/components/responses/BadRequest' }

    patch:
      tags: [Users]
      operationId: patchUserById
      summary: Aggiorna dati utente (non sensibili, esclude ruolo, password, email)
      security: [ { bearerAuth: [] } ]
      parameters: [ { $ref: '#/components/parameters/id' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserPatchRequest' }
      responses:
        "200":
          description: Utente aggiornato con successo
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserResponse' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "404": { $ref: '#/components/responses/NotFound' }
        "400": { $ref: '#/components/responses/BadRequest' }
    delete:
      tags: [Users]
      operationId: deleteUserById
      security: [ { bearerAuth: [] } ]
      parameters: [ { $ref: '#/components/parameters/id' } ]
      responses:
        "204":
          description: Utente cancellato con successo
        "401": { $ref: '#/components/responses/Unauthorized' }
        "403": { $ref: '#/components/responses/Forbidden' }
        "404": { $ref: '#/components/responses/NotFound' }

  

  /invoices:
    get:
      tags: [Invoices]
      operationId: getInvoices
      summary: restituisce una lista  di fatture (paginata, filtrabile)
      security: [ { bearerAuth: [] } ]
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - name: customerId
          in: query
          schema: { type: string }
        - name: status
          in: query
          schema: { $ref: '#/components/schemas/InvoiceStatus' }
        - name: dateFrom
          in: query
          schema: { type: string, format: date-time }
          description: Filtro per data emissione (>=)
        - name: dateTo
          in: query
          schema: { type: string, format: date-time }
          description: Filtro per data emissione (<=)
        - name: code
          in: query
          schema: { type: string }
          description: Ricerca per codice fattura (contains/exact a scelta server)
        - name: amountMin
          in: query
          schema: { type: string }
          description: Importo minimo (grandTotal) come string/decimal
        - name: amountMax
          in: query
          schema: { type: string }
      responses:
        "200":
          description: Lista fatture
          headers:
            X-Total-Count:
              schema: { type: integer }
              description: Totale elementi senza pagination
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PaginatedInvoices' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "400": { $ref: '#/components/responses/BadRequest' }
    post:
      tags: [Invoices]
      operationId: createInvoice
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/InvoiceCreateRequest' }
      responses:
        "201":
          description: Creata nuova fattura con successo
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CreatedId' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "400": { $ref: '#/components/responses/BadRequest' }
        "409": { $ref: '#/components/responses/Conflict' }

  /invoices/{id}:
    get:
      tags: [Invoices]
      operationId: getInvoice
      security: [ { bearerAuth: [] } ]
      parameters: [ { $ref: '#/components/parameters/id' } ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/InvoiceResponse' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "404": { $ref: '#/components/responses/NotFound' }
    put:
      tags: [Invoices]
      operationId: updateInvoice
      security: [ { bearerAuth: [] } ]
      parameters: [ { $ref: '#/components/parameters/id' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/InvoiceUpdateRequest' }
      responses:
        "200":
          description: Aggiornata fattura con successo
          content:
            application/json:
              schema: { $ref: '#/components/schemas/InvoiceResponse' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "404": { $ref: '#/components/responses/NotFound' }
        "400": { $ref: '#/components/responses/BadRequest' }
    delete:
      tags: [Invoices]
      operationId: deleteInvoice
      security: [ { bearerAuth: [] } ]
      parameters: [ { $ref: '#/components/parameters/id' } ]
      responses:
        "204": { description: Cancellata fattura con successo }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "404": { $ref: '#/components/responses/NotFound' }

  /user-tax-profiles:
    get:
      tags: [TaxProfiles]
      operationId: listUserTaxProfiles
      summary: restituisce una lista profili fiscali utente (paginata, filtrabile)
      security: [ { bearerAuth: [] } ]
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - name: userId
          in: query
          schema: { type: string }
        - name: type
          in: query
          schema: { $ref: '#/components/schemas/TaxType' }
        - name: isActive
          in: query
          schema: { type: boolean }
        - name: city
          in: query
          schema: { type: string }
      responses:
        "200":
          description: Lista di profili fiscali utente
          headers:
            X-Total-Count:
              schema: { type: integer }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PaginatedUserTaxProfiles' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "400": { $ref: '#/components/responses/BadRequest' }
    post:
      tags: [TaxProfiles]
      operationId: createUserTaxProfile
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserTaxProfileCreateRequest' }
      responses:
        "201":
          description: Profilo fiscale utente creato
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CreatedId' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "400": { $ref: '#/components/responses/BadRequest' }

  /user-tax-profiles/{id}:
    get:
      tags: [TaxProfiles]
      summary: restituisce un profilo fiscale utente, per id
      operationId: getUserTaxProfile
      security: [ { bearerAuth: [] } ]
      parameters: [ { $ref: '#/components/parameters/id' } ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserTaxProfileResponse' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "404": { $ref: '#/components/responses/NotFound' }
    put:
      tags: [TaxProfiles]
      operationId: updateUserTaxProfile
      security: [ { bearerAuth: [] } ]
      parameters: [ { $ref: '#/components/parameters/id' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserTaxProfileUpdateRequest' }
      responses:
        "200":
          description: Aggiornato profilo fiscale utente con successo
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserTaxProfileResponse' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "404": { $ref: '#/components/responses/NotFound' }
        "400": { $ref: '#/components/responses/BadRequest' }
    delete:
      tags: [TaxProfiles]
      operationId: deleteUserTaxProfile
      security: [ { bearerAuth: [] } ]
      parameters: [ { $ref: '#/components/parameters/id' } ]
      responses:
        "204": { description: Cancellato profilo fiscale utente con successo }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "404": { $ref: '#/components/responses/NotFound' }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Token JWT per autenticazione utente.
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: Chiave API per integrazioni server-to-server.

  parameters:
    id:
      in: path
      name: id
      required: true
      description: Identificatore risorsa (cryptato)
      schema:
        type: string
    page:
      in: query
      name: page
      schema: { type: integer, minimum: 1, default: 1 }
    pageSize:
      in: query
      name: pageSize
      schema: { type: integer, minimum: 1, maximum: 200, default: 20 }


  responses:
    BadRequest:
      description: Richiesta non valida
      content:
        application/problem+json:
          schema: { $ref: '#/components/schemas/ErrorDetails' }
    Unauthorized:
      description: Non autenticato o token invalido
      content:
        application/problem+json:
          schema: { $ref: '#/components/schemas/ErrorDetails' }
    Forbidden:
      description: Autenticato ma non autorizzato
      content:
        application/problem+json:
          schema: { $ref: '#/components/schemas/ErrorDetails' }
    NotFound:
      description: Risorsa non trovata
      content:
        application/problem+json:
          schema: { $ref: '#/components/schemas/ErrorDetails' }
    Conflict:
      description: Conflitto (es. email duplicata)
      content:
        application/problem+json:
          schema: { $ref: '#/components/schemas/ErrorDetails' }

  schemas:
    ErrorDetails:
      type: object
      properties:
        message: { type: string, nullable: true }
        status:  { type: integer, nullable: true }
        detail:  { type: string, nullable: true}

    # Auth
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }
        
    LoginResponse:
      type: object
      properties:
        accessToken: { type: string }
        refreshToken: { type: string }
        expiresIn: { type: integer, example: 3600 }

    # Users
    UserResponse:
      type: object
      required: [id, firstName, lastName, email, role, isEnabled, createdAt, updatedAt]
      properties:
        id: { type: string}
        firstName: { type: string }
        lastName: { type: string }
        email: { type: string, format: email }
        phone: { type: string, nullable: true }
        role: { $ref: '#/components/schemas/UserRole' }
        isEnabled: { type: boolean, default: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

  

    UserCreateRequest:
      type: object
      required: [firstName, lastName, role, email, password]
      properties:
        firstName: { type: string }
        lastName: { type: string }
        email: { type: string, format: email }
        phone: { type: string, nullable: true }
        password: { type: string, format: password, minLength: 6 }
        role: { $ref: '#/components/schemas/UserRole' }

    UserUpdateRequest:
      type: object
      properties:
        firstName: { type: string,  nullable: true }
        lastName: { type: string,  nullable: true }
        role: { $ref: '#/components/schemas/UserRole' }
        email: { type: string, format: email,  nullable: true}
        phone: { type: string, nullable: true }
        password: { type: string, format: password, minLength: 6,  nullable: true }
        isEnabled: { type: boolean,  nullable: true  }
    
    UserPatchRequest:
      type: object
      properties:
        firstName: { type: string}
        lastName: { type: string }
        phone: { type: string, nullable: true }


    UserRole:
      type: string
      enum: [USER, ADMIN]

    # Invoices
    InvoiceResponse:
      type: object
      required: [code, issueDate, currency, customerId, status, subtotal, taxTotal, grandTotal, createdAt, updatedAt]
      properties:
        code: { type: string }
        issueDate: { type: string, format: date-time }
        dueDate: { type: string, format: date-time, nullable: true }
        currency: { type: string, example: "EUR" }
        customerId: { type: string }
        billToCustomerTaxProfileId: { type: string, nullable: true }
        shipToCustomerTaxProfileId: { type: string, nullable: true }
        status: { $ref: '#/components/schemas/InvoiceStatus' }
        subtotal: { type: string, example: "100.00" }
        taxTotal: { type: string, example: "22.00" }
        grandTotal: { type: string, example: "122.00" }
        paymentMethod:
          type: string    
          nullable: true
          allOf:
            - $ref: '#/components/schemas/PaymentMethod' 
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    InvoiceCreateRequest:
      type: object
      required: [code, issueDate, currency, customerId, subtotal, taxTotal, grandTotal]
      properties:
        code: { type: string }
        issueDate: { type: string, format: date-time }
        dueDate: { type: string, format: date-time, nullable: true }
        currency: { type: string }
        customerId: { type: string }
        billToCustomerTaxProfileId: { type: string, nullable: true }
        shipToCustomerTaxProfileId: { type: string, nullable: true }
        status: { $ref: '#/components/schemas/InvoiceStatus' }
        subtotal: { type: string }
        taxTotal: { type: string }
        grandTotal: { type: string }
        paymentMethod:
          type: string    
          nullable: true
          allOf:
            - $ref: '#/components/schemas/PaymentMethod'
    InvoiceUpdateRequest:
      type: object
      properties:
        issueDate: { type: string, format: date-time }
        dueDate: { type: string, format: date-time, nullable: true }
        currency: { type: string }
        customerId: { type: string }
        billToCustomerTaxProfileId: { type: string, nullable: true }
        shipToCustomerTaxProfileId: { type: string, nullable: true }
        status: { $ref: '#/components/schemas/InvoiceStatus' }
        subtotal: { type: string }
        taxTotal: { type: string }
        grandTotal: { type: string }
        paymentMethod:
          type: string    
          nullable: true
          allOf:
            - $ref: '#/components/schemas/PaymentMethod'
    InvoiceStatus:
      type: string
      enum: [DRAFT, SENT, PAID, OVERDUE, CANCELED]

    PaymentMethod:
      type: string
      enum: [CARD, BANK_TRANSFER, CASH, OTHER]

    # Tax Profiles
    TaxType:
      type: string
      enum: [INDIVIDUAL, FREELANCER, COMPANY, FOREIGN_EU, FOREIGN_NON_EU]

    TaxProfileBase:
      type: object
      required: [type, legalName, fiscalCode, addressLine1, city, postalCode, countryCode]
      properties:
        type: { $ref: '#/components/schemas/TaxType' }
        legalName: { type: string }
        fiscalCode: { type: string }
        vatNumber: { type: string, nullable: true }
        addressLine1: { type: string }
        addressLine2: { type: string, nullable: true }
        city: { type: string }
        province: { type: string, nullable: true }
        postalCode: { type: string }
        countryCode: { type: string, example: "IT" }

    UserTaxProfileResponse:
      allOf:
        - $ref: '#/components/schemas/TaxProfileBase'
        - type: object
          required: [userId, createdAt, updatedAt]
          properties:
            userId: { type: string }
            createdAt: { type: string, format: date-time }
            updatedAt: { type: string, format: date-time }

    UserTaxProfileCreateRequest:
      allOf:
        - $ref: '#/components/schemas/TaxProfileBase'
        - type: object
          required: [userId]
          properties:
            userId: { type: string }

    UserTaxProfileUpdateRequest:
      type: object
      properties:
        type: { $ref: '#/components/schemas/TaxType' }
        legalName: { type: string }
        fiscalCode: { type: string }
        vatNumber: { type: string, nullable: true }
        addressLine1: { type: string }
        addressLine2: { type: string, nullable: true }
        city: { type: string }
        province: { type: string, nullable: true }
        postalCode: { type: string }
        countryCode: { type: string, example: "IT" }

    # Paginazioni
    PaginatedUsers:
      type: object
      required: [data, page, pageSize, total]
      properties:
        data: { type: array, items: { $ref: '#/components/schemas/UserResponse' } }
        page: { type: integer }
        pageSize: { type: integer }
        total: { type: integer }

    PaginatedInvoices:
      type: object
      properties:
        data: { type: array, items: { $ref: '#/components/schemas/InvoiceResponse' } }
        page: { type: integer }
        pageSize: { type: integer }
        total: { type: integer }

    PaginatedUserTaxProfiles:
      type: object
      properties:
        data: { type: array, items: { $ref: '#/components/schemas/UserTaxProfileResponse' } }
        page: { type: integer }
        pageSize: { type: integer }
        total: { type: integer }

    CreatedId:
      type: object
      required: [id]
      properties:
        id:
          type: string