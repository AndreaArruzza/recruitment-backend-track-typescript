
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserTaxProfile
 * 
 */
export type UserTaxProfile = $Result.DefaultSelection<Prisma.$UserTaxProfilePayload>
/**
 * Model Customer
 * 
 */
export type Customer = $Result.DefaultSelection<Prisma.$CustomerPayload>
/**
 * Model CustomerTaxProfile
 * 
 */
export type CustomerTaxProfile = $Result.DefaultSelection<Prisma.$CustomerTaxProfilePayload>
/**
 * Model Invoice
 * 
 */
export type Invoice = $Result.DefaultSelection<Prisma.$InvoicePayload>
/**
 * Model InvoiceItem
 * 
 */
export type InvoiceItem = $Result.DefaultSelection<Prisma.$InvoiceItemPayload>
/**
 * Model UserInvoice
 * 
 */
export type UserInvoice = $Result.DefaultSelection<Prisma.$UserInvoicePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const TaxType: {
  INDIVIDUAL: 'INDIVIDUAL',
  FREELANCER: 'FREELANCER',
  COMPANY: 'COMPANY',
  FOREIGN_EU: 'FOREIGN_EU',
  FOREIGN_NON_EU: 'FOREIGN_NON_EU'
};

export type TaxType = (typeof TaxType)[keyof typeof TaxType]


export const InvoiceStatus: {
  DRAFT: 'DRAFT',
  ISSUED: 'ISSUED',
  PAID: 'PAID',
  VOID: 'VOID'
};

export type InvoiceStatus = (typeof InvoiceStatus)[keyof typeof InvoiceStatus]


export const PaymentMethod: {
  BANK_TRANSFER: 'BANK_TRANSFER',
  CARD: 'CARD',
  CASH: 'CASH',
  OTHER: 'OTHER'
};

export type PaymentMethod = (typeof PaymentMethod)[keyof typeof PaymentMethod]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type TaxType = $Enums.TaxType

export const TaxType: typeof $Enums.TaxType

export type InvoiceStatus = $Enums.InvoiceStatus

export const InvoiceStatus: typeof $Enums.InvoiceStatus

export type PaymentMethod = $Enums.PaymentMethod

export const PaymentMethod: typeof $Enums.PaymentMethod

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userTaxProfile`: Exposes CRUD operations for the **UserTaxProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserTaxProfiles
    * const userTaxProfiles = await prisma.userTaxProfile.findMany()
    * ```
    */
  get userTaxProfile(): Prisma.UserTaxProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customer`: Exposes CRUD operations for the **Customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.CustomerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customerTaxProfile`: Exposes CRUD operations for the **CustomerTaxProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CustomerTaxProfiles
    * const customerTaxProfiles = await prisma.customerTaxProfile.findMany()
    * ```
    */
  get customerTaxProfile(): Prisma.CustomerTaxProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.invoice`: Exposes CRUD operations for the **Invoice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invoices
    * const invoices = await prisma.invoice.findMany()
    * ```
    */
  get invoice(): Prisma.InvoiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.invoiceItem`: Exposes CRUD operations for the **InvoiceItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InvoiceItems
    * const invoiceItems = await prisma.invoiceItem.findMany()
    * ```
    */
  get invoiceItem(): Prisma.InvoiceItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userInvoice`: Exposes CRUD operations for the **UserInvoice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserInvoices
    * const userInvoices = await prisma.userInvoice.findMany()
    * ```
    */
  get userInvoice(): Prisma.UserInvoiceDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.14.0
   * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    UserTaxProfile: 'UserTaxProfile',
    Customer: 'Customer',
    CustomerTaxProfile: 'CustomerTaxProfile',
    Invoice: 'Invoice',
    InvoiceItem: 'InvoiceItem',
    UserInvoice: 'UserInvoice'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "userTaxProfile" | "customer" | "customerTaxProfile" | "invoice" | "invoiceItem" | "userInvoice"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserTaxProfile: {
        payload: Prisma.$UserTaxProfilePayload<ExtArgs>
        fields: Prisma.UserTaxProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserTaxProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTaxProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserTaxProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTaxProfilePayload>
          }
          findFirst: {
            args: Prisma.UserTaxProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTaxProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserTaxProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTaxProfilePayload>
          }
          findMany: {
            args: Prisma.UserTaxProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTaxProfilePayload>[]
          }
          create: {
            args: Prisma.UserTaxProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTaxProfilePayload>
          }
          createMany: {
            args: Prisma.UserTaxProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserTaxProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTaxProfilePayload>[]
          }
          delete: {
            args: Prisma.UserTaxProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTaxProfilePayload>
          }
          update: {
            args: Prisma.UserTaxProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTaxProfilePayload>
          }
          deleteMany: {
            args: Prisma.UserTaxProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserTaxProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserTaxProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTaxProfilePayload>[]
          }
          upsert: {
            args: Prisma.UserTaxProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTaxProfilePayload>
          }
          aggregate: {
            args: Prisma.UserTaxProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserTaxProfile>
          }
          groupBy: {
            args: Prisma.UserTaxProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserTaxProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserTaxProfileCountArgs<ExtArgs>
            result: $Utils.Optional<UserTaxProfileCountAggregateOutputType> | number
          }
        }
      }
      Customer: {
        payload: Prisma.$CustomerPayload<ExtArgs>
        fields: Prisma.CustomerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findFirst: {
            args: Prisma.CustomerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findMany: {
            args: Prisma.CustomerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          create: {
            args: Prisma.CustomerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          createMany: {
            args: Prisma.CustomerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          delete: {
            args: Prisma.CustomerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          update: {
            args: Prisma.CustomerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          deleteMany: {
            args: Prisma.CustomerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          upsert: {
            args: Prisma.CustomerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          aggregate: {
            args: Prisma.CustomerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomer>
          }
          groupBy: {
            args: Prisma.CustomerGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerCountAggregateOutputType> | number
          }
        }
      }
      CustomerTaxProfile: {
        payload: Prisma.$CustomerTaxProfilePayload<ExtArgs>
        fields: Prisma.CustomerTaxProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerTaxProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerTaxProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerTaxProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerTaxProfilePayload>
          }
          findFirst: {
            args: Prisma.CustomerTaxProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerTaxProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerTaxProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerTaxProfilePayload>
          }
          findMany: {
            args: Prisma.CustomerTaxProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerTaxProfilePayload>[]
          }
          create: {
            args: Prisma.CustomerTaxProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerTaxProfilePayload>
          }
          createMany: {
            args: Prisma.CustomerTaxProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerTaxProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerTaxProfilePayload>[]
          }
          delete: {
            args: Prisma.CustomerTaxProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerTaxProfilePayload>
          }
          update: {
            args: Prisma.CustomerTaxProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerTaxProfilePayload>
          }
          deleteMany: {
            args: Prisma.CustomerTaxProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerTaxProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomerTaxProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerTaxProfilePayload>[]
          }
          upsert: {
            args: Prisma.CustomerTaxProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerTaxProfilePayload>
          }
          aggregate: {
            args: Prisma.CustomerTaxProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomerTaxProfile>
          }
          groupBy: {
            args: Prisma.CustomerTaxProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerTaxProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerTaxProfileCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerTaxProfileCountAggregateOutputType> | number
          }
        }
      }
      Invoice: {
        payload: Prisma.$InvoicePayload<ExtArgs>
        fields: Prisma.InvoiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvoiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvoiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          findFirst: {
            args: Prisma.InvoiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvoiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          findMany: {
            args: Prisma.InvoiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>[]
          }
          create: {
            args: Prisma.InvoiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          createMany: {
            args: Prisma.InvoiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InvoiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>[]
          }
          delete: {
            args: Prisma.InvoiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          update: {
            args: Prisma.InvoiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          deleteMany: {
            args: Prisma.InvoiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InvoiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InvoiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>[]
          }
          upsert: {
            args: Prisma.InvoiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          aggregate: {
            args: Prisma.InvoiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInvoice>
          }
          groupBy: {
            args: Prisma.InvoiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<InvoiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvoiceCountArgs<ExtArgs>
            result: $Utils.Optional<InvoiceCountAggregateOutputType> | number
          }
        }
      }
      InvoiceItem: {
        payload: Prisma.$InvoiceItemPayload<ExtArgs>
        fields: Prisma.InvoiceItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvoiceItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvoiceItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>
          }
          findFirst: {
            args: Prisma.InvoiceItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvoiceItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>
          }
          findMany: {
            args: Prisma.InvoiceItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>[]
          }
          create: {
            args: Prisma.InvoiceItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>
          }
          createMany: {
            args: Prisma.InvoiceItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InvoiceItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>[]
          }
          delete: {
            args: Prisma.InvoiceItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>
          }
          update: {
            args: Prisma.InvoiceItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>
          }
          deleteMany: {
            args: Prisma.InvoiceItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InvoiceItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InvoiceItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>[]
          }
          upsert: {
            args: Prisma.InvoiceItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>
          }
          aggregate: {
            args: Prisma.InvoiceItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInvoiceItem>
          }
          groupBy: {
            args: Prisma.InvoiceItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<InvoiceItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvoiceItemCountArgs<ExtArgs>
            result: $Utils.Optional<InvoiceItemCountAggregateOutputType> | number
          }
        }
      }
      UserInvoice: {
        payload: Prisma.$UserInvoicePayload<ExtArgs>
        fields: Prisma.UserInvoiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserInvoiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvoicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserInvoiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvoicePayload>
          }
          findFirst: {
            args: Prisma.UserInvoiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvoicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserInvoiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvoicePayload>
          }
          findMany: {
            args: Prisma.UserInvoiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvoicePayload>[]
          }
          create: {
            args: Prisma.UserInvoiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvoicePayload>
          }
          createMany: {
            args: Prisma.UserInvoiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserInvoiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvoicePayload>[]
          }
          delete: {
            args: Prisma.UserInvoiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvoicePayload>
          }
          update: {
            args: Prisma.UserInvoiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvoicePayload>
          }
          deleteMany: {
            args: Prisma.UserInvoiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserInvoiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserInvoiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvoicePayload>[]
          }
          upsert: {
            args: Prisma.UserInvoiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvoicePayload>
          }
          aggregate: {
            args: Prisma.UserInvoiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserInvoice>
          }
          groupBy: {
            args: Prisma.UserInvoiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserInvoiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserInvoiceCountArgs<ExtArgs>
            result: $Utils.Optional<UserInvoiceCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    userTaxProfile?: UserTaxProfileOmit
    customer?: CustomerOmit
    customerTaxProfile?: CustomerTaxProfileOmit
    invoice?: InvoiceOmit
    invoiceItem?: InvoiceItemOmit
    userInvoice?: UserInvoiceOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    invoices: number
    shares: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoices?: boolean | UserCountOutputTypeCountInvoicesArgs
    shares?: boolean | UserCountOutputTypeCountSharesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInvoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserInvoiceWhereInput
  }


  /**
   * Count Type UserTaxProfileCountOutputType
   */

  export type UserTaxProfileCountOutputType = {
    Invoice: number
  }

  export type UserTaxProfileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Invoice?: boolean | UserTaxProfileCountOutputTypeCountInvoiceArgs
  }

  // Custom InputTypes
  /**
   * UserTaxProfileCountOutputType without action
   */
  export type UserTaxProfileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTaxProfileCountOutputType
     */
    select?: UserTaxProfileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserTaxProfileCountOutputType without action
   */
  export type UserTaxProfileCountOutputTypeCountInvoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
  }


  /**
   * Count Type CustomerCountOutputType
   */

  export type CustomerCountOutputType = {
    taxProfiles: number
    billedInvoices: number
    shippedInvoices: number
  }

  export type CustomerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    taxProfiles?: boolean | CustomerCountOutputTypeCountTaxProfilesArgs
    billedInvoices?: boolean | CustomerCountOutputTypeCountBilledInvoicesArgs
    shippedInvoices?: boolean | CustomerCountOutputTypeCountShippedInvoicesArgs
  }

  // Custom InputTypes
  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCountOutputType
     */
    select?: CustomerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountTaxProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerTaxProfileWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountBilledInvoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountShippedInvoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
  }


  /**
   * Count Type CustomerTaxProfileCountOutputType
   */

  export type CustomerTaxProfileCountOutputType = {
    BillInvoice: number
    ShipInvoice: number
  }

  export type CustomerTaxProfileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    BillInvoice?: boolean | CustomerTaxProfileCountOutputTypeCountBillInvoiceArgs
    ShipInvoice?: boolean | CustomerTaxProfileCountOutputTypeCountShipInvoiceArgs
  }

  // Custom InputTypes
  /**
   * CustomerTaxProfileCountOutputType without action
   */
  export type CustomerTaxProfileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerTaxProfileCountOutputType
     */
    select?: CustomerTaxProfileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CustomerTaxProfileCountOutputType without action
   */
  export type CustomerTaxProfileCountOutputTypeCountBillInvoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
  }

  /**
   * CustomerTaxProfileCountOutputType without action
   */
  export type CustomerTaxProfileCountOutputTypeCountShipInvoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
  }


  /**
   * Count Type InvoiceCountOutputType
   */

  export type InvoiceCountOutputType = {
    InvoiceItem: number
    UserInvoice: number
  }

  export type InvoiceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    InvoiceItem?: boolean | InvoiceCountOutputTypeCountInvoiceItemArgs
    UserInvoice?: boolean | InvoiceCountOutputTypeCountUserInvoiceArgs
  }

  // Custom InputTypes
  /**
   * InvoiceCountOutputType without action
   */
  export type InvoiceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceCountOutputType
     */
    select?: InvoiceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InvoiceCountOutputType without action
   */
  export type InvoiceCountOutputTypeCountInvoiceItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceItemWhereInput
  }

  /**
   * InvoiceCountOutputType without action
   */
  export type InvoiceCountOutputTypeCountUserInvoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserInvoiceWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: bigint | null
  }

  export type UserMinAggregateOutputType = {
    id: bigint | null
    email: string | null
    phone: string | null
    passwordHash: string | null
    firstName: string | null
    lastName: string | null
    role: $Enums.UserRole | null
    isEnabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: bigint | null
    email: string | null
    phone: string | null
    passwordHash: string | null
    firstName: string | null
    lastName: string | null
    role: $Enums.UserRole | null
    isEnabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    phone: number
    passwordHash: number
    firstName: number
    lastName: number
    role: number
    isEnabled: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    phone?: true
    passwordHash?: true
    firstName?: true
    lastName?: true
    role?: true
    isEnabled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    phone?: true
    passwordHash?: true
    firstName?: true
    lastName?: true
    role?: true
    isEnabled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    phone?: true
    passwordHash?: true
    firstName?: true
    lastName?: true
    role?: true
    isEnabled?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: bigint
    email: string
    phone: string | null
    passwordHash: string
    firstName: string
    lastName: string
    role: $Enums.UserRole
    isEnabled: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    phone?: boolean
    passwordHash?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    isEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    taxProfile?: boolean | User$taxProfileArgs<ExtArgs>
    invoices?: boolean | User$invoicesArgs<ExtArgs>
    shares?: boolean | User$sharesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    phone?: boolean
    passwordHash?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    isEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    phone?: boolean
    passwordHash?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    isEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    phone?: boolean
    passwordHash?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    isEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "phone" | "passwordHash" | "firstName" | "lastName" | "role" | "isEnabled" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    taxProfile?: boolean | User$taxProfileArgs<ExtArgs>
    invoices?: boolean | User$invoicesArgs<ExtArgs>
    shares?: boolean | User$sharesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      taxProfile: Prisma.$UserTaxProfilePayload<ExtArgs> | null
      invoices: Prisma.$InvoicePayload<ExtArgs>[]
      shares: Prisma.$UserInvoicePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      email: string
      phone: string | null
      passwordHash: string
      firstName: string
      lastName: string
      role: $Enums.UserRole
      isEnabled: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    taxProfile<T extends User$taxProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$taxProfileArgs<ExtArgs>>): Prisma__UserTaxProfileClient<$Result.GetResult<Prisma.$UserTaxProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    invoices<T extends User$invoicesArgs<ExtArgs> = {}>(args?: Subset<T, User$invoicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    shares<T extends User$sharesArgs<ExtArgs> = {}>(args?: Subset<T, User$sharesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserInvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'BigInt'>
    readonly email: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly isEnabled: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.taxProfile
   */
  export type User$taxProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTaxProfile
     */
    select?: UserTaxProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTaxProfile
     */
    omit?: UserTaxProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTaxProfileInclude<ExtArgs> | null
    where?: UserTaxProfileWhereInput
  }

  /**
   * User.invoices
   */
  export type User$invoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    cursor?: InvoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * User.shares
   */
  export type User$sharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvoice
     */
    select?: UserInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserInvoice
     */
    omit?: UserInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvoiceInclude<ExtArgs> | null
    where?: UserInvoiceWhereInput
    orderBy?: UserInvoiceOrderByWithRelationInput | UserInvoiceOrderByWithRelationInput[]
    cursor?: UserInvoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserInvoiceScalarFieldEnum | UserInvoiceScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model UserTaxProfile
   */

  export type AggregateUserTaxProfile = {
    _count: UserTaxProfileCountAggregateOutputType | null
    _avg: UserTaxProfileAvgAggregateOutputType | null
    _sum: UserTaxProfileSumAggregateOutputType | null
    _min: UserTaxProfileMinAggregateOutputType | null
    _max: UserTaxProfileMaxAggregateOutputType | null
  }

  export type UserTaxProfileAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserTaxProfileSumAggregateOutputType = {
    id: bigint | null
    userId: bigint | null
  }

  export type UserTaxProfileMinAggregateOutputType = {
    id: bigint | null
    userId: bigint | null
    type: $Enums.TaxType | null
    legalName: string | null
    fiscalCode: string | null
    vatNumber: string | null
    addressLine1: string | null
    addressLine2: string | null
    city: string | null
    province: string | null
    postalCode: string | null
    countryCode: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserTaxProfileMaxAggregateOutputType = {
    id: bigint | null
    userId: bigint | null
    type: $Enums.TaxType | null
    legalName: string | null
    fiscalCode: string | null
    vatNumber: string | null
    addressLine1: string | null
    addressLine2: string | null
    city: string | null
    province: string | null
    postalCode: string | null
    countryCode: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserTaxProfileCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    legalName: number
    fiscalCode: number
    vatNumber: number
    addressLine1: number
    addressLine2: number
    city: number
    province: number
    postalCode: number
    countryCode: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserTaxProfileAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserTaxProfileSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserTaxProfileMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    legalName?: true
    fiscalCode?: true
    vatNumber?: true
    addressLine1?: true
    addressLine2?: true
    city?: true
    province?: true
    postalCode?: true
    countryCode?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserTaxProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    legalName?: true
    fiscalCode?: true
    vatNumber?: true
    addressLine1?: true
    addressLine2?: true
    city?: true
    province?: true
    postalCode?: true
    countryCode?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserTaxProfileCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    legalName?: true
    fiscalCode?: true
    vatNumber?: true
    addressLine1?: true
    addressLine2?: true
    city?: true
    province?: true
    postalCode?: true
    countryCode?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserTaxProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserTaxProfile to aggregate.
     */
    where?: UserTaxProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTaxProfiles to fetch.
     */
    orderBy?: UserTaxProfileOrderByWithRelationInput | UserTaxProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserTaxProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTaxProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTaxProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserTaxProfiles
    **/
    _count?: true | UserTaxProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserTaxProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserTaxProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserTaxProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserTaxProfileMaxAggregateInputType
  }

  export type GetUserTaxProfileAggregateType<T extends UserTaxProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateUserTaxProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserTaxProfile[P]>
      : GetScalarType<T[P], AggregateUserTaxProfile[P]>
  }




  export type UserTaxProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserTaxProfileWhereInput
    orderBy?: UserTaxProfileOrderByWithAggregationInput | UserTaxProfileOrderByWithAggregationInput[]
    by: UserTaxProfileScalarFieldEnum[] | UserTaxProfileScalarFieldEnum
    having?: UserTaxProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserTaxProfileCountAggregateInputType | true
    _avg?: UserTaxProfileAvgAggregateInputType
    _sum?: UserTaxProfileSumAggregateInputType
    _min?: UserTaxProfileMinAggregateInputType
    _max?: UserTaxProfileMaxAggregateInputType
  }

  export type UserTaxProfileGroupByOutputType = {
    id: bigint
    userId: bigint
    type: $Enums.TaxType
    legalName: string
    fiscalCode: string | null
    vatNumber: string | null
    addressLine1: string
    addressLine2: string | null
    city: string
    province: string | null
    postalCode: string
    countryCode: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserTaxProfileCountAggregateOutputType | null
    _avg: UserTaxProfileAvgAggregateOutputType | null
    _sum: UserTaxProfileSumAggregateOutputType | null
    _min: UserTaxProfileMinAggregateOutputType | null
    _max: UserTaxProfileMaxAggregateOutputType | null
  }

  type GetUserTaxProfileGroupByPayload<T extends UserTaxProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserTaxProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserTaxProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserTaxProfileGroupByOutputType[P]>
            : GetScalarType<T[P], UserTaxProfileGroupByOutputType[P]>
        }
      >
    >


  export type UserTaxProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    legalName?: boolean
    fiscalCode?: boolean
    vatNumber?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    city?: boolean
    province?: boolean
    postalCode?: boolean
    countryCode?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    Invoice?: boolean | UserTaxProfile$InvoiceArgs<ExtArgs>
    _count?: boolean | UserTaxProfileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userTaxProfile"]>

  export type UserTaxProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    legalName?: boolean
    fiscalCode?: boolean
    vatNumber?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    city?: boolean
    province?: boolean
    postalCode?: boolean
    countryCode?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userTaxProfile"]>

  export type UserTaxProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    legalName?: boolean
    fiscalCode?: boolean
    vatNumber?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    city?: boolean
    province?: boolean
    postalCode?: boolean
    countryCode?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userTaxProfile"]>

  export type UserTaxProfileSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    legalName?: boolean
    fiscalCode?: boolean
    vatNumber?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    city?: boolean
    province?: boolean
    postalCode?: boolean
    countryCode?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserTaxProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "legalName" | "fiscalCode" | "vatNumber" | "addressLine1" | "addressLine2" | "city" | "province" | "postalCode" | "countryCode" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["userTaxProfile"]>
  export type UserTaxProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    Invoice?: boolean | UserTaxProfile$InvoiceArgs<ExtArgs>
    _count?: boolean | UserTaxProfileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserTaxProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserTaxProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserTaxProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserTaxProfile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      Invoice: Prisma.$InvoicePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      userId: bigint
      type: $Enums.TaxType
      legalName: string
      fiscalCode: string | null
      vatNumber: string | null
      addressLine1: string
      addressLine2: string | null
      city: string
      province: string | null
      postalCode: string
      countryCode: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userTaxProfile"]>
    composites: {}
  }

  type UserTaxProfileGetPayload<S extends boolean | null | undefined | UserTaxProfileDefaultArgs> = $Result.GetResult<Prisma.$UserTaxProfilePayload, S>

  type UserTaxProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserTaxProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserTaxProfileCountAggregateInputType | true
    }

  export interface UserTaxProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserTaxProfile'], meta: { name: 'UserTaxProfile' } }
    /**
     * Find zero or one UserTaxProfile that matches the filter.
     * @param {UserTaxProfileFindUniqueArgs} args - Arguments to find a UserTaxProfile
     * @example
     * // Get one UserTaxProfile
     * const userTaxProfile = await prisma.userTaxProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserTaxProfileFindUniqueArgs>(args: SelectSubset<T, UserTaxProfileFindUniqueArgs<ExtArgs>>): Prisma__UserTaxProfileClient<$Result.GetResult<Prisma.$UserTaxProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserTaxProfile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserTaxProfileFindUniqueOrThrowArgs} args - Arguments to find a UserTaxProfile
     * @example
     * // Get one UserTaxProfile
     * const userTaxProfile = await prisma.userTaxProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserTaxProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, UserTaxProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserTaxProfileClient<$Result.GetResult<Prisma.$UserTaxProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserTaxProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTaxProfileFindFirstArgs} args - Arguments to find a UserTaxProfile
     * @example
     * // Get one UserTaxProfile
     * const userTaxProfile = await prisma.userTaxProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserTaxProfileFindFirstArgs>(args?: SelectSubset<T, UserTaxProfileFindFirstArgs<ExtArgs>>): Prisma__UserTaxProfileClient<$Result.GetResult<Prisma.$UserTaxProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserTaxProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTaxProfileFindFirstOrThrowArgs} args - Arguments to find a UserTaxProfile
     * @example
     * // Get one UserTaxProfile
     * const userTaxProfile = await prisma.userTaxProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserTaxProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, UserTaxProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserTaxProfileClient<$Result.GetResult<Prisma.$UserTaxProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserTaxProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTaxProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserTaxProfiles
     * const userTaxProfiles = await prisma.userTaxProfile.findMany()
     * 
     * // Get first 10 UserTaxProfiles
     * const userTaxProfiles = await prisma.userTaxProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userTaxProfileWithIdOnly = await prisma.userTaxProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserTaxProfileFindManyArgs>(args?: SelectSubset<T, UserTaxProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserTaxProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserTaxProfile.
     * @param {UserTaxProfileCreateArgs} args - Arguments to create a UserTaxProfile.
     * @example
     * // Create one UserTaxProfile
     * const UserTaxProfile = await prisma.userTaxProfile.create({
     *   data: {
     *     // ... data to create a UserTaxProfile
     *   }
     * })
     * 
     */
    create<T extends UserTaxProfileCreateArgs>(args: SelectSubset<T, UserTaxProfileCreateArgs<ExtArgs>>): Prisma__UserTaxProfileClient<$Result.GetResult<Prisma.$UserTaxProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserTaxProfiles.
     * @param {UserTaxProfileCreateManyArgs} args - Arguments to create many UserTaxProfiles.
     * @example
     * // Create many UserTaxProfiles
     * const userTaxProfile = await prisma.userTaxProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserTaxProfileCreateManyArgs>(args?: SelectSubset<T, UserTaxProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserTaxProfiles and returns the data saved in the database.
     * @param {UserTaxProfileCreateManyAndReturnArgs} args - Arguments to create many UserTaxProfiles.
     * @example
     * // Create many UserTaxProfiles
     * const userTaxProfile = await prisma.userTaxProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserTaxProfiles and only return the `id`
     * const userTaxProfileWithIdOnly = await prisma.userTaxProfile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserTaxProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, UserTaxProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserTaxProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserTaxProfile.
     * @param {UserTaxProfileDeleteArgs} args - Arguments to delete one UserTaxProfile.
     * @example
     * // Delete one UserTaxProfile
     * const UserTaxProfile = await prisma.userTaxProfile.delete({
     *   where: {
     *     // ... filter to delete one UserTaxProfile
     *   }
     * })
     * 
     */
    delete<T extends UserTaxProfileDeleteArgs>(args: SelectSubset<T, UserTaxProfileDeleteArgs<ExtArgs>>): Prisma__UserTaxProfileClient<$Result.GetResult<Prisma.$UserTaxProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserTaxProfile.
     * @param {UserTaxProfileUpdateArgs} args - Arguments to update one UserTaxProfile.
     * @example
     * // Update one UserTaxProfile
     * const userTaxProfile = await prisma.userTaxProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserTaxProfileUpdateArgs>(args: SelectSubset<T, UserTaxProfileUpdateArgs<ExtArgs>>): Prisma__UserTaxProfileClient<$Result.GetResult<Prisma.$UserTaxProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserTaxProfiles.
     * @param {UserTaxProfileDeleteManyArgs} args - Arguments to filter UserTaxProfiles to delete.
     * @example
     * // Delete a few UserTaxProfiles
     * const { count } = await prisma.userTaxProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserTaxProfileDeleteManyArgs>(args?: SelectSubset<T, UserTaxProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserTaxProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTaxProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserTaxProfiles
     * const userTaxProfile = await prisma.userTaxProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserTaxProfileUpdateManyArgs>(args: SelectSubset<T, UserTaxProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserTaxProfiles and returns the data updated in the database.
     * @param {UserTaxProfileUpdateManyAndReturnArgs} args - Arguments to update many UserTaxProfiles.
     * @example
     * // Update many UserTaxProfiles
     * const userTaxProfile = await prisma.userTaxProfile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserTaxProfiles and only return the `id`
     * const userTaxProfileWithIdOnly = await prisma.userTaxProfile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserTaxProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, UserTaxProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserTaxProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserTaxProfile.
     * @param {UserTaxProfileUpsertArgs} args - Arguments to update or create a UserTaxProfile.
     * @example
     * // Update or create a UserTaxProfile
     * const userTaxProfile = await prisma.userTaxProfile.upsert({
     *   create: {
     *     // ... data to create a UserTaxProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserTaxProfile we want to update
     *   }
     * })
     */
    upsert<T extends UserTaxProfileUpsertArgs>(args: SelectSubset<T, UserTaxProfileUpsertArgs<ExtArgs>>): Prisma__UserTaxProfileClient<$Result.GetResult<Prisma.$UserTaxProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserTaxProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTaxProfileCountArgs} args - Arguments to filter UserTaxProfiles to count.
     * @example
     * // Count the number of UserTaxProfiles
     * const count = await prisma.userTaxProfile.count({
     *   where: {
     *     // ... the filter for the UserTaxProfiles we want to count
     *   }
     * })
    **/
    count<T extends UserTaxProfileCountArgs>(
      args?: Subset<T, UserTaxProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserTaxProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserTaxProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTaxProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserTaxProfileAggregateArgs>(args: Subset<T, UserTaxProfileAggregateArgs>): Prisma.PrismaPromise<GetUserTaxProfileAggregateType<T>>

    /**
     * Group by UserTaxProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTaxProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserTaxProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserTaxProfileGroupByArgs['orderBy'] }
        : { orderBy?: UserTaxProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserTaxProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserTaxProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserTaxProfile model
   */
  readonly fields: UserTaxProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserTaxProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserTaxProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Invoice<T extends UserTaxProfile$InvoiceArgs<ExtArgs> = {}>(args?: Subset<T, UserTaxProfile$InvoiceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserTaxProfile model
   */
  interface UserTaxProfileFieldRefs {
    readonly id: FieldRef<"UserTaxProfile", 'BigInt'>
    readonly userId: FieldRef<"UserTaxProfile", 'BigInt'>
    readonly type: FieldRef<"UserTaxProfile", 'TaxType'>
    readonly legalName: FieldRef<"UserTaxProfile", 'String'>
    readonly fiscalCode: FieldRef<"UserTaxProfile", 'String'>
    readonly vatNumber: FieldRef<"UserTaxProfile", 'String'>
    readonly addressLine1: FieldRef<"UserTaxProfile", 'String'>
    readonly addressLine2: FieldRef<"UserTaxProfile", 'String'>
    readonly city: FieldRef<"UserTaxProfile", 'String'>
    readonly province: FieldRef<"UserTaxProfile", 'String'>
    readonly postalCode: FieldRef<"UserTaxProfile", 'String'>
    readonly countryCode: FieldRef<"UserTaxProfile", 'String'>
    readonly isActive: FieldRef<"UserTaxProfile", 'Boolean'>
    readonly createdAt: FieldRef<"UserTaxProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"UserTaxProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserTaxProfile findUnique
   */
  export type UserTaxProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTaxProfile
     */
    select?: UserTaxProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTaxProfile
     */
    omit?: UserTaxProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTaxProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserTaxProfile to fetch.
     */
    where: UserTaxProfileWhereUniqueInput
  }

  /**
   * UserTaxProfile findUniqueOrThrow
   */
  export type UserTaxProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTaxProfile
     */
    select?: UserTaxProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTaxProfile
     */
    omit?: UserTaxProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTaxProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserTaxProfile to fetch.
     */
    where: UserTaxProfileWhereUniqueInput
  }

  /**
   * UserTaxProfile findFirst
   */
  export type UserTaxProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTaxProfile
     */
    select?: UserTaxProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTaxProfile
     */
    omit?: UserTaxProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTaxProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserTaxProfile to fetch.
     */
    where?: UserTaxProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTaxProfiles to fetch.
     */
    orderBy?: UserTaxProfileOrderByWithRelationInput | UserTaxProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserTaxProfiles.
     */
    cursor?: UserTaxProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTaxProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTaxProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserTaxProfiles.
     */
    distinct?: UserTaxProfileScalarFieldEnum | UserTaxProfileScalarFieldEnum[]
  }

  /**
   * UserTaxProfile findFirstOrThrow
   */
  export type UserTaxProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTaxProfile
     */
    select?: UserTaxProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTaxProfile
     */
    omit?: UserTaxProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTaxProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserTaxProfile to fetch.
     */
    where?: UserTaxProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTaxProfiles to fetch.
     */
    orderBy?: UserTaxProfileOrderByWithRelationInput | UserTaxProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserTaxProfiles.
     */
    cursor?: UserTaxProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTaxProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTaxProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserTaxProfiles.
     */
    distinct?: UserTaxProfileScalarFieldEnum | UserTaxProfileScalarFieldEnum[]
  }

  /**
   * UserTaxProfile findMany
   */
  export type UserTaxProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTaxProfile
     */
    select?: UserTaxProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTaxProfile
     */
    omit?: UserTaxProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTaxProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserTaxProfiles to fetch.
     */
    where?: UserTaxProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTaxProfiles to fetch.
     */
    orderBy?: UserTaxProfileOrderByWithRelationInput | UserTaxProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserTaxProfiles.
     */
    cursor?: UserTaxProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTaxProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTaxProfiles.
     */
    skip?: number
    distinct?: UserTaxProfileScalarFieldEnum | UserTaxProfileScalarFieldEnum[]
  }

  /**
   * UserTaxProfile create
   */
  export type UserTaxProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTaxProfile
     */
    select?: UserTaxProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTaxProfile
     */
    omit?: UserTaxProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTaxProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a UserTaxProfile.
     */
    data: XOR<UserTaxProfileCreateInput, UserTaxProfileUncheckedCreateInput>
  }

  /**
   * UserTaxProfile createMany
   */
  export type UserTaxProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserTaxProfiles.
     */
    data: UserTaxProfileCreateManyInput | UserTaxProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserTaxProfile createManyAndReturn
   */
  export type UserTaxProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTaxProfile
     */
    select?: UserTaxProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserTaxProfile
     */
    omit?: UserTaxProfileOmit<ExtArgs> | null
    /**
     * The data used to create many UserTaxProfiles.
     */
    data: UserTaxProfileCreateManyInput | UserTaxProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTaxProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserTaxProfile update
   */
  export type UserTaxProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTaxProfile
     */
    select?: UserTaxProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTaxProfile
     */
    omit?: UserTaxProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTaxProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a UserTaxProfile.
     */
    data: XOR<UserTaxProfileUpdateInput, UserTaxProfileUncheckedUpdateInput>
    /**
     * Choose, which UserTaxProfile to update.
     */
    where: UserTaxProfileWhereUniqueInput
  }

  /**
   * UserTaxProfile updateMany
   */
  export type UserTaxProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserTaxProfiles.
     */
    data: XOR<UserTaxProfileUpdateManyMutationInput, UserTaxProfileUncheckedUpdateManyInput>
    /**
     * Filter which UserTaxProfiles to update
     */
    where?: UserTaxProfileWhereInput
    /**
     * Limit how many UserTaxProfiles to update.
     */
    limit?: number
  }

  /**
   * UserTaxProfile updateManyAndReturn
   */
  export type UserTaxProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTaxProfile
     */
    select?: UserTaxProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserTaxProfile
     */
    omit?: UserTaxProfileOmit<ExtArgs> | null
    /**
     * The data used to update UserTaxProfiles.
     */
    data: XOR<UserTaxProfileUpdateManyMutationInput, UserTaxProfileUncheckedUpdateManyInput>
    /**
     * Filter which UserTaxProfiles to update
     */
    where?: UserTaxProfileWhereInput
    /**
     * Limit how many UserTaxProfiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTaxProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserTaxProfile upsert
   */
  export type UserTaxProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTaxProfile
     */
    select?: UserTaxProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTaxProfile
     */
    omit?: UserTaxProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTaxProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the UserTaxProfile to update in case it exists.
     */
    where: UserTaxProfileWhereUniqueInput
    /**
     * In case the UserTaxProfile found by the `where` argument doesn't exist, create a new UserTaxProfile with this data.
     */
    create: XOR<UserTaxProfileCreateInput, UserTaxProfileUncheckedCreateInput>
    /**
     * In case the UserTaxProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserTaxProfileUpdateInput, UserTaxProfileUncheckedUpdateInput>
  }

  /**
   * UserTaxProfile delete
   */
  export type UserTaxProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTaxProfile
     */
    select?: UserTaxProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTaxProfile
     */
    omit?: UserTaxProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTaxProfileInclude<ExtArgs> | null
    /**
     * Filter which UserTaxProfile to delete.
     */
    where: UserTaxProfileWhereUniqueInput
  }

  /**
   * UserTaxProfile deleteMany
   */
  export type UserTaxProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserTaxProfiles to delete
     */
    where?: UserTaxProfileWhereInput
    /**
     * Limit how many UserTaxProfiles to delete.
     */
    limit?: number
  }

  /**
   * UserTaxProfile.Invoice
   */
  export type UserTaxProfile$InvoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    cursor?: InvoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * UserTaxProfile without action
   */
  export type UserTaxProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTaxProfile
     */
    select?: UserTaxProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTaxProfile
     */
    omit?: UserTaxProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTaxProfileInclude<ExtArgs> | null
  }


  /**
   * Model Customer
   */

  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerAvgAggregateOutputType = {
    id: number | null
  }

  export type CustomerSumAggregateOutputType = {
    id: bigint | null
  }

  export type CustomerMinAggregateOutputType = {
    id: bigint | null
    email: string | null
    phone: string | null
    firstName: string | null
    lastName: string | null
    isEnabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerMaxAggregateOutputType = {
    id: bigint | null
    email: string | null
    phone: string | null
    firstName: string | null
    lastName: string | null
    isEnabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerCountAggregateOutputType = {
    id: number
    email: number
    phone: number
    firstName: number
    lastName: number
    isEnabled: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CustomerAvgAggregateInputType = {
    id?: true
  }

  export type CustomerSumAggregateInputType = {
    id?: true
  }

  export type CustomerMinAggregateInputType = {
    id?: true
    email?: true
    phone?: true
    firstName?: true
    lastName?: true
    isEnabled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerMaxAggregateInputType = {
    id?: true
    email?: true
    phone?: true
    firstName?: true
    lastName?: true
    isEnabled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerCountAggregateInputType = {
    id?: true
    email?: true
    phone?: true
    firstName?: true
    lastName?: true
    isEnabled?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customer to aggregate.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithAggregationInput | CustomerOrderByWithAggregationInput[]
    by: CustomerScalarFieldEnum[] | CustomerScalarFieldEnum
    having?: CustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _avg?: CustomerAvgAggregateInputType
    _sum?: CustomerSumAggregateInputType
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }

  export type CustomerGroupByOutputType = {
    id: bigint
    email: string
    phone: string | null
    firstName: string
    lastName: string
    isEnabled: boolean
    createdAt: Date
    updatedAt: Date
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    phone?: boolean
    firstName?: boolean
    lastName?: boolean
    isEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    taxProfiles?: boolean | Customer$taxProfilesArgs<ExtArgs>
    billedInvoices?: boolean | Customer$billedInvoicesArgs<ExtArgs>
    shippedInvoices?: boolean | Customer$shippedInvoicesArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    phone?: boolean
    firstName?: boolean
    lastName?: boolean
    isEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    phone?: boolean
    firstName?: boolean
    lastName?: boolean
    isEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectScalar = {
    id?: boolean
    email?: boolean
    phone?: boolean
    firstName?: boolean
    lastName?: boolean
    isEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CustomerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "phone" | "firstName" | "lastName" | "isEnabled" | "createdAt" | "updatedAt", ExtArgs["result"]["customer"]>
  export type CustomerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    taxProfiles?: boolean | Customer$taxProfilesArgs<ExtArgs>
    billedInvoices?: boolean | Customer$billedInvoicesArgs<ExtArgs>
    shippedInvoices?: boolean | Customer$shippedInvoicesArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CustomerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CustomerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CustomerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Customer"
    objects: {
      taxProfiles: Prisma.$CustomerTaxProfilePayload<ExtArgs>[]
      billedInvoices: Prisma.$InvoicePayload<ExtArgs>[]
      shippedInvoices: Prisma.$InvoicePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      email: string
      phone: string | null
      firstName: string
      lastName: string
      isEnabled: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["customer"]>
    composites: {}
  }

  type CustomerGetPayload<S extends boolean | null | undefined | CustomerDefaultArgs> = $Result.GetResult<Prisma.$CustomerPayload, S>

  type CustomerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface CustomerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Customer'], meta: { name: 'Customer' } }
    /**
     * Find zero or one Customer that matches the filter.
     * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerFindUniqueArgs>(args: SelectSubset<T, CustomerFindUniqueArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Customer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerFindFirstArgs>(args?: SelectSubset<T, CustomerFindFirstArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerWithIdOnly = await prisma.customer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerFindManyArgs>(args?: SelectSubset<T, CustomerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Customer.
     * @param {CustomerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
     */
    create<T extends CustomerCreateArgs>(args: SelectSubset<T, CustomerCreateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Customers.
     * @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerCreateManyArgs>(args?: SelectSubset<T, CustomerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Customers and returns the data saved in the database.
     * @param {CustomerCreateManyAndReturnArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Customer.
     * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
     */
    delete<T extends CustomerDeleteArgs>(args: SelectSubset<T, CustomerDeleteArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Customer.
     * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerUpdateArgs>(args: SelectSubset<T, CustomerUpdateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Customers.
     * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerDeleteManyArgs>(args?: SelectSubset<T, CustomerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerUpdateManyArgs>(args: SelectSubset<T, CustomerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers and returns the data updated in the database.
     * @param {CustomerUpdateManyAndReturnArgs} args - Arguments to update many Customers.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomerUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Customer.
     * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
     */
    upsert<T extends CustomerUpsertArgs>(args: SelectSubset<T, CustomerUpsertArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomerCountArgs>(
      args?: Subset<T, CustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Customer model
   */
  readonly fields: CustomerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    taxProfiles<T extends Customer$taxProfilesArgs<ExtArgs> = {}>(args?: Subset<T, Customer$taxProfilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerTaxProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    billedInvoices<T extends Customer$billedInvoicesArgs<ExtArgs> = {}>(args?: Subset<T, Customer$billedInvoicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    shippedInvoices<T extends Customer$shippedInvoicesArgs<ExtArgs> = {}>(args?: Subset<T, Customer$shippedInvoicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Customer model
   */
  interface CustomerFieldRefs {
    readonly id: FieldRef<"Customer", 'BigInt'>
    readonly email: FieldRef<"Customer", 'String'>
    readonly phone: FieldRef<"Customer", 'String'>
    readonly firstName: FieldRef<"Customer", 'String'>
    readonly lastName: FieldRef<"Customer", 'String'>
    readonly isEnabled: FieldRef<"Customer", 'Boolean'>
    readonly createdAt: FieldRef<"Customer", 'DateTime'>
    readonly updatedAt: FieldRef<"Customer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Customer findUnique
   */
  export type CustomerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findUniqueOrThrow
   */
  export type CustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findFirst
   */
  export type CustomerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findFirstOrThrow
   */
  export type CustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findMany
   */
  export type CustomerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer create
   */
  export type CustomerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to create a Customer.
     */
    data: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
  }

  /**
   * Customer createMany
   */
  export type CustomerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Customer createManyAndReturn
   */
  export type CustomerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Customer update
   */
  export type CustomerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to update a Customer.
     */
    data: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
    /**
     * Choose, which Customer to update.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer updateMany
   */
  export type CustomerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
  }

  /**
   * Customer updateManyAndReturn
   */
  export type CustomerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
  }

  /**
   * Customer upsert
   */
  export type CustomerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The filter to search for the Customer to update in case it exists.
     */
    where: CustomerWhereUniqueInput
    /**
     * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
     */
    create: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
    /**
     * In case the Customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
  }

  /**
   * Customer delete
   */
  export type CustomerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter which Customer to delete.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer deleteMany
   */
  export type CustomerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to delete.
     */
    limit?: number
  }

  /**
   * Customer.taxProfiles
   */
  export type Customer$taxProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerTaxProfile
     */
    select?: CustomerTaxProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerTaxProfile
     */
    omit?: CustomerTaxProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerTaxProfileInclude<ExtArgs> | null
    where?: CustomerTaxProfileWhereInput
    orderBy?: CustomerTaxProfileOrderByWithRelationInput | CustomerTaxProfileOrderByWithRelationInput[]
    cursor?: CustomerTaxProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerTaxProfileScalarFieldEnum | CustomerTaxProfileScalarFieldEnum[]
  }

  /**
   * Customer.billedInvoices
   */
  export type Customer$billedInvoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    cursor?: InvoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Customer.shippedInvoices
   */
  export type Customer$shippedInvoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    cursor?: InvoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Customer without action
   */
  export type CustomerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
  }


  /**
   * Model CustomerTaxProfile
   */

  export type AggregateCustomerTaxProfile = {
    _count: CustomerTaxProfileCountAggregateOutputType | null
    _avg: CustomerTaxProfileAvgAggregateOutputType | null
    _sum: CustomerTaxProfileSumAggregateOutputType | null
    _min: CustomerTaxProfileMinAggregateOutputType | null
    _max: CustomerTaxProfileMaxAggregateOutputType | null
  }

  export type CustomerTaxProfileAvgAggregateOutputType = {
    id: number | null
    customerId: number | null
  }

  export type CustomerTaxProfileSumAggregateOutputType = {
    id: bigint | null
    customerId: bigint | null
  }

  export type CustomerTaxProfileMinAggregateOutputType = {
    id: bigint | null
    customerId: bigint | null
    type: $Enums.TaxType | null
    legalName: string | null
    fiscalCode: string | null
    vatNumber: string | null
    addressLine1: string | null
    addressLine2: string | null
    city: string | null
    province: string | null
    postalCode: string | null
    countryCode: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerTaxProfileMaxAggregateOutputType = {
    id: bigint | null
    customerId: bigint | null
    type: $Enums.TaxType | null
    legalName: string | null
    fiscalCode: string | null
    vatNumber: string | null
    addressLine1: string | null
    addressLine2: string | null
    city: string | null
    province: string | null
    postalCode: string | null
    countryCode: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerTaxProfileCountAggregateOutputType = {
    id: number
    customerId: number
    type: number
    legalName: number
    fiscalCode: number
    vatNumber: number
    addressLine1: number
    addressLine2: number
    city: number
    province: number
    postalCode: number
    countryCode: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CustomerTaxProfileAvgAggregateInputType = {
    id?: true
    customerId?: true
  }

  export type CustomerTaxProfileSumAggregateInputType = {
    id?: true
    customerId?: true
  }

  export type CustomerTaxProfileMinAggregateInputType = {
    id?: true
    customerId?: true
    type?: true
    legalName?: true
    fiscalCode?: true
    vatNumber?: true
    addressLine1?: true
    addressLine2?: true
    city?: true
    province?: true
    postalCode?: true
    countryCode?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerTaxProfileMaxAggregateInputType = {
    id?: true
    customerId?: true
    type?: true
    legalName?: true
    fiscalCode?: true
    vatNumber?: true
    addressLine1?: true
    addressLine2?: true
    city?: true
    province?: true
    postalCode?: true
    countryCode?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerTaxProfileCountAggregateInputType = {
    id?: true
    customerId?: true
    type?: true
    legalName?: true
    fiscalCode?: true
    vatNumber?: true
    addressLine1?: true
    addressLine2?: true
    city?: true
    province?: true
    postalCode?: true
    countryCode?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CustomerTaxProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerTaxProfile to aggregate.
     */
    where?: CustomerTaxProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerTaxProfiles to fetch.
     */
    orderBy?: CustomerTaxProfileOrderByWithRelationInput | CustomerTaxProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerTaxProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerTaxProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerTaxProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CustomerTaxProfiles
    **/
    _count?: true | CustomerTaxProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerTaxProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerTaxProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerTaxProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerTaxProfileMaxAggregateInputType
  }

  export type GetCustomerTaxProfileAggregateType<T extends CustomerTaxProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomerTaxProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomerTaxProfile[P]>
      : GetScalarType<T[P], AggregateCustomerTaxProfile[P]>
  }




  export type CustomerTaxProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerTaxProfileWhereInput
    orderBy?: CustomerTaxProfileOrderByWithAggregationInput | CustomerTaxProfileOrderByWithAggregationInput[]
    by: CustomerTaxProfileScalarFieldEnum[] | CustomerTaxProfileScalarFieldEnum
    having?: CustomerTaxProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerTaxProfileCountAggregateInputType | true
    _avg?: CustomerTaxProfileAvgAggregateInputType
    _sum?: CustomerTaxProfileSumAggregateInputType
    _min?: CustomerTaxProfileMinAggregateInputType
    _max?: CustomerTaxProfileMaxAggregateInputType
  }

  export type CustomerTaxProfileGroupByOutputType = {
    id: bigint
    customerId: bigint
    type: $Enums.TaxType
    legalName: string
    fiscalCode: string | null
    vatNumber: string | null
    addressLine1: string
    addressLine2: string | null
    city: string
    province: string | null
    postalCode: string
    countryCode: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: CustomerTaxProfileCountAggregateOutputType | null
    _avg: CustomerTaxProfileAvgAggregateOutputType | null
    _sum: CustomerTaxProfileSumAggregateOutputType | null
    _min: CustomerTaxProfileMinAggregateOutputType | null
    _max: CustomerTaxProfileMaxAggregateOutputType | null
  }

  type GetCustomerTaxProfileGroupByPayload<T extends CustomerTaxProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerTaxProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerTaxProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerTaxProfileGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerTaxProfileGroupByOutputType[P]>
        }
      >
    >


  export type CustomerTaxProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    type?: boolean
    legalName?: boolean
    fiscalCode?: boolean
    vatNumber?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    city?: boolean
    province?: boolean
    postalCode?: boolean
    countryCode?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    BillInvoice?: boolean | CustomerTaxProfile$BillInvoiceArgs<ExtArgs>
    ShipInvoice?: boolean | CustomerTaxProfile$ShipInvoiceArgs<ExtArgs>
    _count?: boolean | CustomerTaxProfileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerTaxProfile"]>

  export type CustomerTaxProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    type?: boolean
    legalName?: boolean
    fiscalCode?: boolean
    vatNumber?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    city?: boolean
    province?: boolean
    postalCode?: boolean
    countryCode?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerTaxProfile"]>

  export type CustomerTaxProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    type?: boolean
    legalName?: boolean
    fiscalCode?: boolean
    vatNumber?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    city?: boolean
    province?: boolean
    postalCode?: boolean
    countryCode?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerTaxProfile"]>

  export type CustomerTaxProfileSelectScalar = {
    id?: boolean
    customerId?: boolean
    type?: boolean
    legalName?: boolean
    fiscalCode?: boolean
    vatNumber?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    city?: boolean
    province?: boolean
    postalCode?: boolean
    countryCode?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CustomerTaxProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "customerId" | "type" | "legalName" | "fiscalCode" | "vatNumber" | "addressLine1" | "addressLine2" | "city" | "province" | "postalCode" | "countryCode" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["customerTaxProfile"]>
  export type CustomerTaxProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    BillInvoice?: boolean | CustomerTaxProfile$BillInvoiceArgs<ExtArgs>
    ShipInvoice?: boolean | CustomerTaxProfile$ShipInvoiceArgs<ExtArgs>
    _count?: boolean | CustomerTaxProfileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CustomerTaxProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }
  export type CustomerTaxProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }

  export type $CustomerTaxProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CustomerTaxProfile"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
      BillInvoice: Prisma.$InvoicePayload<ExtArgs>[]
      ShipInvoice: Prisma.$InvoicePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      customerId: bigint
      type: $Enums.TaxType
      legalName: string
      fiscalCode: string | null
      vatNumber: string | null
      addressLine1: string
      addressLine2: string | null
      city: string
      province: string | null
      postalCode: string
      countryCode: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["customerTaxProfile"]>
    composites: {}
  }

  type CustomerTaxProfileGetPayload<S extends boolean | null | undefined | CustomerTaxProfileDefaultArgs> = $Result.GetResult<Prisma.$CustomerTaxProfilePayload, S>

  type CustomerTaxProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerTaxProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerTaxProfileCountAggregateInputType | true
    }

  export interface CustomerTaxProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CustomerTaxProfile'], meta: { name: 'CustomerTaxProfile' } }
    /**
     * Find zero or one CustomerTaxProfile that matches the filter.
     * @param {CustomerTaxProfileFindUniqueArgs} args - Arguments to find a CustomerTaxProfile
     * @example
     * // Get one CustomerTaxProfile
     * const customerTaxProfile = await prisma.customerTaxProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerTaxProfileFindUniqueArgs>(args: SelectSubset<T, CustomerTaxProfileFindUniqueArgs<ExtArgs>>): Prisma__CustomerTaxProfileClient<$Result.GetResult<Prisma.$CustomerTaxProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CustomerTaxProfile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerTaxProfileFindUniqueOrThrowArgs} args - Arguments to find a CustomerTaxProfile
     * @example
     * // Get one CustomerTaxProfile
     * const customerTaxProfile = await prisma.customerTaxProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerTaxProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerTaxProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerTaxProfileClient<$Result.GetResult<Prisma.$CustomerTaxProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerTaxProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerTaxProfileFindFirstArgs} args - Arguments to find a CustomerTaxProfile
     * @example
     * // Get one CustomerTaxProfile
     * const customerTaxProfile = await prisma.customerTaxProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerTaxProfileFindFirstArgs>(args?: SelectSubset<T, CustomerTaxProfileFindFirstArgs<ExtArgs>>): Prisma__CustomerTaxProfileClient<$Result.GetResult<Prisma.$CustomerTaxProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerTaxProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerTaxProfileFindFirstOrThrowArgs} args - Arguments to find a CustomerTaxProfile
     * @example
     * // Get one CustomerTaxProfile
     * const customerTaxProfile = await prisma.customerTaxProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerTaxProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerTaxProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerTaxProfileClient<$Result.GetResult<Prisma.$CustomerTaxProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CustomerTaxProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerTaxProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CustomerTaxProfiles
     * const customerTaxProfiles = await prisma.customerTaxProfile.findMany()
     * 
     * // Get first 10 CustomerTaxProfiles
     * const customerTaxProfiles = await prisma.customerTaxProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerTaxProfileWithIdOnly = await prisma.customerTaxProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerTaxProfileFindManyArgs>(args?: SelectSubset<T, CustomerTaxProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerTaxProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CustomerTaxProfile.
     * @param {CustomerTaxProfileCreateArgs} args - Arguments to create a CustomerTaxProfile.
     * @example
     * // Create one CustomerTaxProfile
     * const CustomerTaxProfile = await prisma.customerTaxProfile.create({
     *   data: {
     *     // ... data to create a CustomerTaxProfile
     *   }
     * })
     * 
     */
    create<T extends CustomerTaxProfileCreateArgs>(args: SelectSubset<T, CustomerTaxProfileCreateArgs<ExtArgs>>): Prisma__CustomerTaxProfileClient<$Result.GetResult<Prisma.$CustomerTaxProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CustomerTaxProfiles.
     * @param {CustomerTaxProfileCreateManyArgs} args - Arguments to create many CustomerTaxProfiles.
     * @example
     * // Create many CustomerTaxProfiles
     * const customerTaxProfile = await prisma.customerTaxProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerTaxProfileCreateManyArgs>(args?: SelectSubset<T, CustomerTaxProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CustomerTaxProfiles and returns the data saved in the database.
     * @param {CustomerTaxProfileCreateManyAndReturnArgs} args - Arguments to create many CustomerTaxProfiles.
     * @example
     * // Create many CustomerTaxProfiles
     * const customerTaxProfile = await prisma.customerTaxProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CustomerTaxProfiles and only return the `id`
     * const customerTaxProfileWithIdOnly = await prisma.customerTaxProfile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerTaxProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerTaxProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerTaxProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CustomerTaxProfile.
     * @param {CustomerTaxProfileDeleteArgs} args - Arguments to delete one CustomerTaxProfile.
     * @example
     * // Delete one CustomerTaxProfile
     * const CustomerTaxProfile = await prisma.customerTaxProfile.delete({
     *   where: {
     *     // ... filter to delete one CustomerTaxProfile
     *   }
     * })
     * 
     */
    delete<T extends CustomerTaxProfileDeleteArgs>(args: SelectSubset<T, CustomerTaxProfileDeleteArgs<ExtArgs>>): Prisma__CustomerTaxProfileClient<$Result.GetResult<Prisma.$CustomerTaxProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CustomerTaxProfile.
     * @param {CustomerTaxProfileUpdateArgs} args - Arguments to update one CustomerTaxProfile.
     * @example
     * // Update one CustomerTaxProfile
     * const customerTaxProfile = await prisma.customerTaxProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerTaxProfileUpdateArgs>(args: SelectSubset<T, CustomerTaxProfileUpdateArgs<ExtArgs>>): Prisma__CustomerTaxProfileClient<$Result.GetResult<Prisma.$CustomerTaxProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CustomerTaxProfiles.
     * @param {CustomerTaxProfileDeleteManyArgs} args - Arguments to filter CustomerTaxProfiles to delete.
     * @example
     * // Delete a few CustomerTaxProfiles
     * const { count } = await prisma.customerTaxProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerTaxProfileDeleteManyArgs>(args?: SelectSubset<T, CustomerTaxProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerTaxProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerTaxProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CustomerTaxProfiles
     * const customerTaxProfile = await prisma.customerTaxProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerTaxProfileUpdateManyArgs>(args: SelectSubset<T, CustomerTaxProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerTaxProfiles and returns the data updated in the database.
     * @param {CustomerTaxProfileUpdateManyAndReturnArgs} args - Arguments to update many CustomerTaxProfiles.
     * @example
     * // Update many CustomerTaxProfiles
     * const customerTaxProfile = await prisma.customerTaxProfile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CustomerTaxProfiles and only return the `id`
     * const customerTaxProfileWithIdOnly = await prisma.customerTaxProfile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomerTaxProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomerTaxProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerTaxProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CustomerTaxProfile.
     * @param {CustomerTaxProfileUpsertArgs} args - Arguments to update or create a CustomerTaxProfile.
     * @example
     * // Update or create a CustomerTaxProfile
     * const customerTaxProfile = await prisma.customerTaxProfile.upsert({
     *   create: {
     *     // ... data to create a CustomerTaxProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CustomerTaxProfile we want to update
     *   }
     * })
     */
    upsert<T extends CustomerTaxProfileUpsertArgs>(args: SelectSubset<T, CustomerTaxProfileUpsertArgs<ExtArgs>>): Prisma__CustomerTaxProfileClient<$Result.GetResult<Prisma.$CustomerTaxProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CustomerTaxProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerTaxProfileCountArgs} args - Arguments to filter CustomerTaxProfiles to count.
     * @example
     * // Count the number of CustomerTaxProfiles
     * const count = await prisma.customerTaxProfile.count({
     *   where: {
     *     // ... the filter for the CustomerTaxProfiles we want to count
     *   }
     * })
    **/
    count<T extends CustomerTaxProfileCountArgs>(
      args?: Subset<T, CustomerTaxProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerTaxProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CustomerTaxProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerTaxProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerTaxProfileAggregateArgs>(args: Subset<T, CustomerTaxProfileAggregateArgs>): Prisma.PrismaPromise<GetCustomerTaxProfileAggregateType<T>>

    /**
     * Group by CustomerTaxProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerTaxProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerTaxProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerTaxProfileGroupByArgs['orderBy'] }
        : { orderBy?: CustomerTaxProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerTaxProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerTaxProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CustomerTaxProfile model
   */
  readonly fields: CustomerTaxProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CustomerTaxProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerTaxProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    BillInvoice<T extends CustomerTaxProfile$BillInvoiceArgs<ExtArgs> = {}>(args?: Subset<T, CustomerTaxProfile$BillInvoiceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ShipInvoice<T extends CustomerTaxProfile$ShipInvoiceArgs<ExtArgs> = {}>(args?: Subset<T, CustomerTaxProfile$ShipInvoiceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CustomerTaxProfile model
   */
  interface CustomerTaxProfileFieldRefs {
    readonly id: FieldRef<"CustomerTaxProfile", 'BigInt'>
    readonly customerId: FieldRef<"CustomerTaxProfile", 'BigInt'>
    readonly type: FieldRef<"CustomerTaxProfile", 'TaxType'>
    readonly legalName: FieldRef<"CustomerTaxProfile", 'String'>
    readonly fiscalCode: FieldRef<"CustomerTaxProfile", 'String'>
    readonly vatNumber: FieldRef<"CustomerTaxProfile", 'String'>
    readonly addressLine1: FieldRef<"CustomerTaxProfile", 'String'>
    readonly addressLine2: FieldRef<"CustomerTaxProfile", 'String'>
    readonly city: FieldRef<"CustomerTaxProfile", 'String'>
    readonly province: FieldRef<"CustomerTaxProfile", 'String'>
    readonly postalCode: FieldRef<"CustomerTaxProfile", 'String'>
    readonly countryCode: FieldRef<"CustomerTaxProfile", 'String'>
    readonly isActive: FieldRef<"CustomerTaxProfile", 'Boolean'>
    readonly createdAt: FieldRef<"CustomerTaxProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"CustomerTaxProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CustomerTaxProfile findUnique
   */
  export type CustomerTaxProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerTaxProfile
     */
    select?: CustomerTaxProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerTaxProfile
     */
    omit?: CustomerTaxProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerTaxProfileInclude<ExtArgs> | null
    /**
     * Filter, which CustomerTaxProfile to fetch.
     */
    where: CustomerTaxProfileWhereUniqueInput
  }

  /**
   * CustomerTaxProfile findUniqueOrThrow
   */
  export type CustomerTaxProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerTaxProfile
     */
    select?: CustomerTaxProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerTaxProfile
     */
    omit?: CustomerTaxProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerTaxProfileInclude<ExtArgs> | null
    /**
     * Filter, which CustomerTaxProfile to fetch.
     */
    where: CustomerTaxProfileWhereUniqueInput
  }

  /**
   * CustomerTaxProfile findFirst
   */
  export type CustomerTaxProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerTaxProfile
     */
    select?: CustomerTaxProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerTaxProfile
     */
    omit?: CustomerTaxProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerTaxProfileInclude<ExtArgs> | null
    /**
     * Filter, which CustomerTaxProfile to fetch.
     */
    where?: CustomerTaxProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerTaxProfiles to fetch.
     */
    orderBy?: CustomerTaxProfileOrderByWithRelationInput | CustomerTaxProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerTaxProfiles.
     */
    cursor?: CustomerTaxProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerTaxProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerTaxProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerTaxProfiles.
     */
    distinct?: CustomerTaxProfileScalarFieldEnum | CustomerTaxProfileScalarFieldEnum[]
  }

  /**
   * CustomerTaxProfile findFirstOrThrow
   */
  export type CustomerTaxProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerTaxProfile
     */
    select?: CustomerTaxProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerTaxProfile
     */
    omit?: CustomerTaxProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerTaxProfileInclude<ExtArgs> | null
    /**
     * Filter, which CustomerTaxProfile to fetch.
     */
    where?: CustomerTaxProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerTaxProfiles to fetch.
     */
    orderBy?: CustomerTaxProfileOrderByWithRelationInput | CustomerTaxProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerTaxProfiles.
     */
    cursor?: CustomerTaxProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerTaxProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerTaxProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerTaxProfiles.
     */
    distinct?: CustomerTaxProfileScalarFieldEnum | CustomerTaxProfileScalarFieldEnum[]
  }

  /**
   * CustomerTaxProfile findMany
   */
  export type CustomerTaxProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerTaxProfile
     */
    select?: CustomerTaxProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerTaxProfile
     */
    omit?: CustomerTaxProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerTaxProfileInclude<ExtArgs> | null
    /**
     * Filter, which CustomerTaxProfiles to fetch.
     */
    where?: CustomerTaxProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerTaxProfiles to fetch.
     */
    orderBy?: CustomerTaxProfileOrderByWithRelationInput | CustomerTaxProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CustomerTaxProfiles.
     */
    cursor?: CustomerTaxProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerTaxProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerTaxProfiles.
     */
    skip?: number
    distinct?: CustomerTaxProfileScalarFieldEnum | CustomerTaxProfileScalarFieldEnum[]
  }

  /**
   * CustomerTaxProfile create
   */
  export type CustomerTaxProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerTaxProfile
     */
    select?: CustomerTaxProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerTaxProfile
     */
    omit?: CustomerTaxProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerTaxProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a CustomerTaxProfile.
     */
    data: XOR<CustomerTaxProfileCreateInput, CustomerTaxProfileUncheckedCreateInput>
  }

  /**
   * CustomerTaxProfile createMany
   */
  export type CustomerTaxProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CustomerTaxProfiles.
     */
    data: CustomerTaxProfileCreateManyInput | CustomerTaxProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CustomerTaxProfile createManyAndReturn
   */
  export type CustomerTaxProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerTaxProfile
     */
    select?: CustomerTaxProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerTaxProfile
     */
    omit?: CustomerTaxProfileOmit<ExtArgs> | null
    /**
     * The data used to create many CustomerTaxProfiles.
     */
    data: CustomerTaxProfileCreateManyInput | CustomerTaxProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerTaxProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomerTaxProfile update
   */
  export type CustomerTaxProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerTaxProfile
     */
    select?: CustomerTaxProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerTaxProfile
     */
    omit?: CustomerTaxProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerTaxProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a CustomerTaxProfile.
     */
    data: XOR<CustomerTaxProfileUpdateInput, CustomerTaxProfileUncheckedUpdateInput>
    /**
     * Choose, which CustomerTaxProfile to update.
     */
    where: CustomerTaxProfileWhereUniqueInput
  }

  /**
   * CustomerTaxProfile updateMany
   */
  export type CustomerTaxProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CustomerTaxProfiles.
     */
    data: XOR<CustomerTaxProfileUpdateManyMutationInput, CustomerTaxProfileUncheckedUpdateManyInput>
    /**
     * Filter which CustomerTaxProfiles to update
     */
    where?: CustomerTaxProfileWhereInput
    /**
     * Limit how many CustomerTaxProfiles to update.
     */
    limit?: number
  }

  /**
   * CustomerTaxProfile updateManyAndReturn
   */
  export type CustomerTaxProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerTaxProfile
     */
    select?: CustomerTaxProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerTaxProfile
     */
    omit?: CustomerTaxProfileOmit<ExtArgs> | null
    /**
     * The data used to update CustomerTaxProfiles.
     */
    data: XOR<CustomerTaxProfileUpdateManyMutationInput, CustomerTaxProfileUncheckedUpdateManyInput>
    /**
     * Filter which CustomerTaxProfiles to update
     */
    where?: CustomerTaxProfileWhereInput
    /**
     * Limit how many CustomerTaxProfiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerTaxProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomerTaxProfile upsert
   */
  export type CustomerTaxProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerTaxProfile
     */
    select?: CustomerTaxProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerTaxProfile
     */
    omit?: CustomerTaxProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerTaxProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the CustomerTaxProfile to update in case it exists.
     */
    where: CustomerTaxProfileWhereUniqueInput
    /**
     * In case the CustomerTaxProfile found by the `where` argument doesn't exist, create a new CustomerTaxProfile with this data.
     */
    create: XOR<CustomerTaxProfileCreateInput, CustomerTaxProfileUncheckedCreateInput>
    /**
     * In case the CustomerTaxProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerTaxProfileUpdateInput, CustomerTaxProfileUncheckedUpdateInput>
  }

  /**
   * CustomerTaxProfile delete
   */
  export type CustomerTaxProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerTaxProfile
     */
    select?: CustomerTaxProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerTaxProfile
     */
    omit?: CustomerTaxProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerTaxProfileInclude<ExtArgs> | null
    /**
     * Filter which CustomerTaxProfile to delete.
     */
    where: CustomerTaxProfileWhereUniqueInput
  }

  /**
   * CustomerTaxProfile deleteMany
   */
  export type CustomerTaxProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerTaxProfiles to delete
     */
    where?: CustomerTaxProfileWhereInput
    /**
     * Limit how many CustomerTaxProfiles to delete.
     */
    limit?: number
  }

  /**
   * CustomerTaxProfile.BillInvoice
   */
  export type CustomerTaxProfile$BillInvoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    cursor?: InvoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * CustomerTaxProfile.ShipInvoice
   */
  export type CustomerTaxProfile$ShipInvoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    cursor?: InvoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * CustomerTaxProfile without action
   */
  export type CustomerTaxProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerTaxProfile
     */
    select?: CustomerTaxProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerTaxProfile
     */
    omit?: CustomerTaxProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerTaxProfileInclude<ExtArgs> | null
  }


  /**
   * Model Invoice
   */

  export type AggregateInvoice = {
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  export type InvoiceAvgAggregateOutputType = {
    id: number | null
    invoiceNumber: number | null
    issuerUserId: number | null
    issuerTaxProfileId: number | null
    billToCustomerId: number | null
    billToCustomerTaxProfileId: number | null
    shipToCustomerId: number | null
    shipToCustomerTaxProfileId: number | null
    subtotal: Decimal | null
    taxTotal: Decimal | null
    grandTotal: Decimal | null
  }

  export type InvoiceSumAggregateOutputType = {
    id: bigint | null
    invoiceNumber: bigint | null
    issuerUserId: bigint | null
    issuerTaxProfileId: bigint | null
    billToCustomerId: bigint | null
    billToCustomerTaxProfileId: bigint | null
    shipToCustomerId: bigint | null
    shipToCustomerTaxProfileId: bigint | null
    subtotal: Decimal | null
    taxTotal: Decimal | null
    grandTotal: Decimal | null
  }

  export type InvoiceMinAggregateOutputType = {
    id: bigint | null
    invoiceNumber: bigint | null
    issueDate: Date | null
    dueDate: Date | null
    status: $Enums.InvoiceStatus | null
    issuerUserId: bigint | null
    issuerTaxProfileId: bigint | null
    billToCustomerId: bigint | null
    billToCustomerTaxProfileId: bigint | null
    shipToCustomerId: bigint | null
    shipToCustomerTaxProfileId: bigint | null
    currency: string | null
    subtotal: Decimal | null
    taxTotal: Decimal | null
    grandTotal: Decimal | null
    paymentMethod: $Enums.PaymentMethod | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InvoiceMaxAggregateOutputType = {
    id: bigint | null
    invoiceNumber: bigint | null
    issueDate: Date | null
    dueDate: Date | null
    status: $Enums.InvoiceStatus | null
    issuerUserId: bigint | null
    issuerTaxProfileId: bigint | null
    billToCustomerId: bigint | null
    billToCustomerTaxProfileId: bigint | null
    shipToCustomerId: bigint | null
    shipToCustomerTaxProfileId: bigint | null
    currency: string | null
    subtotal: Decimal | null
    taxTotal: Decimal | null
    grandTotal: Decimal | null
    paymentMethod: $Enums.PaymentMethod | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InvoiceCountAggregateOutputType = {
    id: number
    invoiceNumber: number
    issueDate: number
    dueDate: number
    status: number
    issuerUserId: number
    issuerTaxProfileId: number
    billToCustomerId: number
    billToCustomerTaxProfileId: number
    shipToCustomerId: number
    shipToCustomerTaxProfileId: number
    currency: number
    subtotal: number
    taxTotal: number
    grandTotal: number
    paymentMethod: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InvoiceAvgAggregateInputType = {
    id?: true
    invoiceNumber?: true
    issuerUserId?: true
    issuerTaxProfileId?: true
    billToCustomerId?: true
    billToCustomerTaxProfileId?: true
    shipToCustomerId?: true
    shipToCustomerTaxProfileId?: true
    subtotal?: true
    taxTotal?: true
    grandTotal?: true
  }

  export type InvoiceSumAggregateInputType = {
    id?: true
    invoiceNumber?: true
    issuerUserId?: true
    issuerTaxProfileId?: true
    billToCustomerId?: true
    billToCustomerTaxProfileId?: true
    shipToCustomerId?: true
    shipToCustomerTaxProfileId?: true
    subtotal?: true
    taxTotal?: true
    grandTotal?: true
  }

  export type InvoiceMinAggregateInputType = {
    id?: true
    invoiceNumber?: true
    issueDate?: true
    dueDate?: true
    status?: true
    issuerUserId?: true
    issuerTaxProfileId?: true
    billToCustomerId?: true
    billToCustomerTaxProfileId?: true
    shipToCustomerId?: true
    shipToCustomerTaxProfileId?: true
    currency?: true
    subtotal?: true
    taxTotal?: true
    grandTotal?: true
    paymentMethod?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InvoiceMaxAggregateInputType = {
    id?: true
    invoiceNumber?: true
    issueDate?: true
    dueDate?: true
    status?: true
    issuerUserId?: true
    issuerTaxProfileId?: true
    billToCustomerId?: true
    billToCustomerTaxProfileId?: true
    shipToCustomerId?: true
    shipToCustomerTaxProfileId?: true
    currency?: true
    subtotal?: true
    taxTotal?: true
    grandTotal?: true
    paymentMethod?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InvoiceCountAggregateInputType = {
    id?: true
    invoiceNumber?: true
    issueDate?: true
    dueDate?: true
    status?: true
    issuerUserId?: true
    issuerTaxProfileId?: true
    billToCustomerId?: true
    billToCustomerTaxProfileId?: true
    shipToCustomerId?: true
    shipToCustomerTaxProfileId?: true
    currency?: true
    subtotal?: true
    taxTotal?: true
    grandTotal?: true
    paymentMethod?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InvoiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invoice to aggregate.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invoices
    **/
    _count?: true | InvoiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvoiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvoiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvoiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvoiceMaxAggregateInputType
  }

  export type GetInvoiceAggregateType<T extends InvoiceAggregateArgs> = {
        [P in keyof T & keyof AggregateInvoice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvoice[P]>
      : GetScalarType<T[P], AggregateInvoice[P]>
  }




  export type InvoiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithAggregationInput | InvoiceOrderByWithAggregationInput[]
    by: InvoiceScalarFieldEnum[] | InvoiceScalarFieldEnum
    having?: InvoiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvoiceCountAggregateInputType | true
    _avg?: InvoiceAvgAggregateInputType
    _sum?: InvoiceSumAggregateInputType
    _min?: InvoiceMinAggregateInputType
    _max?: InvoiceMaxAggregateInputType
  }

  export type InvoiceGroupByOutputType = {
    id: bigint
    invoiceNumber: bigint
    issueDate: Date
    dueDate: Date
    status: $Enums.InvoiceStatus
    issuerUserId: bigint
    issuerTaxProfileId: bigint
    billToCustomerId: bigint
    billToCustomerTaxProfileId: bigint
    shipToCustomerId: bigint | null
    shipToCustomerTaxProfileId: bigint | null
    currency: string
    subtotal: Decimal
    taxTotal: Decimal
    grandTotal: Decimal
    paymentMethod: $Enums.PaymentMethod
    createdAt: Date
    updatedAt: Date
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  type GetInvoiceGroupByPayload<T extends InvoiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvoiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvoiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
            : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
        }
      >
    >


  export type InvoiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceNumber?: boolean
    issueDate?: boolean
    dueDate?: boolean
    status?: boolean
    issuerUserId?: boolean
    issuerTaxProfileId?: boolean
    billToCustomerId?: boolean
    billToCustomerTaxProfileId?: boolean
    shipToCustomerId?: boolean
    shipToCustomerTaxProfileId?: boolean
    currency?: boolean
    subtotal?: boolean
    taxTotal?: boolean
    grandTotal?: boolean
    paymentMethod?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    issuerUser?: boolean | UserDefaultArgs<ExtArgs>
    issuerTaxProfile?: boolean | UserTaxProfileDefaultArgs<ExtArgs>
    billToCustomer?: boolean | CustomerDefaultArgs<ExtArgs>
    billToCustomerTaxProfile?: boolean | CustomerTaxProfileDefaultArgs<ExtArgs>
    shipToCustomer?: boolean | Invoice$shipToCustomerArgs<ExtArgs>
    shipToCustomerTaxProfile?: boolean | Invoice$shipToCustomerTaxProfileArgs<ExtArgs>
    InvoiceItem?: boolean | Invoice$InvoiceItemArgs<ExtArgs>
    UserInvoice?: boolean | Invoice$UserInvoiceArgs<ExtArgs>
    _count?: boolean | InvoiceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>

  export type InvoiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceNumber?: boolean
    issueDate?: boolean
    dueDate?: boolean
    status?: boolean
    issuerUserId?: boolean
    issuerTaxProfileId?: boolean
    billToCustomerId?: boolean
    billToCustomerTaxProfileId?: boolean
    shipToCustomerId?: boolean
    shipToCustomerTaxProfileId?: boolean
    currency?: boolean
    subtotal?: boolean
    taxTotal?: boolean
    grandTotal?: boolean
    paymentMethod?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    issuerUser?: boolean | UserDefaultArgs<ExtArgs>
    issuerTaxProfile?: boolean | UserTaxProfileDefaultArgs<ExtArgs>
    billToCustomer?: boolean | CustomerDefaultArgs<ExtArgs>
    billToCustomerTaxProfile?: boolean | CustomerTaxProfileDefaultArgs<ExtArgs>
    shipToCustomer?: boolean | Invoice$shipToCustomerArgs<ExtArgs>
    shipToCustomerTaxProfile?: boolean | Invoice$shipToCustomerTaxProfileArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>

  export type InvoiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceNumber?: boolean
    issueDate?: boolean
    dueDate?: boolean
    status?: boolean
    issuerUserId?: boolean
    issuerTaxProfileId?: boolean
    billToCustomerId?: boolean
    billToCustomerTaxProfileId?: boolean
    shipToCustomerId?: boolean
    shipToCustomerTaxProfileId?: boolean
    currency?: boolean
    subtotal?: boolean
    taxTotal?: boolean
    grandTotal?: boolean
    paymentMethod?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    issuerUser?: boolean | UserDefaultArgs<ExtArgs>
    issuerTaxProfile?: boolean | UserTaxProfileDefaultArgs<ExtArgs>
    billToCustomer?: boolean | CustomerDefaultArgs<ExtArgs>
    billToCustomerTaxProfile?: boolean | CustomerTaxProfileDefaultArgs<ExtArgs>
    shipToCustomer?: boolean | Invoice$shipToCustomerArgs<ExtArgs>
    shipToCustomerTaxProfile?: boolean | Invoice$shipToCustomerTaxProfileArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>

  export type InvoiceSelectScalar = {
    id?: boolean
    invoiceNumber?: boolean
    issueDate?: boolean
    dueDate?: boolean
    status?: boolean
    issuerUserId?: boolean
    issuerTaxProfileId?: boolean
    billToCustomerId?: boolean
    billToCustomerTaxProfileId?: boolean
    shipToCustomerId?: boolean
    shipToCustomerTaxProfileId?: boolean
    currency?: boolean
    subtotal?: boolean
    taxTotal?: boolean
    grandTotal?: boolean
    paymentMethod?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InvoiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "invoiceNumber" | "issueDate" | "dueDate" | "status" | "issuerUserId" | "issuerTaxProfileId" | "billToCustomerId" | "billToCustomerTaxProfileId" | "shipToCustomerId" | "shipToCustomerTaxProfileId" | "currency" | "subtotal" | "taxTotal" | "grandTotal" | "paymentMethod" | "createdAt" | "updatedAt", ExtArgs["result"]["invoice"]>
  export type InvoiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    issuerUser?: boolean | UserDefaultArgs<ExtArgs>
    issuerTaxProfile?: boolean | UserTaxProfileDefaultArgs<ExtArgs>
    billToCustomer?: boolean | CustomerDefaultArgs<ExtArgs>
    billToCustomerTaxProfile?: boolean | CustomerTaxProfileDefaultArgs<ExtArgs>
    shipToCustomer?: boolean | Invoice$shipToCustomerArgs<ExtArgs>
    shipToCustomerTaxProfile?: boolean | Invoice$shipToCustomerTaxProfileArgs<ExtArgs>
    InvoiceItem?: boolean | Invoice$InvoiceItemArgs<ExtArgs>
    UserInvoice?: boolean | Invoice$UserInvoiceArgs<ExtArgs>
    _count?: boolean | InvoiceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InvoiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    issuerUser?: boolean | UserDefaultArgs<ExtArgs>
    issuerTaxProfile?: boolean | UserTaxProfileDefaultArgs<ExtArgs>
    billToCustomer?: boolean | CustomerDefaultArgs<ExtArgs>
    billToCustomerTaxProfile?: boolean | CustomerTaxProfileDefaultArgs<ExtArgs>
    shipToCustomer?: boolean | Invoice$shipToCustomerArgs<ExtArgs>
    shipToCustomerTaxProfile?: boolean | Invoice$shipToCustomerTaxProfileArgs<ExtArgs>
  }
  export type InvoiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    issuerUser?: boolean | UserDefaultArgs<ExtArgs>
    issuerTaxProfile?: boolean | UserTaxProfileDefaultArgs<ExtArgs>
    billToCustomer?: boolean | CustomerDefaultArgs<ExtArgs>
    billToCustomerTaxProfile?: boolean | CustomerTaxProfileDefaultArgs<ExtArgs>
    shipToCustomer?: boolean | Invoice$shipToCustomerArgs<ExtArgs>
    shipToCustomerTaxProfile?: boolean | Invoice$shipToCustomerTaxProfileArgs<ExtArgs>
  }

  export type $InvoicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Invoice"
    objects: {
      issuerUser: Prisma.$UserPayload<ExtArgs>
      issuerTaxProfile: Prisma.$UserTaxProfilePayload<ExtArgs>
      billToCustomer: Prisma.$CustomerPayload<ExtArgs>
      billToCustomerTaxProfile: Prisma.$CustomerTaxProfilePayload<ExtArgs>
      shipToCustomer: Prisma.$CustomerPayload<ExtArgs> | null
      shipToCustomerTaxProfile: Prisma.$CustomerTaxProfilePayload<ExtArgs> | null
      InvoiceItem: Prisma.$InvoiceItemPayload<ExtArgs>[]
      UserInvoice: Prisma.$UserInvoicePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      invoiceNumber: bigint
      issueDate: Date
      dueDate: Date
      status: $Enums.InvoiceStatus
      issuerUserId: bigint
      issuerTaxProfileId: bigint
      billToCustomerId: bigint
      billToCustomerTaxProfileId: bigint
      shipToCustomerId: bigint | null
      shipToCustomerTaxProfileId: bigint | null
      currency: string
      subtotal: Prisma.Decimal
      taxTotal: Prisma.Decimal
      grandTotal: Prisma.Decimal
      paymentMethod: $Enums.PaymentMethod
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["invoice"]>
    composites: {}
  }

  type InvoiceGetPayload<S extends boolean | null | undefined | InvoiceDefaultArgs> = $Result.GetResult<Prisma.$InvoicePayload, S>

  type InvoiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InvoiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InvoiceCountAggregateInputType | true
    }

  export interface InvoiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Invoice'], meta: { name: 'Invoice' } }
    /**
     * Find zero or one Invoice that matches the filter.
     * @param {InvoiceFindUniqueArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InvoiceFindUniqueArgs>(args: SelectSubset<T, InvoiceFindUniqueArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Invoice that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InvoiceFindUniqueOrThrowArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InvoiceFindUniqueOrThrowArgs>(args: SelectSubset<T, InvoiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invoice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindFirstArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InvoiceFindFirstArgs>(args?: SelectSubset<T, InvoiceFindFirstArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invoice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindFirstOrThrowArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InvoiceFindFirstOrThrowArgs>(args?: SelectSubset<T, InvoiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Invoices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invoices
     * const invoices = await prisma.invoice.findMany()
     * 
     * // Get first 10 Invoices
     * const invoices = await prisma.invoice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invoiceWithIdOnly = await prisma.invoice.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InvoiceFindManyArgs>(args?: SelectSubset<T, InvoiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Invoice.
     * @param {InvoiceCreateArgs} args - Arguments to create a Invoice.
     * @example
     * // Create one Invoice
     * const Invoice = await prisma.invoice.create({
     *   data: {
     *     // ... data to create a Invoice
     *   }
     * })
     * 
     */
    create<T extends InvoiceCreateArgs>(args: SelectSubset<T, InvoiceCreateArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Invoices.
     * @param {InvoiceCreateManyArgs} args - Arguments to create many Invoices.
     * @example
     * // Create many Invoices
     * const invoice = await prisma.invoice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InvoiceCreateManyArgs>(args?: SelectSubset<T, InvoiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Invoices and returns the data saved in the database.
     * @param {InvoiceCreateManyAndReturnArgs} args - Arguments to create many Invoices.
     * @example
     * // Create many Invoices
     * const invoice = await prisma.invoice.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Invoices and only return the `id`
     * const invoiceWithIdOnly = await prisma.invoice.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InvoiceCreateManyAndReturnArgs>(args?: SelectSubset<T, InvoiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Invoice.
     * @param {InvoiceDeleteArgs} args - Arguments to delete one Invoice.
     * @example
     * // Delete one Invoice
     * const Invoice = await prisma.invoice.delete({
     *   where: {
     *     // ... filter to delete one Invoice
     *   }
     * })
     * 
     */
    delete<T extends InvoiceDeleteArgs>(args: SelectSubset<T, InvoiceDeleteArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Invoice.
     * @param {InvoiceUpdateArgs} args - Arguments to update one Invoice.
     * @example
     * // Update one Invoice
     * const invoice = await prisma.invoice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InvoiceUpdateArgs>(args: SelectSubset<T, InvoiceUpdateArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Invoices.
     * @param {InvoiceDeleteManyArgs} args - Arguments to filter Invoices to delete.
     * @example
     * // Delete a few Invoices
     * const { count } = await prisma.invoice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InvoiceDeleteManyArgs>(args?: SelectSubset<T, InvoiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invoices
     * const invoice = await prisma.invoice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InvoiceUpdateManyArgs>(args: SelectSubset<T, InvoiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invoices and returns the data updated in the database.
     * @param {InvoiceUpdateManyAndReturnArgs} args - Arguments to update many Invoices.
     * @example
     * // Update many Invoices
     * const invoice = await prisma.invoice.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Invoices and only return the `id`
     * const invoiceWithIdOnly = await prisma.invoice.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InvoiceUpdateManyAndReturnArgs>(args: SelectSubset<T, InvoiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Invoice.
     * @param {InvoiceUpsertArgs} args - Arguments to update or create a Invoice.
     * @example
     * // Update or create a Invoice
     * const invoice = await prisma.invoice.upsert({
     *   create: {
     *     // ... data to create a Invoice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invoice we want to update
     *   }
     * })
     */
    upsert<T extends InvoiceUpsertArgs>(args: SelectSubset<T, InvoiceUpsertArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceCountArgs} args - Arguments to filter Invoices to count.
     * @example
     * // Count the number of Invoices
     * const count = await prisma.invoice.count({
     *   where: {
     *     // ... the filter for the Invoices we want to count
     *   }
     * })
    **/
    count<T extends InvoiceCountArgs>(
      args?: Subset<T, InvoiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvoiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvoiceAggregateArgs>(args: Subset<T, InvoiceAggregateArgs>): Prisma.PrismaPromise<GetInvoiceAggregateType<T>>

    /**
     * Group by Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvoiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvoiceGroupByArgs['orderBy'] }
        : { orderBy?: InvoiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvoiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Invoice model
   */
  readonly fields: InvoiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Invoice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvoiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    issuerUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    issuerTaxProfile<T extends UserTaxProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserTaxProfileDefaultArgs<ExtArgs>>): Prisma__UserTaxProfileClient<$Result.GetResult<Prisma.$UserTaxProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    billToCustomer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    billToCustomerTaxProfile<T extends CustomerTaxProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerTaxProfileDefaultArgs<ExtArgs>>): Prisma__CustomerTaxProfileClient<$Result.GetResult<Prisma.$CustomerTaxProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    shipToCustomer<T extends Invoice$shipToCustomerArgs<ExtArgs> = {}>(args?: Subset<T, Invoice$shipToCustomerArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    shipToCustomerTaxProfile<T extends Invoice$shipToCustomerTaxProfileArgs<ExtArgs> = {}>(args?: Subset<T, Invoice$shipToCustomerTaxProfileArgs<ExtArgs>>): Prisma__CustomerTaxProfileClient<$Result.GetResult<Prisma.$CustomerTaxProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    InvoiceItem<T extends Invoice$InvoiceItemArgs<ExtArgs> = {}>(args?: Subset<T, Invoice$InvoiceItemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    UserInvoice<T extends Invoice$UserInvoiceArgs<ExtArgs> = {}>(args?: Subset<T, Invoice$UserInvoiceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserInvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Invoice model
   */
  interface InvoiceFieldRefs {
    readonly id: FieldRef<"Invoice", 'BigInt'>
    readonly invoiceNumber: FieldRef<"Invoice", 'BigInt'>
    readonly issueDate: FieldRef<"Invoice", 'DateTime'>
    readonly dueDate: FieldRef<"Invoice", 'DateTime'>
    readonly status: FieldRef<"Invoice", 'InvoiceStatus'>
    readonly issuerUserId: FieldRef<"Invoice", 'BigInt'>
    readonly issuerTaxProfileId: FieldRef<"Invoice", 'BigInt'>
    readonly billToCustomerId: FieldRef<"Invoice", 'BigInt'>
    readonly billToCustomerTaxProfileId: FieldRef<"Invoice", 'BigInt'>
    readonly shipToCustomerId: FieldRef<"Invoice", 'BigInt'>
    readonly shipToCustomerTaxProfileId: FieldRef<"Invoice", 'BigInt'>
    readonly currency: FieldRef<"Invoice", 'String'>
    readonly subtotal: FieldRef<"Invoice", 'Decimal'>
    readonly taxTotal: FieldRef<"Invoice", 'Decimal'>
    readonly grandTotal: FieldRef<"Invoice", 'Decimal'>
    readonly paymentMethod: FieldRef<"Invoice", 'PaymentMethod'>
    readonly createdAt: FieldRef<"Invoice", 'DateTime'>
    readonly updatedAt: FieldRef<"Invoice", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Invoice findUnique
   */
  export type InvoiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice findUniqueOrThrow
   */
  export type InvoiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice findFirst
   */
  export type InvoiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invoices.
     */
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Invoice findFirstOrThrow
   */
  export type InvoiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invoices.
     */
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Invoice findMany
   */
  export type InvoiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoices to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Invoice create
   */
  export type InvoiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The data needed to create a Invoice.
     */
    data: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
  }

  /**
   * Invoice createMany
   */
  export type InvoiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Invoices.
     */
    data: InvoiceCreateManyInput | InvoiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Invoice createManyAndReturn
   */
  export type InvoiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * The data used to create many Invoices.
     */
    data: InvoiceCreateManyInput | InvoiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invoice update
   */
  export type InvoiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The data needed to update a Invoice.
     */
    data: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
    /**
     * Choose, which Invoice to update.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice updateMany
   */
  export type InvoiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Invoices.
     */
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyInput>
    /**
     * Filter which Invoices to update
     */
    where?: InvoiceWhereInput
    /**
     * Limit how many Invoices to update.
     */
    limit?: number
  }

  /**
   * Invoice updateManyAndReturn
   */
  export type InvoiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * The data used to update Invoices.
     */
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyInput>
    /**
     * Filter which Invoices to update
     */
    where?: InvoiceWhereInput
    /**
     * Limit how many Invoices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invoice upsert
   */
  export type InvoiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The filter to search for the Invoice to update in case it exists.
     */
    where: InvoiceWhereUniqueInput
    /**
     * In case the Invoice found by the `where` argument doesn't exist, create a new Invoice with this data.
     */
    create: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
    /**
     * In case the Invoice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
  }

  /**
   * Invoice delete
   */
  export type InvoiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter which Invoice to delete.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice deleteMany
   */
  export type InvoiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invoices to delete
     */
    where?: InvoiceWhereInput
    /**
     * Limit how many Invoices to delete.
     */
    limit?: number
  }

  /**
   * Invoice.shipToCustomer
   */
  export type Invoice$shipToCustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
  }

  /**
   * Invoice.shipToCustomerTaxProfile
   */
  export type Invoice$shipToCustomerTaxProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerTaxProfile
     */
    select?: CustomerTaxProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerTaxProfile
     */
    omit?: CustomerTaxProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerTaxProfileInclude<ExtArgs> | null
    where?: CustomerTaxProfileWhereInput
  }

  /**
   * Invoice.InvoiceItem
   */
  export type Invoice$InvoiceItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    where?: InvoiceItemWhereInput
    orderBy?: InvoiceItemOrderByWithRelationInput | InvoiceItemOrderByWithRelationInput[]
    cursor?: InvoiceItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceItemScalarFieldEnum | InvoiceItemScalarFieldEnum[]
  }

  /**
   * Invoice.UserInvoice
   */
  export type Invoice$UserInvoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvoice
     */
    select?: UserInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserInvoice
     */
    omit?: UserInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvoiceInclude<ExtArgs> | null
    where?: UserInvoiceWhereInput
    orderBy?: UserInvoiceOrderByWithRelationInput | UserInvoiceOrderByWithRelationInput[]
    cursor?: UserInvoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserInvoiceScalarFieldEnum | UserInvoiceScalarFieldEnum[]
  }

  /**
   * Invoice without action
   */
  export type InvoiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
  }


  /**
   * Model InvoiceItem
   */

  export type AggregateInvoiceItem = {
    _count: InvoiceItemCountAggregateOutputType | null
    _avg: InvoiceItemAvgAggregateOutputType | null
    _sum: InvoiceItemSumAggregateOutputType | null
    _min: InvoiceItemMinAggregateOutputType | null
    _max: InvoiceItemMaxAggregateOutputType | null
  }

  export type InvoiceItemAvgAggregateOutputType = {
    id: number | null
    invoiceId: number | null
    quantity: Decimal | null
    unitPrice: Decimal | null
    taxRate: Decimal | null
    lineTotal: Decimal | null
  }

  export type InvoiceItemSumAggregateOutputType = {
    id: bigint | null
    invoiceId: bigint | null
    quantity: Decimal | null
    unitPrice: Decimal | null
    taxRate: Decimal | null
    lineTotal: Decimal | null
  }

  export type InvoiceItemMinAggregateOutputType = {
    id: bigint | null
    invoiceId: bigint | null
    codProduct: string | null
    description: string | null
    quantity: Decimal | null
    unitPrice: Decimal | null
    taxRate: Decimal | null
    lineTotal: Decimal | null
  }

  export type InvoiceItemMaxAggregateOutputType = {
    id: bigint | null
    invoiceId: bigint | null
    codProduct: string | null
    description: string | null
    quantity: Decimal | null
    unitPrice: Decimal | null
    taxRate: Decimal | null
    lineTotal: Decimal | null
  }

  export type InvoiceItemCountAggregateOutputType = {
    id: number
    invoiceId: number
    codProduct: number
    description: number
    quantity: number
    unitPrice: number
    taxRate: number
    lineTotal: number
    _all: number
  }


  export type InvoiceItemAvgAggregateInputType = {
    id?: true
    invoiceId?: true
    quantity?: true
    unitPrice?: true
    taxRate?: true
    lineTotal?: true
  }

  export type InvoiceItemSumAggregateInputType = {
    id?: true
    invoiceId?: true
    quantity?: true
    unitPrice?: true
    taxRate?: true
    lineTotal?: true
  }

  export type InvoiceItemMinAggregateInputType = {
    id?: true
    invoiceId?: true
    codProduct?: true
    description?: true
    quantity?: true
    unitPrice?: true
    taxRate?: true
    lineTotal?: true
  }

  export type InvoiceItemMaxAggregateInputType = {
    id?: true
    invoiceId?: true
    codProduct?: true
    description?: true
    quantity?: true
    unitPrice?: true
    taxRate?: true
    lineTotal?: true
  }

  export type InvoiceItemCountAggregateInputType = {
    id?: true
    invoiceId?: true
    codProduct?: true
    description?: true
    quantity?: true
    unitPrice?: true
    taxRate?: true
    lineTotal?: true
    _all?: true
  }

  export type InvoiceItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InvoiceItem to aggregate.
     */
    where?: InvoiceItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceItems to fetch.
     */
    orderBy?: InvoiceItemOrderByWithRelationInput | InvoiceItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvoiceItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InvoiceItems
    **/
    _count?: true | InvoiceItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvoiceItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvoiceItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvoiceItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvoiceItemMaxAggregateInputType
  }

  export type GetInvoiceItemAggregateType<T extends InvoiceItemAggregateArgs> = {
        [P in keyof T & keyof AggregateInvoiceItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvoiceItem[P]>
      : GetScalarType<T[P], AggregateInvoiceItem[P]>
  }




  export type InvoiceItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceItemWhereInput
    orderBy?: InvoiceItemOrderByWithAggregationInput | InvoiceItemOrderByWithAggregationInput[]
    by: InvoiceItemScalarFieldEnum[] | InvoiceItemScalarFieldEnum
    having?: InvoiceItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvoiceItemCountAggregateInputType | true
    _avg?: InvoiceItemAvgAggregateInputType
    _sum?: InvoiceItemSumAggregateInputType
    _min?: InvoiceItemMinAggregateInputType
    _max?: InvoiceItemMaxAggregateInputType
  }

  export type InvoiceItemGroupByOutputType = {
    id: bigint
    invoiceId: bigint
    codProduct: string | null
    description: string
    quantity: Decimal
    unitPrice: Decimal
    taxRate: Decimal
    lineTotal: Decimal
    _count: InvoiceItemCountAggregateOutputType | null
    _avg: InvoiceItemAvgAggregateOutputType | null
    _sum: InvoiceItemSumAggregateOutputType | null
    _min: InvoiceItemMinAggregateOutputType | null
    _max: InvoiceItemMaxAggregateOutputType | null
  }

  type GetInvoiceItemGroupByPayload<T extends InvoiceItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvoiceItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvoiceItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvoiceItemGroupByOutputType[P]>
            : GetScalarType<T[P], InvoiceItemGroupByOutputType[P]>
        }
      >
    >


  export type InvoiceItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceId?: boolean
    codProduct?: boolean
    description?: boolean
    quantity?: boolean
    unitPrice?: boolean
    taxRate?: boolean
    lineTotal?: boolean
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoiceItem"]>

  export type InvoiceItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceId?: boolean
    codProduct?: boolean
    description?: boolean
    quantity?: boolean
    unitPrice?: boolean
    taxRate?: boolean
    lineTotal?: boolean
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoiceItem"]>

  export type InvoiceItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceId?: boolean
    codProduct?: boolean
    description?: boolean
    quantity?: boolean
    unitPrice?: boolean
    taxRate?: boolean
    lineTotal?: boolean
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoiceItem"]>

  export type InvoiceItemSelectScalar = {
    id?: boolean
    invoiceId?: boolean
    codProduct?: boolean
    description?: boolean
    quantity?: boolean
    unitPrice?: boolean
    taxRate?: boolean
    lineTotal?: boolean
  }

  export type InvoiceItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "invoiceId" | "codProduct" | "description" | "quantity" | "unitPrice" | "taxRate" | "lineTotal", ExtArgs["result"]["invoiceItem"]>
  export type InvoiceItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }
  export type InvoiceItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }
  export type InvoiceItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }

  export type $InvoiceItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InvoiceItem"
    objects: {
      invoice: Prisma.$InvoicePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      invoiceId: bigint
      codProduct: string | null
      description: string
      quantity: Prisma.Decimal
      unitPrice: Prisma.Decimal
      taxRate: Prisma.Decimal
      lineTotal: Prisma.Decimal
    }, ExtArgs["result"]["invoiceItem"]>
    composites: {}
  }

  type InvoiceItemGetPayload<S extends boolean | null | undefined | InvoiceItemDefaultArgs> = $Result.GetResult<Prisma.$InvoiceItemPayload, S>

  type InvoiceItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InvoiceItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InvoiceItemCountAggregateInputType | true
    }

  export interface InvoiceItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InvoiceItem'], meta: { name: 'InvoiceItem' } }
    /**
     * Find zero or one InvoiceItem that matches the filter.
     * @param {InvoiceItemFindUniqueArgs} args - Arguments to find a InvoiceItem
     * @example
     * // Get one InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InvoiceItemFindUniqueArgs>(args: SelectSubset<T, InvoiceItemFindUniqueArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InvoiceItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InvoiceItemFindUniqueOrThrowArgs} args - Arguments to find a InvoiceItem
     * @example
     * // Get one InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InvoiceItemFindUniqueOrThrowArgs>(args: SelectSubset<T, InvoiceItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InvoiceItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemFindFirstArgs} args - Arguments to find a InvoiceItem
     * @example
     * // Get one InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InvoiceItemFindFirstArgs>(args?: SelectSubset<T, InvoiceItemFindFirstArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InvoiceItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemFindFirstOrThrowArgs} args - Arguments to find a InvoiceItem
     * @example
     * // Get one InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InvoiceItemFindFirstOrThrowArgs>(args?: SelectSubset<T, InvoiceItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InvoiceItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InvoiceItems
     * const invoiceItems = await prisma.invoiceItem.findMany()
     * 
     * // Get first 10 InvoiceItems
     * const invoiceItems = await prisma.invoiceItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invoiceItemWithIdOnly = await prisma.invoiceItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InvoiceItemFindManyArgs>(args?: SelectSubset<T, InvoiceItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InvoiceItem.
     * @param {InvoiceItemCreateArgs} args - Arguments to create a InvoiceItem.
     * @example
     * // Create one InvoiceItem
     * const InvoiceItem = await prisma.invoiceItem.create({
     *   data: {
     *     // ... data to create a InvoiceItem
     *   }
     * })
     * 
     */
    create<T extends InvoiceItemCreateArgs>(args: SelectSubset<T, InvoiceItemCreateArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InvoiceItems.
     * @param {InvoiceItemCreateManyArgs} args - Arguments to create many InvoiceItems.
     * @example
     * // Create many InvoiceItems
     * const invoiceItem = await prisma.invoiceItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InvoiceItemCreateManyArgs>(args?: SelectSubset<T, InvoiceItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InvoiceItems and returns the data saved in the database.
     * @param {InvoiceItemCreateManyAndReturnArgs} args - Arguments to create many InvoiceItems.
     * @example
     * // Create many InvoiceItems
     * const invoiceItem = await prisma.invoiceItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InvoiceItems and only return the `id`
     * const invoiceItemWithIdOnly = await prisma.invoiceItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InvoiceItemCreateManyAndReturnArgs>(args?: SelectSubset<T, InvoiceItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InvoiceItem.
     * @param {InvoiceItemDeleteArgs} args - Arguments to delete one InvoiceItem.
     * @example
     * // Delete one InvoiceItem
     * const InvoiceItem = await prisma.invoiceItem.delete({
     *   where: {
     *     // ... filter to delete one InvoiceItem
     *   }
     * })
     * 
     */
    delete<T extends InvoiceItemDeleteArgs>(args: SelectSubset<T, InvoiceItemDeleteArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InvoiceItem.
     * @param {InvoiceItemUpdateArgs} args - Arguments to update one InvoiceItem.
     * @example
     * // Update one InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InvoiceItemUpdateArgs>(args: SelectSubset<T, InvoiceItemUpdateArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InvoiceItems.
     * @param {InvoiceItemDeleteManyArgs} args - Arguments to filter InvoiceItems to delete.
     * @example
     * // Delete a few InvoiceItems
     * const { count } = await prisma.invoiceItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InvoiceItemDeleteManyArgs>(args?: SelectSubset<T, InvoiceItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InvoiceItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InvoiceItems
     * const invoiceItem = await prisma.invoiceItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InvoiceItemUpdateManyArgs>(args: SelectSubset<T, InvoiceItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InvoiceItems and returns the data updated in the database.
     * @param {InvoiceItemUpdateManyAndReturnArgs} args - Arguments to update many InvoiceItems.
     * @example
     * // Update many InvoiceItems
     * const invoiceItem = await prisma.invoiceItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InvoiceItems and only return the `id`
     * const invoiceItemWithIdOnly = await prisma.invoiceItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InvoiceItemUpdateManyAndReturnArgs>(args: SelectSubset<T, InvoiceItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InvoiceItem.
     * @param {InvoiceItemUpsertArgs} args - Arguments to update or create a InvoiceItem.
     * @example
     * // Update or create a InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.upsert({
     *   create: {
     *     // ... data to create a InvoiceItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InvoiceItem we want to update
     *   }
     * })
     */
    upsert<T extends InvoiceItemUpsertArgs>(args: SelectSubset<T, InvoiceItemUpsertArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InvoiceItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemCountArgs} args - Arguments to filter InvoiceItems to count.
     * @example
     * // Count the number of InvoiceItems
     * const count = await prisma.invoiceItem.count({
     *   where: {
     *     // ... the filter for the InvoiceItems we want to count
     *   }
     * })
    **/
    count<T extends InvoiceItemCountArgs>(
      args?: Subset<T, InvoiceItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvoiceItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InvoiceItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvoiceItemAggregateArgs>(args: Subset<T, InvoiceItemAggregateArgs>): Prisma.PrismaPromise<GetInvoiceItemAggregateType<T>>

    /**
     * Group by InvoiceItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvoiceItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvoiceItemGroupByArgs['orderBy'] }
        : { orderBy?: InvoiceItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvoiceItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvoiceItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InvoiceItem model
   */
  readonly fields: InvoiceItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InvoiceItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvoiceItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    invoice<T extends InvoiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InvoiceDefaultArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InvoiceItem model
   */
  interface InvoiceItemFieldRefs {
    readonly id: FieldRef<"InvoiceItem", 'BigInt'>
    readonly invoiceId: FieldRef<"InvoiceItem", 'BigInt'>
    readonly codProduct: FieldRef<"InvoiceItem", 'String'>
    readonly description: FieldRef<"InvoiceItem", 'String'>
    readonly quantity: FieldRef<"InvoiceItem", 'Decimal'>
    readonly unitPrice: FieldRef<"InvoiceItem", 'Decimal'>
    readonly taxRate: FieldRef<"InvoiceItem", 'Decimal'>
    readonly lineTotal: FieldRef<"InvoiceItem", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * InvoiceItem findUnique
   */
  export type InvoiceItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * Filter, which InvoiceItem to fetch.
     */
    where: InvoiceItemWhereUniqueInput
  }

  /**
   * InvoiceItem findUniqueOrThrow
   */
  export type InvoiceItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * Filter, which InvoiceItem to fetch.
     */
    where: InvoiceItemWhereUniqueInput
  }

  /**
   * InvoiceItem findFirst
   */
  export type InvoiceItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * Filter, which InvoiceItem to fetch.
     */
    where?: InvoiceItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceItems to fetch.
     */
    orderBy?: InvoiceItemOrderByWithRelationInput | InvoiceItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvoiceItems.
     */
    cursor?: InvoiceItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvoiceItems.
     */
    distinct?: InvoiceItemScalarFieldEnum | InvoiceItemScalarFieldEnum[]
  }

  /**
   * InvoiceItem findFirstOrThrow
   */
  export type InvoiceItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * Filter, which InvoiceItem to fetch.
     */
    where?: InvoiceItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceItems to fetch.
     */
    orderBy?: InvoiceItemOrderByWithRelationInput | InvoiceItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvoiceItems.
     */
    cursor?: InvoiceItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvoiceItems.
     */
    distinct?: InvoiceItemScalarFieldEnum | InvoiceItemScalarFieldEnum[]
  }

  /**
   * InvoiceItem findMany
   */
  export type InvoiceItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * Filter, which InvoiceItems to fetch.
     */
    where?: InvoiceItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceItems to fetch.
     */
    orderBy?: InvoiceItemOrderByWithRelationInput | InvoiceItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InvoiceItems.
     */
    cursor?: InvoiceItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceItems.
     */
    skip?: number
    distinct?: InvoiceItemScalarFieldEnum | InvoiceItemScalarFieldEnum[]
  }

  /**
   * InvoiceItem create
   */
  export type InvoiceItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * The data needed to create a InvoiceItem.
     */
    data: XOR<InvoiceItemCreateInput, InvoiceItemUncheckedCreateInput>
  }

  /**
   * InvoiceItem createMany
   */
  export type InvoiceItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InvoiceItems.
     */
    data: InvoiceItemCreateManyInput | InvoiceItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InvoiceItem createManyAndReturn
   */
  export type InvoiceItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * The data used to create many InvoiceItems.
     */
    data: InvoiceItemCreateManyInput | InvoiceItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InvoiceItem update
   */
  export type InvoiceItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * The data needed to update a InvoiceItem.
     */
    data: XOR<InvoiceItemUpdateInput, InvoiceItemUncheckedUpdateInput>
    /**
     * Choose, which InvoiceItem to update.
     */
    where: InvoiceItemWhereUniqueInput
  }

  /**
   * InvoiceItem updateMany
   */
  export type InvoiceItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InvoiceItems.
     */
    data: XOR<InvoiceItemUpdateManyMutationInput, InvoiceItemUncheckedUpdateManyInput>
    /**
     * Filter which InvoiceItems to update
     */
    where?: InvoiceItemWhereInput
    /**
     * Limit how many InvoiceItems to update.
     */
    limit?: number
  }

  /**
   * InvoiceItem updateManyAndReturn
   */
  export type InvoiceItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * The data used to update InvoiceItems.
     */
    data: XOR<InvoiceItemUpdateManyMutationInput, InvoiceItemUncheckedUpdateManyInput>
    /**
     * Filter which InvoiceItems to update
     */
    where?: InvoiceItemWhereInput
    /**
     * Limit how many InvoiceItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * InvoiceItem upsert
   */
  export type InvoiceItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * The filter to search for the InvoiceItem to update in case it exists.
     */
    where: InvoiceItemWhereUniqueInput
    /**
     * In case the InvoiceItem found by the `where` argument doesn't exist, create a new InvoiceItem with this data.
     */
    create: XOR<InvoiceItemCreateInput, InvoiceItemUncheckedCreateInput>
    /**
     * In case the InvoiceItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvoiceItemUpdateInput, InvoiceItemUncheckedUpdateInput>
  }

  /**
   * InvoiceItem delete
   */
  export type InvoiceItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * Filter which InvoiceItem to delete.
     */
    where: InvoiceItemWhereUniqueInput
  }

  /**
   * InvoiceItem deleteMany
   */
  export type InvoiceItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InvoiceItems to delete
     */
    where?: InvoiceItemWhereInput
    /**
     * Limit how many InvoiceItems to delete.
     */
    limit?: number
  }

  /**
   * InvoiceItem without action
   */
  export type InvoiceItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
  }


  /**
   * Model UserInvoice
   */

  export type AggregateUserInvoice = {
    _count: UserInvoiceCountAggregateOutputType | null
    _avg: UserInvoiceAvgAggregateOutputType | null
    _sum: UserInvoiceSumAggregateOutputType | null
    _min: UserInvoiceMinAggregateOutputType | null
    _max: UserInvoiceMaxAggregateOutputType | null
  }

  export type UserInvoiceAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    invoiceId: number | null
  }

  export type UserInvoiceSumAggregateOutputType = {
    id: bigint | null
    userId: bigint | null
    invoiceId: bigint | null
  }

  export type UserInvoiceMinAggregateOutputType = {
    id: bigint | null
    userId: bigint | null
    invoiceId: bigint | null
    dateLinked: Date | null
    firstView: Date | null
    lastView: Date | null
  }

  export type UserInvoiceMaxAggregateOutputType = {
    id: bigint | null
    userId: bigint | null
    invoiceId: bigint | null
    dateLinked: Date | null
    firstView: Date | null
    lastView: Date | null
  }

  export type UserInvoiceCountAggregateOutputType = {
    id: number
    userId: number
    invoiceId: number
    dateLinked: number
    firstView: number
    lastView: number
    _all: number
  }


  export type UserInvoiceAvgAggregateInputType = {
    id?: true
    userId?: true
    invoiceId?: true
  }

  export type UserInvoiceSumAggregateInputType = {
    id?: true
    userId?: true
    invoiceId?: true
  }

  export type UserInvoiceMinAggregateInputType = {
    id?: true
    userId?: true
    invoiceId?: true
    dateLinked?: true
    firstView?: true
    lastView?: true
  }

  export type UserInvoiceMaxAggregateInputType = {
    id?: true
    userId?: true
    invoiceId?: true
    dateLinked?: true
    firstView?: true
    lastView?: true
  }

  export type UserInvoiceCountAggregateInputType = {
    id?: true
    userId?: true
    invoiceId?: true
    dateLinked?: true
    firstView?: true
    lastView?: true
    _all?: true
  }

  export type UserInvoiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserInvoice to aggregate.
     */
    where?: UserInvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInvoices to fetch.
     */
    orderBy?: UserInvoiceOrderByWithRelationInput | UserInvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserInvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInvoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInvoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserInvoices
    **/
    _count?: true | UserInvoiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserInvoiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserInvoiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserInvoiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserInvoiceMaxAggregateInputType
  }

  export type GetUserInvoiceAggregateType<T extends UserInvoiceAggregateArgs> = {
        [P in keyof T & keyof AggregateUserInvoice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserInvoice[P]>
      : GetScalarType<T[P], AggregateUserInvoice[P]>
  }




  export type UserInvoiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserInvoiceWhereInput
    orderBy?: UserInvoiceOrderByWithAggregationInput | UserInvoiceOrderByWithAggregationInput[]
    by: UserInvoiceScalarFieldEnum[] | UserInvoiceScalarFieldEnum
    having?: UserInvoiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserInvoiceCountAggregateInputType | true
    _avg?: UserInvoiceAvgAggregateInputType
    _sum?: UserInvoiceSumAggregateInputType
    _min?: UserInvoiceMinAggregateInputType
    _max?: UserInvoiceMaxAggregateInputType
  }

  export type UserInvoiceGroupByOutputType = {
    id: bigint
    userId: bigint
    invoiceId: bigint
    dateLinked: Date
    firstView: Date | null
    lastView: Date | null
    _count: UserInvoiceCountAggregateOutputType | null
    _avg: UserInvoiceAvgAggregateOutputType | null
    _sum: UserInvoiceSumAggregateOutputType | null
    _min: UserInvoiceMinAggregateOutputType | null
    _max: UserInvoiceMaxAggregateOutputType | null
  }

  type GetUserInvoiceGroupByPayload<T extends UserInvoiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserInvoiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserInvoiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserInvoiceGroupByOutputType[P]>
            : GetScalarType<T[P], UserInvoiceGroupByOutputType[P]>
        }
      >
    >


  export type UserInvoiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    invoiceId?: boolean
    dateLinked?: boolean
    firstView?: boolean
    lastView?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userInvoice"]>

  export type UserInvoiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    invoiceId?: boolean
    dateLinked?: boolean
    firstView?: boolean
    lastView?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userInvoice"]>

  export type UserInvoiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    invoiceId?: boolean
    dateLinked?: boolean
    firstView?: boolean
    lastView?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userInvoice"]>

  export type UserInvoiceSelectScalar = {
    id?: boolean
    userId?: boolean
    invoiceId?: boolean
    dateLinked?: boolean
    firstView?: boolean
    lastView?: boolean
  }

  export type UserInvoiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "invoiceId" | "dateLinked" | "firstView" | "lastView", ExtArgs["result"]["userInvoice"]>
  export type UserInvoiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }
  export type UserInvoiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }
  export type UserInvoiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }

  export type $UserInvoicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserInvoice"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      invoice: Prisma.$InvoicePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      userId: bigint
      invoiceId: bigint
      dateLinked: Date
      firstView: Date | null
      lastView: Date | null
    }, ExtArgs["result"]["userInvoice"]>
    composites: {}
  }

  type UserInvoiceGetPayload<S extends boolean | null | undefined | UserInvoiceDefaultArgs> = $Result.GetResult<Prisma.$UserInvoicePayload, S>

  type UserInvoiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserInvoiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserInvoiceCountAggregateInputType | true
    }

  export interface UserInvoiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserInvoice'], meta: { name: 'UserInvoice' } }
    /**
     * Find zero or one UserInvoice that matches the filter.
     * @param {UserInvoiceFindUniqueArgs} args - Arguments to find a UserInvoice
     * @example
     * // Get one UserInvoice
     * const userInvoice = await prisma.userInvoice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserInvoiceFindUniqueArgs>(args: SelectSubset<T, UserInvoiceFindUniqueArgs<ExtArgs>>): Prisma__UserInvoiceClient<$Result.GetResult<Prisma.$UserInvoicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserInvoice that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserInvoiceFindUniqueOrThrowArgs} args - Arguments to find a UserInvoice
     * @example
     * // Get one UserInvoice
     * const userInvoice = await prisma.userInvoice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserInvoiceFindUniqueOrThrowArgs>(args: SelectSubset<T, UserInvoiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserInvoiceClient<$Result.GetResult<Prisma.$UserInvoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserInvoice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInvoiceFindFirstArgs} args - Arguments to find a UserInvoice
     * @example
     * // Get one UserInvoice
     * const userInvoice = await prisma.userInvoice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserInvoiceFindFirstArgs>(args?: SelectSubset<T, UserInvoiceFindFirstArgs<ExtArgs>>): Prisma__UserInvoiceClient<$Result.GetResult<Prisma.$UserInvoicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserInvoice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInvoiceFindFirstOrThrowArgs} args - Arguments to find a UserInvoice
     * @example
     * // Get one UserInvoice
     * const userInvoice = await prisma.userInvoice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserInvoiceFindFirstOrThrowArgs>(args?: SelectSubset<T, UserInvoiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserInvoiceClient<$Result.GetResult<Prisma.$UserInvoicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserInvoices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInvoiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserInvoices
     * const userInvoices = await prisma.userInvoice.findMany()
     * 
     * // Get first 10 UserInvoices
     * const userInvoices = await prisma.userInvoice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userInvoiceWithIdOnly = await prisma.userInvoice.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserInvoiceFindManyArgs>(args?: SelectSubset<T, UserInvoiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserInvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserInvoice.
     * @param {UserInvoiceCreateArgs} args - Arguments to create a UserInvoice.
     * @example
     * // Create one UserInvoice
     * const UserInvoice = await prisma.userInvoice.create({
     *   data: {
     *     // ... data to create a UserInvoice
     *   }
     * })
     * 
     */
    create<T extends UserInvoiceCreateArgs>(args: SelectSubset<T, UserInvoiceCreateArgs<ExtArgs>>): Prisma__UserInvoiceClient<$Result.GetResult<Prisma.$UserInvoicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserInvoices.
     * @param {UserInvoiceCreateManyArgs} args - Arguments to create many UserInvoices.
     * @example
     * // Create many UserInvoices
     * const userInvoice = await prisma.userInvoice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserInvoiceCreateManyArgs>(args?: SelectSubset<T, UserInvoiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserInvoices and returns the data saved in the database.
     * @param {UserInvoiceCreateManyAndReturnArgs} args - Arguments to create many UserInvoices.
     * @example
     * // Create many UserInvoices
     * const userInvoice = await prisma.userInvoice.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserInvoices and only return the `id`
     * const userInvoiceWithIdOnly = await prisma.userInvoice.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserInvoiceCreateManyAndReturnArgs>(args?: SelectSubset<T, UserInvoiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserInvoicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserInvoice.
     * @param {UserInvoiceDeleteArgs} args - Arguments to delete one UserInvoice.
     * @example
     * // Delete one UserInvoice
     * const UserInvoice = await prisma.userInvoice.delete({
     *   where: {
     *     // ... filter to delete one UserInvoice
     *   }
     * })
     * 
     */
    delete<T extends UserInvoiceDeleteArgs>(args: SelectSubset<T, UserInvoiceDeleteArgs<ExtArgs>>): Prisma__UserInvoiceClient<$Result.GetResult<Prisma.$UserInvoicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserInvoice.
     * @param {UserInvoiceUpdateArgs} args - Arguments to update one UserInvoice.
     * @example
     * // Update one UserInvoice
     * const userInvoice = await prisma.userInvoice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserInvoiceUpdateArgs>(args: SelectSubset<T, UserInvoiceUpdateArgs<ExtArgs>>): Prisma__UserInvoiceClient<$Result.GetResult<Prisma.$UserInvoicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserInvoices.
     * @param {UserInvoiceDeleteManyArgs} args - Arguments to filter UserInvoices to delete.
     * @example
     * // Delete a few UserInvoices
     * const { count } = await prisma.userInvoice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserInvoiceDeleteManyArgs>(args?: SelectSubset<T, UserInvoiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserInvoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInvoiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserInvoices
     * const userInvoice = await prisma.userInvoice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserInvoiceUpdateManyArgs>(args: SelectSubset<T, UserInvoiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserInvoices and returns the data updated in the database.
     * @param {UserInvoiceUpdateManyAndReturnArgs} args - Arguments to update many UserInvoices.
     * @example
     * // Update many UserInvoices
     * const userInvoice = await prisma.userInvoice.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserInvoices and only return the `id`
     * const userInvoiceWithIdOnly = await prisma.userInvoice.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserInvoiceUpdateManyAndReturnArgs>(args: SelectSubset<T, UserInvoiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserInvoicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserInvoice.
     * @param {UserInvoiceUpsertArgs} args - Arguments to update or create a UserInvoice.
     * @example
     * // Update or create a UserInvoice
     * const userInvoice = await prisma.userInvoice.upsert({
     *   create: {
     *     // ... data to create a UserInvoice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserInvoice we want to update
     *   }
     * })
     */
    upsert<T extends UserInvoiceUpsertArgs>(args: SelectSubset<T, UserInvoiceUpsertArgs<ExtArgs>>): Prisma__UserInvoiceClient<$Result.GetResult<Prisma.$UserInvoicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserInvoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInvoiceCountArgs} args - Arguments to filter UserInvoices to count.
     * @example
     * // Count the number of UserInvoices
     * const count = await prisma.userInvoice.count({
     *   where: {
     *     // ... the filter for the UserInvoices we want to count
     *   }
     * })
    **/
    count<T extends UserInvoiceCountArgs>(
      args?: Subset<T, UserInvoiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserInvoiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserInvoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInvoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserInvoiceAggregateArgs>(args: Subset<T, UserInvoiceAggregateArgs>): Prisma.PrismaPromise<GetUserInvoiceAggregateType<T>>

    /**
     * Group by UserInvoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInvoiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserInvoiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserInvoiceGroupByArgs['orderBy'] }
        : { orderBy?: UserInvoiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserInvoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserInvoiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserInvoice model
   */
  readonly fields: UserInvoiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserInvoice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserInvoiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    invoice<T extends InvoiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InvoiceDefaultArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserInvoice model
   */
  interface UserInvoiceFieldRefs {
    readonly id: FieldRef<"UserInvoice", 'BigInt'>
    readonly userId: FieldRef<"UserInvoice", 'BigInt'>
    readonly invoiceId: FieldRef<"UserInvoice", 'BigInt'>
    readonly dateLinked: FieldRef<"UserInvoice", 'DateTime'>
    readonly firstView: FieldRef<"UserInvoice", 'DateTime'>
    readonly lastView: FieldRef<"UserInvoice", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserInvoice findUnique
   */
  export type UserInvoiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvoice
     */
    select?: UserInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserInvoice
     */
    omit?: UserInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvoiceInclude<ExtArgs> | null
    /**
     * Filter, which UserInvoice to fetch.
     */
    where: UserInvoiceWhereUniqueInput
  }

  /**
   * UserInvoice findUniqueOrThrow
   */
  export type UserInvoiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvoice
     */
    select?: UserInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserInvoice
     */
    omit?: UserInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvoiceInclude<ExtArgs> | null
    /**
     * Filter, which UserInvoice to fetch.
     */
    where: UserInvoiceWhereUniqueInput
  }

  /**
   * UserInvoice findFirst
   */
  export type UserInvoiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvoice
     */
    select?: UserInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserInvoice
     */
    omit?: UserInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvoiceInclude<ExtArgs> | null
    /**
     * Filter, which UserInvoice to fetch.
     */
    where?: UserInvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInvoices to fetch.
     */
    orderBy?: UserInvoiceOrderByWithRelationInput | UserInvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserInvoices.
     */
    cursor?: UserInvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInvoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInvoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserInvoices.
     */
    distinct?: UserInvoiceScalarFieldEnum | UserInvoiceScalarFieldEnum[]
  }

  /**
   * UserInvoice findFirstOrThrow
   */
  export type UserInvoiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvoice
     */
    select?: UserInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserInvoice
     */
    omit?: UserInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvoiceInclude<ExtArgs> | null
    /**
     * Filter, which UserInvoice to fetch.
     */
    where?: UserInvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInvoices to fetch.
     */
    orderBy?: UserInvoiceOrderByWithRelationInput | UserInvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserInvoices.
     */
    cursor?: UserInvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInvoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInvoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserInvoices.
     */
    distinct?: UserInvoiceScalarFieldEnum | UserInvoiceScalarFieldEnum[]
  }

  /**
   * UserInvoice findMany
   */
  export type UserInvoiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvoice
     */
    select?: UserInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserInvoice
     */
    omit?: UserInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvoiceInclude<ExtArgs> | null
    /**
     * Filter, which UserInvoices to fetch.
     */
    where?: UserInvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInvoices to fetch.
     */
    orderBy?: UserInvoiceOrderByWithRelationInput | UserInvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserInvoices.
     */
    cursor?: UserInvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInvoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInvoices.
     */
    skip?: number
    distinct?: UserInvoiceScalarFieldEnum | UserInvoiceScalarFieldEnum[]
  }

  /**
   * UserInvoice create
   */
  export type UserInvoiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvoice
     */
    select?: UserInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserInvoice
     */
    omit?: UserInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvoiceInclude<ExtArgs> | null
    /**
     * The data needed to create a UserInvoice.
     */
    data: XOR<UserInvoiceCreateInput, UserInvoiceUncheckedCreateInput>
  }

  /**
   * UserInvoice createMany
   */
  export type UserInvoiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserInvoices.
     */
    data: UserInvoiceCreateManyInput | UserInvoiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserInvoice createManyAndReturn
   */
  export type UserInvoiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvoice
     */
    select?: UserInvoiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserInvoice
     */
    omit?: UserInvoiceOmit<ExtArgs> | null
    /**
     * The data used to create many UserInvoices.
     */
    data: UserInvoiceCreateManyInput | UserInvoiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvoiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserInvoice update
   */
  export type UserInvoiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvoice
     */
    select?: UserInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserInvoice
     */
    omit?: UserInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvoiceInclude<ExtArgs> | null
    /**
     * The data needed to update a UserInvoice.
     */
    data: XOR<UserInvoiceUpdateInput, UserInvoiceUncheckedUpdateInput>
    /**
     * Choose, which UserInvoice to update.
     */
    where: UserInvoiceWhereUniqueInput
  }

  /**
   * UserInvoice updateMany
   */
  export type UserInvoiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserInvoices.
     */
    data: XOR<UserInvoiceUpdateManyMutationInput, UserInvoiceUncheckedUpdateManyInput>
    /**
     * Filter which UserInvoices to update
     */
    where?: UserInvoiceWhereInput
    /**
     * Limit how many UserInvoices to update.
     */
    limit?: number
  }

  /**
   * UserInvoice updateManyAndReturn
   */
  export type UserInvoiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvoice
     */
    select?: UserInvoiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserInvoice
     */
    omit?: UserInvoiceOmit<ExtArgs> | null
    /**
     * The data used to update UserInvoices.
     */
    data: XOR<UserInvoiceUpdateManyMutationInput, UserInvoiceUncheckedUpdateManyInput>
    /**
     * Filter which UserInvoices to update
     */
    where?: UserInvoiceWhereInput
    /**
     * Limit how many UserInvoices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvoiceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserInvoice upsert
   */
  export type UserInvoiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvoice
     */
    select?: UserInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserInvoice
     */
    omit?: UserInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvoiceInclude<ExtArgs> | null
    /**
     * The filter to search for the UserInvoice to update in case it exists.
     */
    where: UserInvoiceWhereUniqueInput
    /**
     * In case the UserInvoice found by the `where` argument doesn't exist, create a new UserInvoice with this data.
     */
    create: XOR<UserInvoiceCreateInput, UserInvoiceUncheckedCreateInput>
    /**
     * In case the UserInvoice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserInvoiceUpdateInput, UserInvoiceUncheckedUpdateInput>
  }

  /**
   * UserInvoice delete
   */
  export type UserInvoiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvoice
     */
    select?: UserInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserInvoice
     */
    omit?: UserInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvoiceInclude<ExtArgs> | null
    /**
     * Filter which UserInvoice to delete.
     */
    where: UserInvoiceWhereUniqueInput
  }

  /**
   * UserInvoice deleteMany
   */
  export type UserInvoiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserInvoices to delete
     */
    where?: UserInvoiceWhereInput
    /**
     * Limit how many UserInvoices to delete.
     */
    limit?: number
  }

  /**
   * UserInvoice without action
   */
  export type UserInvoiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvoice
     */
    select?: UserInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserInvoice
     */
    omit?: UserInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvoiceInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    phone: 'phone',
    passwordHash: 'passwordHash',
    firstName: 'firstName',
    lastName: 'lastName',
    role: 'role',
    isEnabled: 'isEnabled',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserTaxProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    legalName: 'legalName',
    fiscalCode: 'fiscalCode',
    vatNumber: 'vatNumber',
    addressLine1: 'addressLine1',
    addressLine2: 'addressLine2',
    city: 'city',
    province: 'province',
    postalCode: 'postalCode',
    countryCode: 'countryCode',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserTaxProfileScalarFieldEnum = (typeof UserTaxProfileScalarFieldEnum)[keyof typeof UserTaxProfileScalarFieldEnum]


  export const CustomerScalarFieldEnum: {
    id: 'id',
    email: 'email',
    phone: 'phone',
    firstName: 'firstName',
    lastName: 'lastName',
    isEnabled: 'isEnabled',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const CustomerTaxProfileScalarFieldEnum: {
    id: 'id',
    customerId: 'customerId',
    type: 'type',
    legalName: 'legalName',
    fiscalCode: 'fiscalCode',
    vatNumber: 'vatNumber',
    addressLine1: 'addressLine1',
    addressLine2: 'addressLine2',
    city: 'city',
    province: 'province',
    postalCode: 'postalCode',
    countryCode: 'countryCode',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CustomerTaxProfileScalarFieldEnum = (typeof CustomerTaxProfileScalarFieldEnum)[keyof typeof CustomerTaxProfileScalarFieldEnum]


  export const InvoiceScalarFieldEnum: {
    id: 'id',
    invoiceNumber: 'invoiceNumber',
    issueDate: 'issueDate',
    dueDate: 'dueDate',
    status: 'status',
    issuerUserId: 'issuerUserId',
    issuerTaxProfileId: 'issuerTaxProfileId',
    billToCustomerId: 'billToCustomerId',
    billToCustomerTaxProfileId: 'billToCustomerTaxProfileId',
    shipToCustomerId: 'shipToCustomerId',
    shipToCustomerTaxProfileId: 'shipToCustomerTaxProfileId',
    currency: 'currency',
    subtotal: 'subtotal',
    taxTotal: 'taxTotal',
    grandTotal: 'grandTotal',
    paymentMethod: 'paymentMethod',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InvoiceScalarFieldEnum = (typeof InvoiceScalarFieldEnum)[keyof typeof InvoiceScalarFieldEnum]


  export const InvoiceItemScalarFieldEnum: {
    id: 'id',
    invoiceId: 'invoiceId',
    codProduct: 'codProduct',
    description: 'description',
    quantity: 'quantity',
    unitPrice: 'unitPrice',
    taxRate: 'taxRate',
    lineTotal: 'lineTotal'
  };

  export type InvoiceItemScalarFieldEnum = (typeof InvoiceItemScalarFieldEnum)[keyof typeof InvoiceItemScalarFieldEnum]


  export const UserInvoiceScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    invoiceId: 'invoiceId',
    dateLinked: 'dateLinked',
    firstView: 'firstView',
    lastView: 'lastView'
  };

  export type UserInvoiceScalarFieldEnum = (typeof UserInvoiceScalarFieldEnum)[keyof typeof UserInvoiceScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'TaxType'
   */
  export type EnumTaxTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaxType'>
    


  /**
   * Reference to a field of type 'TaxType[]'
   */
  export type ListEnumTaxTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaxType[]'>
    


  /**
   * Reference to a field of type 'InvoiceStatus'
   */
  export type EnumInvoiceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InvoiceStatus'>
    


  /**
   * Reference to a field of type 'InvoiceStatus[]'
   */
  export type ListEnumInvoiceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InvoiceStatus[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'PaymentMethod'
   */
  export type EnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod'>
    


  /**
   * Reference to a field of type 'PaymentMethod[]'
   */
  export type ListEnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: BigIntFilter<"User"> | bigint | number
    email?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    passwordHash?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isEnabled?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    taxProfile?: XOR<UserTaxProfileNullableScalarRelationFilter, UserTaxProfileWhereInput> | null
    invoices?: InvoiceListRelationFilter
    shares?: UserInvoiceListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    passwordHash?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    taxProfile?: UserTaxProfileOrderByWithRelationInput
    invoices?: InvoiceOrderByRelationAggregateInput
    shares?: UserInvoiceOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    email?: string
    phone?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isEnabled?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    taxProfile?: XOR<UserTaxProfileNullableScalarRelationFilter, UserTaxProfileWhereInput> | null
    invoices?: InvoiceListRelationFilter
    shares?: UserInvoiceListRelationFilter
  }, "id" | "email" | "phone">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    passwordHash?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"User"> | bigint | number
    email?: StringWithAggregatesFilter<"User"> | string
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    isEnabled?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type UserTaxProfileWhereInput = {
    AND?: UserTaxProfileWhereInput | UserTaxProfileWhereInput[]
    OR?: UserTaxProfileWhereInput[]
    NOT?: UserTaxProfileWhereInput | UserTaxProfileWhereInput[]
    id?: BigIntFilter<"UserTaxProfile"> | bigint | number
    userId?: BigIntFilter<"UserTaxProfile"> | bigint | number
    type?: EnumTaxTypeFilter<"UserTaxProfile"> | $Enums.TaxType
    legalName?: StringFilter<"UserTaxProfile"> | string
    fiscalCode?: StringNullableFilter<"UserTaxProfile"> | string | null
    vatNumber?: StringNullableFilter<"UserTaxProfile"> | string | null
    addressLine1?: StringFilter<"UserTaxProfile"> | string
    addressLine2?: StringNullableFilter<"UserTaxProfile"> | string | null
    city?: StringFilter<"UserTaxProfile"> | string
    province?: StringNullableFilter<"UserTaxProfile"> | string | null
    postalCode?: StringFilter<"UserTaxProfile"> | string
    countryCode?: StringFilter<"UserTaxProfile"> | string
    isActive?: BoolFilter<"UserTaxProfile"> | boolean
    createdAt?: DateTimeFilter<"UserTaxProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UserTaxProfile"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    Invoice?: InvoiceListRelationFilter
  }

  export type UserTaxProfileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    legalName?: SortOrder
    fiscalCode?: SortOrderInput | SortOrder
    vatNumber?: SortOrderInput | SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrderInput | SortOrder
    city?: SortOrder
    province?: SortOrderInput | SortOrder
    postalCode?: SortOrder
    countryCode?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    Invoice?: InvoiceOrderByRelationAggregateInput
  }

  export type UserTaxProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    userId?: bigint | number
    AND?: UserTaxProfileWhereInput | UserTaxProfileWhereInput[]
    OR?: UserTaxProfileWhereInput[]
    NOT?: UserTaxProfileWhereInput | UserTaxProfileWhereInput[]
    type?: EnumTaxTypeFilter<"UserTaxProfile"> | $Enums.TaxType
    legalName?: StringFilter<"UserTaxProfile"> | string
    fiscalCode?: StringNullableFilter<"UserTaxProfile"> | string | null
    vatNumber?: StringNullableFilter<"UserTaxProfile"> | string | null
    addressLine1?: StringFilter<"UserTaxProfile"> | string
    addressLine2?: StringNullableFilter<"UserTaxProfile"> | string | null
    city?: StringFilter<"UserTaxProfile"> | string
    province?: StringNullableFilter<"UserTaxProfile"> | string | null
    postalCode?: StringFilter<"UserTaxProfile"> | string
    countryCode?: StringFilter<"UserTaxProfile"> | string
    isActive?: BoolFilter<"UserTaxProfile"> | boolean
    createdAt?: DateTimeFilter<"UserTaxProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UserTaxProfile"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    Invoice?: InvoiceListRelationFilter
  }, "id" | "userId">

  export type UserTaxProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    legalName?: SortOrder
    fiscalCode?: SortOrderInput | SortOrder
    vatNumber?: SortOrderInput | SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrderInput | SortOrder
    city?: SortOrder
    province?: SortOrderInput | SortOrder
    postalCode?: SortOrder
    countryCode?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserTaxProfileCountOrderByAggregateInput
    _avg?: UserTaxProfileAvgOrderByAggregateInput
    _max?: UserTaxProfileMaxOrderByAggregateInput
    _min?: UserTaxProfileMinOrderByAggregateInput
    _sum?: UserTaxProfileSumOrderByAggregateInput
  }

  export type UserTaxProfileScalarWhereWithAggregatesInput = {
    AND?: UserTaxProfileScalarWhereWithAggregatesInput | UserTaxProfileScalarWhereWithAggregatesInput[]
    OR?: UserTaxProfileScalarWhereWithAggregatesInput[]
    NOT?: UserTaxProfileScalarWhereWithAggregatesInput | UserTaxProfileScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"UserTaxProfile"> | bigint | number
    userId?: BigIntWithAggregatesFilter<"UserTaxProfile"> | bigint | number
    type?: EnumTaxTypeWithAggregatesFilter<"UserTaxProfile"> | $Enums.TaxType
    legalName?: StringWithAggregatesFilter<"UserTaxProfile"> | string
    fiscalCode?: StringNullableWithAggregatesFilter<"UserTaxProfile"> | string | null
    vatNumber?: StringNullableWithAggregatesFilter<"UserTaxProfile"> | string | null
    addressLine1?: StringWithAggregatesFilter<"UserTaxProfile"> | string
    addressLine2?: StringNullableWithAggregatesFilter<"UserTaxProfile"> | string | null
    city?: StringWithAggregatesFilter<"UserTaxProfile"> | string
    province?: StringNullableWithAggregatesFilter<"UserTaxProfile"> | string | null
    postalCode?: StringWithAggregatesFilter<"UserTaxProfile"> | string
    countryCode?: StringWithAggregatesFilter<"UserTaxProfile"> | string
    isActive?: BoolWithAggregatesFilter<"UserTaxProfile"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"UserTaxProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserTaxProfile"> | Date | string
  }

  export type CustomerWhereInput = {
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    id?: BigIntFilter<"Customer"> | bigint | number
    email?: StringFilter<"Customer"> | string
    phone?: StringNullableFilter<"Customer"> | string | null
    firstName?: StringFilter<"Customer"> | string
    lastName?: StringFilter<"Customer"> | string
    isEnabled?: BoolFilter<"Customer"> | boolean
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    taxProfiles?: CustomerTaxProfileListRelationFilter
    billedInvoices?: InvoiceListRelationFilter
    shippedInvoices?: InvoiceListRelationFilter
  }

  export type CustomerOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    isEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    taxProfiles?: CustomerTaxProfileOrderByRelationAggregateInput
    billedInvoices?: InvoiceOrderByRelationAggregateInput
    shippedInvoices?: InvoiceOrderByRelationAggregateInput
  }

  export type CustomerWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    email?: string
    phone?: string
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    firstName?: StringFilter<"Customer"> | string
    lastName?: StringFilter<"Customer"> | string
    isEnabled?: BoolFilter<"Customer"> | boolean
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    taxProfiles?: CustomerTaxProfileListRelationFilter
    billedInvoices?: InvoiceListRelationFilter
    shippedInvoices?: InvoiceListRelationFilter
  }, "id" | "email" | "phone">

  export type CustomerOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    isEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CustomerCountOrderByAggregateInput
    _avg?: CustomerAvgOrderByAggregateInput
    _max?: CustomerMaxOrderByAggregateInput
    _min?: CustomerMinOrderByAggregateInput
    _sum?: CustomerSumOrderByAggregateInput
  }

  export type CustomerScalarWhereWithAggregatesInput = {
    AND?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    OR?: CustomerScalarWhereWithAggregatesInput[]
    NOT?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"Customer"> | bigint | number
    email?: StringWithAggregatesFilter<"Customer"> | string
    phone?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    firstName?: StringWithAggregatesFilter<"Customer"> | string
    lastName?: StringWithAggregatesFilter<"Customer"> | string
    isEnabled?: BoolWithAggregatesFilter<"Customer"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
  }

  export type CustomerTaxProfileWhereInput = {
    AND?: CustomerTaxProfileWhereInput | CustomerTaxProfileWhereInput[]
    OR?: CustomerTaxProfileWhereInput[]
    NOT?: CustomerTaxProfileWhereInput | CustomerTaxProfileWhereInput[]
    id?: BigIntFilter<"CustomerTaxProfile"> | bigint | number
    customerId?: BigIntFilter<"CustomerTaxProfile"> | bigint | number
    type?: EnumTaxTypeFilter<"CustomerTaxProfile"> | $Enums.TaxType
    legalName?: StringFilter<"CustomerTaxProfile"> | string
    fiscalCode?: StringNullableFilter<"CustomerTaxProfile"> | string | null
    vatNumber?: StringNullableFilter<"CustomerTaxProfile"> | string | null
    addressLine1?: StringFilter<"CustomerTaxProfile"> | string
    addressLine2?: StringNullableFilter<"CustomerTaxProfile"> | string | null
    city?: StringFilter<"CustomerTaxProfile"> | string
    province?: StringNullableFilter<"CustomerTaxProfile"> | string | null
    postalCode?: StringFilter<"CustomerTaxProfile"> | string
    countryCode?: StringFilter<"CustomerTaxProfile"> | string
    isActive?: BoolFilter<"CustomerTaxProfile"> | boolean
    createdAt?: DateTimeFilter<"CustomerTaxProfile"> | Date | string
    updatedAt?: DateTimeFilter<"CustomerTaxProfile"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    BillInvoice?: InvoiceListRelationFilter
    ShipInvoice?: InvoiceListRelationFilter
  }

  export type CustomerTaxProfileOrderByWithRelationInput = {
    id?: SortOrder
    customerId?: SortOrder
    type?: SortOrder
    legalName?: SortOrder
    fiscalCode?: SortOrderInput | SortOrder
    vatNumber?: SortOrderInput | SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrderInput | SortOrder
    city?: SortOrder
    province?: SortOrderInput | SortOrder
    postalCode?: SortOrder
    countryCode?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customer?: CustomerOrderByWithRelationInput
    BillInvoice?: InvoiceOrderByRelationAggregateInput
    ShipInvoice?: InvoiceOrderByRelationAggregateInput
  }

  export type CustomerTaxProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: CustomerTaxProfileWhereInput | CustomerTaxProfileWhereInput[]
    OR?: CustomerTaxProfileWhereInput[]
    NOT?: CustomerTaxProfileWhereInput | CustomerTaxProfileWhereInput[]
    customerId?: BigIntFilter<"CustomerTaxProfile"> | bigint | number
    type?: EnumTaxTypeFilter<"CustomerTaxProfile"> | $Enums.TaxType
    legalName?: StringFilter<"CustomerTaxProfile"> | string
    fiscalCode?: StringNullableFilter<"CustomerTaxProfile"> | string | null
    vatNumber?: StringNullableFilter<"CustomerTaxProfile"> | string | null
    addressLine1?: StringFilter<"CustomerTaxProfile"> | string
    addressLine2?: StringNullableFilter<"CustomerTaxProfile"> | string | null
    city?: StringFilter<"CustomerTaxProfile"> | string
    province?: StringNullableFilter<"CustomerTaxProfile"> | string | null
    postalCode?: StringFilter<"CustomerTaxProfile"> | string
    countryCode?: StringFilter<"CustomerTaxProfile"> | string
    isActive?: BoolFilter<"CustomerTaxProfile"> | boolean
    createdAt?: DateTimeFilter<"CustomerTaxProfile"> | Date | string
    updatedAt?: DateTimeFilter<"CustomerTaxProfile"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    BillInvoice?: InvoiceListRelationFilter
    ShipInvoice?: InvoiceListRelationFilter
  }, "id">

  export type CustomerTaxProfileOrderByWithAggregationInput = {
    id?: SortOrder
    customerId?: SortOrder
    type?: SortOrder
    legalName?: SortOrder
    fiscalCode?: SortOrderInput | SortOrder
    vatNumber?: SortOrderInput | SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrderInput | SortOrder
    city?: SortOrder
    province?: SortOrderInput | SortOrder
    postalCode?: SortOrder
    countryCode?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CustomerTaxProfileCountOrderByAggregateInput
    _avg?: CustomerTaxProfileAvgOrderByAggregateInput
    _max?: CustomerTaxProfileMaxOrderByAggregateInput
    _min?: CustomerTaxProfileMinOrderByAggregateInput
    _sum?: CustomerTaxProfileSumOrderByAggregateInput
  }

  export type CustomerTaxProfileScalarWhereWithAggregatesInput = {
    AND?: CustomerTaxProfileScalarWhereWithAggregatesInput | CustomerTaxProfileScalarWhereWithAggregatesInput[]
    OR?: CustomerTaxProfileScalarWhereWithAggregatesInput[]
    NOT?: CustomerTaxProfileScalarWhereWithAggregatesInput | CustomerTaxProfileScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"CustomerTaxProfile"> | bigint | number
    customerId?: BigIntWithAggregatesFilter<"CustomerTaxProfile"> | bigint | number
    type?: EnumTaxTypeWithAggregatesFilter<"CustomerTaxProfile"> | $Enums.TaxType
    legalName?: StringWithAggregatesFilter<"CustomerTaxProfile"> | string
    fiscalCode?: StringNullableWithAggregatesFilter<"CustomerTaxProfile"> | string | null
    vatNumber?: StringNullableWithAggregatesFilter<"CustomerTaxProfile"> | string | null
    addressLine1?: StringWithAggregatesFilter<"CustomerTaxProfile"> | string
    addressLine2?: StringNullableWithAggregatesFilter<"CustomerTaxProfile"> | string | null
    city?: StringWithAggregatesFilter<"CustomerTaxProfile"> | string
    province?: StringNullableWithAggregatesFilter<"CustomerTaxProfile"> | string | null
    postalCode?: StringWithAggregatesFilter<"CustomerTaxProfile"> | string
    countryCode?: StringWithAggregatesFilter<"CustomerTaxProfile"> | string
    isActive?: BoolWithAggregatesFilter<"CustomerTaxProfile"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"CustomerTaxProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CustomerTaxProfile"> | Date | string
  }

  export type InvoiceWhereInput = {
    AND?: InvoiceWhereInput | InvoiceWhereInput[]
    OR?: InvoiceWhereInput[]
    NOT?: InvoiceWhereInput | InvoiceWhereInput[]
    id?: BigIntFilter<"Invoice"> | bigint | number
    invoiceNumber?: BigIntFilter<"Invoice"> | bigint | number
    issueDate?: DateTimeFilter<"Invoice"> | Date | string
    dueDate?: DateTimeFilter<"Invoice"> | Date | string
    status?: EnumInvoiceStatusFilter<"Invoice"> | $Enums.InvoiceStatus
    issuerUserId?: BigIntFilter<"Invoice"> | bigint | number
    issuerTaxProfileId?: BigIntFilter<"Invoice"> | bigint | number
    billToCustomerId?: BigIntFilter<"Invoice"> | bigint | number
    billToCustomerTaxProfileId?: BigIntFilter<"Invoice"> | bigint | number
    shipToCustomerId?: BigIntNullableFilter<"Invoice"> | bigint | number | null
    shipToCustomerTaxProfileId?: BigIntNullableFilter<"Invoice"> | bigint | number | null
    currency?: StringFilter<"Invoice"> | string
    subtotal?: DecimalFilter<"Invoice"> | Decimal | DecimalJsLike | number | string
    taxTotal?: DecimalFilter<"Invoice"> | Decimal | DecimalJsLike | number | string
    grandTotal?: DecimalFilter<"Invoice"> | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFilter<"Invoice"> | $Enums.PaymentMethod
    createdAt?: DateTimeFilter<"Invoice"> | Date | string
    updatedAt?: DateTimeFilter<"Invoice"> | Date | string
    issuerUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    issuerTaxProfile?: XOR<UserTaxProfileScalarRelationFilter, UserTaxProfileWhereInput>
    billToCustomer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    billToCustomerTaxProfile?: XOR<CustomerTaxProfileScalarRelationFilter, CustomerTaxProfileWhereInput>
    shipToCustomer?: XOR<CustomerNullableScalarRelationFilter, CustomerWhereInput> | null
    shipToCustomerTaxProfile?: XOR<CustomerTaxProfileNullableScalarRelationFilter, CustomerTaxProfileWhereInput> | null
    InvoiceItem?: InvoiceItemListRelationFilter
    UserInvoice?: UserInvoiceListRelationFilter
  }

  export type InvoiceOrderByWithRelationInput = {
    id?: SortOrder
    invoiceNumber?: SortOrder
    issueDate?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    issuerUserId?: SortOrder
    issuerTaxProfileId?: SortOrder
    billToCustomerId?: SortOrder
    billToCustomerTaxProfileId?: SortOrder
    shipToCustomerId?: SortOrderInput | SortOrder
    shipToCustomerTaxProfileId?: SortOrderInput | SortOrder
    currency?: SortOrder
    subtotal?: SortOrder
    taxTotal?: SortOrder
    grandTotal?: SortOrder
    paymentMethod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    issuerUser?: UserOrderByWithRelationInput
    issuerTaxProfile?: UserTaxProfileOrderByWithRelationInput
    billToCustomer?: CustomerOrderByWithRelationInput
    billToCustomerTaxProfile?: CustomerTaxProfileOrderByWithRelationInput
    shipToCustomer?: CustomerOrderByWithRelationInput
    shipToCustomerTaxProfile?: CustomerTaxProfileOrderByWithRelationInput
    InvoiceItem?: InvoiceItemOrderByRelationAggregateInput
    UserInvoice?: UserInvoiceOrderByRelationAggregateInput
  }

  export type InvoiceWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    invoiceNumber?: bigint | number
    AND?: InvoiceWhereInput | InvoiceWhereInput[]
    OR?: InvoiceWhereInput[]
    NOT?: InvoiceWhereInput | InvoiceWhereInput[]
    issueDate?: DateTimeFilter<"Invoice"> | Date | string
    dueDate?: DateTimeFilter<"Invoice"> | Date | string
    status?: EnumInvoiceStatusFilter<"Invoice"> | $Enums.InvoiceStatus
    issuerUserId?: BigIntFilter<"Invoice"> | bigint | number
    issuerTaxProfileId?: BigIntFilter<"Invoice"> | bigint | number
    billToCustomerId?: BigIntFilter<"Invoice"> | bigint | number
    billToCustomerTaxProfileId?: BigIntFilter<"Invoice"> | bigint | number
    shipToCustomerId?: BigIntNullableFilter<"Invoice"> | bigint | number | null
    shipToCustomerTaxProfileId?: BigIntNullableFilter<"Invoice"> | bigint | number | null
    currency?: StringFilter<"Invoice"> | string
    subtotal?: DecimalFilter<"Invoice"> | Decimal | DecimalJsLike | number | string
    taxTotal?: DecimalFilter<"Invoice"> | Decimal | DecimalJsLike | number | string
    grandTotal?: DecimalFilter<"Invoice"> | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFilter<"Invoice"> | $Enums.PaymentMethod
    createdAt?: DateTimeFilter<"Invoice"> | Date | string
    updatedAt?: DateTimeFilter<"Invoice"> | Date | string
    issuerUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    issuerTaxProfile?: XOR<UserTaxProfileScalarRelationFilter, UserTaxProfileWhereInput>
    billToCustomer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    billToCustomerTaxProfile?: XOR<CustomerTaxProfileScalarRelationFilter, CustomerTaxProfileWhereInput>
    shipToCustomer?: XOR<CustomerNullableScalarRelationFilter, CustomerWhereInput> | null
    shipToCustomerTaxProfile?: XOR<CustomerTaxProfileNullableScalarRelationFilter, CustomerTaxProfileWhereInput> | null
    InvoiceItem?: InvoiceItemListRelationFilter
    UserInvoice?: UserInvoiceListRelationFilter
  }, "id" | "invoiceNumber">

  export type InvoiceOrderByWithAggregationInput = {
    id?: SortOrder
    invoiceNumber?: SortOrder
    issueDate?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    issuerUserId?: SortOrder
    issuerTaxProfileId?: SortOrder
    billToCustomerId?: SortOrder
    billToCustomerTaxProfileId?: SortOrder
    shipToCustomerId?: SortOrderInput | SortOrder
    shipToCustomerTaxProfileId?: SortOrderInput | SortOrder
    currency?: SortOrder
    subtotal?: SortOrder
    taxTotal?: SortOrder
    grandTotal?: SortOrder
    paymentMethod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InvoiceCountOrderByAggregateInput
    _avg?: InvoiceAvgOrderByAggregateInput
    _max?: InvoiceMaxOrderByAggregateInput
    _min?: InvoiceMinOrderByAggregateInput
    _sum?: InvoiceSumOrderByAggregateInput
  }

  export type InvoiceScalarWhereWithAggregatesInput = {
    AND?: InvoiceScalarWhereWithAggregatesInput | InvoiceScalarWhereWithAggregatesInput[]
    OR?: InvoiceScalarWhereWithAggregatesInput[]
    NOT?: InvoiceScalarWhereWithAggregatesInput | InvoiceScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"Invoice"> | bigint | number
    invoiceNumber?: BigIntWithAggregatesFilter<"Invoice"> | bigint | number
    issueDate?: DateTimeWithAggregatesFilter<"Invoice"> | Date | string
    dueDate?: DateTimeWithAggregatesFilter<"Invoice"> | Date | string
    status?: EnumInvoiceStatusWithAggregatesFilter<"Invoice"> | $Enums.InvoiceStatus
    issuerUserId?: BigIntWithAggregatesFilter<"Invoice"> | bigint | number
    issuerTaxProfileId?: BigIntWithAggregatesFilter<"Invoice"> | bigint | number
    billToCustomerId?: BigIntWithAggregatesFilter<"Invoice"> | bigint | number
    billToCustomerTaxProfileId?: BigIntWithAggregatesFilter<"Invoice"> | bigint | number
    shipToCustomerId?: BigIntNullableWithAggregatesFilter<"Invoice"> | bigint | number | null
    shipToCustomerTaxProfileId?: BigIntNullableWithAggregatesFilter<"Invoice"> | bigint | number | null
    currency?: StringWithAggregatesFilter<"Invoice"> | string
    subtotal?: DecimalWithAggregatesFilter<"Invoice"> | Decimal | DecimalJsLike | number | string
    taxTotal?: DecimalWithAggregatesFilter<"Invoice"> | Decimal | DecimalJsLike | number | string
    grandTotal?: DecimalWithAggregatesFilter<"Invoice"> | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodWithAggregatesFilter<"Invoice"> | $Enums.PaymentMethod
    createdAt?: DateTimeWithAggregatesFilter<"Invoice"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Invoice"> | Date | string
  }

  export type InvoiceItemWhereInput = {
    AND?: InvoiceItemWhereInput | InvoiceItemWhereInput[]
    OR?: InvoiceItemWhereInput[]
    NOT?: InvoiceItemWhereInput | InvoiceItemWhereInput[]
    id?: BigIntFilter<"InvoiceItem"> | bigint | number
    invoiceId?: BigIntFilter<"InvoiceItem"> | bigint | number
    codProduct?: StringNullableFilter<"InvoiceItem"> | string | null
    description?: StringFilter<"InvoiceItem"> | string
    quantity?: DecimalFilter<"InvoiceItem"> | Decimal | DecimalJsLike | number | string
    unitPrice?: DecimalFilter<"InvoiceItem"> | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFilter<"InvoiceItem"> | Decimal | DecimalJsLike | number | string
    lineTotal?: DecimalFilter<"InvoiceItem"> | Decimal | DecimalJsLike | number | string
    invoice?: XOR<InvoiceScalarRelationFilter, InvoiceWhereInput>
  }

  export type InvoiceItemOrderByWithRelationInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    codProduct?: SortOrderInput | SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    taxRate?: SortOrder
    lineTotal?: SortOrder
    invoice?: InvoiceOrderByWithRelationInput
  }

  export type InvoiceItemWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    invoiceId?: bigint | number
    AND?: InvoiceItemWhereInput | InvoiceItemWhereInput[]
    OR?: InvoiceItemWhereInput[]
    NOT?: InvoiceItemWhereInput | InvoiceItemWhereInput[]
    codProduct?: StringNullableFilter<"InvoiceItem"> | string | null
    description?: StringFilter<"InvoiceItem"> | string
    quantity?: DecimalFilter<"InvoiceItem"> | Decimal | DecimalJsLike | number | string
    unitPrice?: DecimalFilter<"InvoiceItem"> | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFilter<"InvoiceItem"> | Decimal | DecimalJsLike | number | string
    lineTotal?: DecimalFilter<"InvoiceItem"> | Decimal | DecimalJsLike | number | string
    invoice?: XOR<InvoiceScalarRelationFilter, InvoiceWhereInput>
  }, "id" | "invoiceId">

  export type InvoiceItemOrderByWithAggregationInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    codProduct?: SortOrderInput | SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    taxRate?: SortOrder
    lineTotal?: SortOrder
    _count?: InvoiceItemCountOrderByAggregateInput
    _avg?: InvoiceItemAvgOrderByAggregateInput
    _max?: InvoiceItemMaxOrderByAggregateInput
    _min?: InvoiceItemMinOrderByAggregateInput
    _sum?: InvoiceItemSumOrderByAggregateInput
  }

  export type InvoiceItemScalarWhereWithAggregatesInput = {
    AND?: InvoiceItemScalarWhereWithAggregatesInput | InvoiceItemScalarWhereWithAggregatesInput[]
    OR?: InvoiceItemScalarWhereWithAggregatesInput[]
    NOT?: InvoiceItemScalarWhereWithAggregatesInput | InvoiceItemScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"InvoiceItem"> | bigint | number
    invoiceId?: BigIntWithAggregatesFilter<"InvoiceItem"> | bigint | number
    codProduct?: StringNullableWithAggregatesFilter<"InvoiceItem"> | string | null
    description?: StringWithAggregatesFilter<"InvoiceItem"> | string
    quantity?: DecimalWithAggregatesFilter<"InvoiceItem"> | Decimal | DecimalJsLike | number | string
    unitPrice?: DecimalWithAggregatesFilter<"InvoiceItem"> | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalWithAggregatesFilter<"InvoiceItem"> | Decimal | DecimalJsLike | number | string
    lineTotal?: DecimalWithAggregatesFilter<"InvoiceItem"> | Decimal | DecimalJsLike | number | string
  }

  export type UserInvoiceWhereInput = {
    AND?: UserInvoiceWhereInput | UserInvoiceWhereInput[]
    OR?: UserInvoiceWhereInput[]
    NOT?: UserInvoiceWhereInput | UserInvoiceWhereInput[]
    id?: BigIntFilter<"UserInvoice"> | bigint | number
    userId?: BigIntFilter<"UserInvoice"> | bigint | number
    invoiceId?: BigIntFilter<"UserInvoice"> | bigint | number
    dateLinked?: DateTimeFilter<"UserInvoice"> | Date | string
    firstView?: DateTimeNullableFilter<"UserInvoice"> | Date | string | null
    lastView?: DateTimeNullableFilter<"UserInvoice"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    invoice?: XOR<InvoiceScalarRelationFilter, InvoiceWhereInput>
  }

  export type UserInvoiceOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    invoiceId?: SortOrder
    dateLinked?: SortOrder
    firstView?: SortOrderInput | SortOrder
    lastView?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    invoice?: InvoiceOrderByWithRelationInput
  }

  export type UserInvoiceWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    user_invoice_unique_id?: UserInvoiceUser_invoice_unique_idCompoundUniqueInput
    AND?: UserInvoiceWhereInput | UserInvoiceWhereInput[]
    OR?: UserInvoiceWhereInput[]
    NOT?: UserInvoiceWhereInput | UserInvoiceWhereInput[]
    userId?: BigIntFilter<"UserInvoice"> | bigint | number
    invoiceId?: BigIntFilter<"UserInvoice"> | bigint | number
    dateLinked?: DateTimeFilter<"UserInvoice"> | Date | string
    firstView?: DateTimeNullableFilter<"UserInvoice"> | Date | string | null
    lastView?: DateTimeNullableFilter<"UserInvoice"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    invoice?: XOR<InvoiceScalarRelationFilter, InvoiceWhereInput>
  }, "id" | "user_invoice_unique_id">

  export type UserInvoiceOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    invoiceId?: SortOrder
    dateLinked?: SortOrder
    firstView?: SortOrderInput | SortOrder
    lastView?: SortOrderInput | SortOrder
    _count?: UserInvoiceCountOrderByAggregateInput
    _avg?: UserInvoiceAvgOrderByAggregateInput
    _max?: UserInvoiceMaxOrderByAggregateInput
    _min?: UserInvoiceMinOrderByAggregateInput
    _sum?: UserInvoiceSumOrderByAggregateInput
  }

  export type UserInvoiceScalarWhereWithAggregatesInput = {
    AND?: UserInvoiceScalarWhereWithAggregatesInput | UserInvoiceScalarWhereWithAggregatesInput[]
    OR?: UserInvoiceScalarWhereWithAggregatesInput[]
    NOT?: UserInvoiceScalarWhereWithAggregatesInput | UserInvoiceScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"UserInvoice"> | bigint | number
    userId?: BigIntWithAggregatesFilter<"UserInvoice"> | bigint | number
    invoiceId?: BigIntWithAggregatesFilter<"UserInvoice"> | bigint | number
    dateLinked?: DateTimeWithAggregatesFilter<"UserInvoice"> | Date | string
    firstView?: DateTimeNullableWithAggregatesFilter<"UserInvoice"> | Date | string | null
    lastView?: DateTimeNullableWithAggregatesFilter<"UserInvoice"> | Date | string | null
  }

  export type UserCreateInput = {
    id?: bigint | number
    email: string
    phone?: string | null
    passwordHash: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    taxProfile?: UserTaxProfileCreateNestedOneWithoutUserInput
    invoices?: InvoiceCreateNestedManyWithoutIssuerUserInput
    shares?: UserInvoiceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: bigint | number
    email: string
    phone?: string | null
    passwordHash: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    taxProfile?: UserTaxProfileUncheckedCreateNestedOneWithoutUserInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutIssuerUserInput
    shares?: UserInvoiceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxProfile?: UserTaxProfileUpdateOneWithoutUserNestedInput
    invoices?: InvoiceUpdateManyWithoutIssuerUserNestedInput
    shares?: UserInvoiceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxProfile?: UserTaxProfileUncheckedUpdateOneWithoutUserNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutIssuerUserNestedInput
    shares?: UserInvoiceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: bigint | number
    email: string
    phone?: string | null
    passwordHash: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTaxProfileCreateInput = {
    id?: bigint | number
    type: $Enums.TaxType
    legalName: string
    fiscalCode?: string | null
    vatNumber?: string | null
    addressLine1: string
    addressLine2?: string | null
    city: string
    province?: string | null
    postalCode: string
    countryCode: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTaxProfileInput
    Invoice?: InvoiceCreateNestedManyWithoutIssuerTaxProfileInput
  }

  export type UserTaxProfileUncheckedCreateInput = {
    id?: bigint | number
    userId: bigint | number
    type: $Enums.TaxType
    legalName: string
    fiscalCode?: string | null
    vatNumber?: string | null
    addressLine1: string
    addressLine2?: string | null
    city: string
    province?: string | null
    postalCode: string
    countryCode: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutIssuerTaxProfileInput
  }

  export type UserTaxProfileUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTaxTypeFieldUpdateOperationsInput | $Enums.TaxType
    legalName?: StringFieldUpdateOperationsInput | string
    fiscalCode?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTaxProfileNestedInput
    Invoice?: InvoiceUpdateManyWithoutIssuerTaxProfileNestedInput
  }

  export type UserTaxProfileUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTaxTypeFieldUpdateOperationsInput | $Enums.TaxType
    legalName?: StringFieldUpdateOperationsInput | string
    fiscalCode?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUncheckedUpdateManyWithoutIssuerTaxProfileNestedInput
  }

  export type UserTaxProfileCreateManyInput = {
    id?: bigint | number
    userId: bigint | number
    type: $Enums.TaxType
    legalName: string
    fiscalCode?: string | null
    vatNumber?: string | null
    addressLine1: string
    addressLine2?: string | null
    city: string
    province?: string | null
    postalCode: string
    countryCode: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserTaxProfileUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTaxTypeFieldUpdateOperationsInput | $Enums.TaxType
    legalName?: StringFieldUpdateOperationsInput | string
    fiscalCode?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTaxProfileUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTaxTypeFieldUpdateOperationsInput | $Enums.TaxType
    legalName?: StringFieldUpdateOperationsInput | string
    fiscalCode?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerCreateInput = {
    id?: bigint | number
    email: string
    phone?: string | null
    firstName: string
    lastName: string
    isEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    taxProfiles?: CustomerTaxProfileCreateNestedManyWithoutCustomerInput
    billedInvoices?: InvoiceCreateNestedManyWithoutBillToCustomerInput
    shippedInvoices?: InvoiceCreateNestedManyWithoutShipToCustomerInput
  }

  export type CustomerUncheckedCreateInput = {
    id?: bigint | number
    email: string
    phone?: string | null
    firstName: string
    lastName: string
    isEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    taxProfiles?: CustomerTaxProfileUncheckedCreateNestedManyWithoutCustomerInput
    billedInvoices?: InvoiceUncheckedCreateNestedManyWithoutBillToCustomerInput
    shippedInvoices?: InvoiceUncheckedCreateNestedManyWithoutShipToCustomerInput
  }

  export type CustomerUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxProfiles?: CustomerTaxProfileUpdateManyWithoutCustomerNestedInput
    billedInvoices?: InvoiceUpdateManyWithoutBillToCustomerNestedInput
    shippedInvoices?: InvoiceUpdateManyWithoutShipToCustomerNestedInput
  }

  export type CustomerUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxProfiles?: CustomerTaxProfileUncheckedUpdateManyWithoutCustomerNestedInput
    billedInvoices?: InvoiceUncheckedUpdateManyWithoutBillToCustomerNestedInput
    shippedInvoices?: InvoiceUncheckedUpdateManyWithoutShipToCustomerNestedInput
  }

  export type CustomerCreateManyInput = {
    id?: bigint | number
    email: string
    phone?: string | null
    firstName: string
    lastName: string
    isEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerTaxProfileCreateInput = {
    id?: bigint | number
    type: $Enums.TaxType
    legalName: string
    fiscalCode?: string | null
    vatNumber?: string | null
    addressLine1: string
    addressLine2?: string | null
    city: string
    province?: string | null
    postalCode: string
    countryCode: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutTaxProfilesInput
    BillInvoice?: InvoiceCreateNestedManyWithoutBillToCustomerTaxProfileInput
    ShipInvoice?: InvoiceCreateNestedManyWithoutShipToCustomerTaxProfileInput
  }

  export type CustomerTaxProfileUncheckedCreateInput = {
    id?: bigint | number
    customerId: bigint | number
    type: $Enums.TaxType
    legalName: string
    fiscalCode?: string | null
    vatNumber?: string | null
    addressLine1: string
    addressLine2?: string | null
    city: string
    province?: string | null
    postalCode: string
    countryCode: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    BillInvoice?: InvoiceUncheckedCreateNestedManyWithoutBillToCustomerTaxProfileInput
    ShipInvoice?: InvoiceUncheckedCreateNestedManyWithoutShipToCustomerTaxProfileInput
  }

  export type CustomerTaxProfileUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTaxTypeFieldUpdateOperationsInput | $Enums.TaxType
    legalName?: StringFieldUpdateOperationsInput | string
    fiscalCode?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutTaxProfilesNestedInput
    BillInvoice?: InvoiceUpdateManyWithoutBillToCustomerTaxProfileNestedInput
    ShipInvoice?: InvoiceUpdateManyWithoutShipToCustomerTaxProfileNestedInput
  }

  export type CustomerTaxProfileUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    customerId?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTaxTypeFieldUpdateOperationsInput | $Enums.TaxType
    legalName?: StringFieldUpdateOperationsInput | string
    fiscalCode?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    BillInvoice?: InvoiceUncheckedUpdateManyWithoutBillToCustomerTaxProfileNestedInput
    ShipInvoice?: InvoiceUncheckedUpdateManyWithoutShipToCustomerTaxProfileNestedInput
  }

  export type CustomerTaxProfileCreateManyInput = {
    id?: bigint | number
    customerId: bigint | number
    type: $Enums.TaxType
    legalName: string
    fiscalCode?: string | null
    vatNumber?: string | null
    addressLine1: string
    addressLine2?: string | null
    city: string
    province?: string | null
    postalCode: string
    countryCode: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerTaxProfileUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTaxTypeFieldUpdateOperationsInput | $Enums.TaxType
    legalName?: StringFieldUpdateOperationsInput | string
    fiscalCode?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerTaxProfileUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    customerId?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTaxTypeFieldUpdateOperationsInput | $Enums.TaxType
    legalName?: StringFieldUpdateOperationsInput | string
    fiscalCode?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceCreateInput = {
    id?: bigint | number
    invoiceNumber: bigint | number
    issueDate: Date | string
    dueDate: Date | string
    status?: $Enums.InvoiceStatus
    currency?: string
    subtotal: Decimal | DecimalJsLike | number | string
    taxTotal: Decimal | DecimalJsLike | number | string
    grandTotal: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    issuerUser: UserCreateNestedOneWithoutInvoicesInput
    issuerTaxProfile: UserTaxProfileCreateNestedOneWithoutInvoiceInput
    billToCustomer: CustomerCreateNestedOneWithoutBilledInvoicesInput
    billToCustomerTaxProfile: CustomerTaxProfileCreateNestedOneWithoutBillInvoiceInput
    shipToCustomer?: CustomerCreateNestedOneWithoutShippedInvoicesInput
    shipToCustomerTaxProfile?: CustomerTaxProfileCreateNestedOneWithoutShipInvoiceInput
    InvoiceItem?: InvoiceItemCreateNestedManyWithoutInvoiceInput
    UserInvoice?: UserInvoiceCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateInput = {
    id?: bigint | number
    invoiceNumber: bigint | number
    issueDate: Date | string
    dueDate: Date | string
    status?: $Enums.InvoiceStatus
    issuerUserId: bigint | number
    issuerTaxProfileId: bigint | number
    billToCustomerId: bigint | number
    billToCustomerTaxProfileId: bigint | number
    shipToCustomerId?: bigint | number | null
    shipToCustomerTaxProfileId?: bigint | number | null
    currency?: string
    subtotal: Decimal | DecimalJsLike | number | string
    taxTotal: Decimal | DecimalJsLike | number | string
    grandTotal: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    InvoiceItem?: InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInput
    UserInvoice?: UserInvoiceUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceNumber?: BigIntFieldUpdateOperationsInput | bigint | number
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    currency?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    grandTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    issuerUser?: UserUpdateOneRequiredWithoutInvoicesNestedInput
    issuerTaxProfile?: UserTaxProfileUpdateOneRequiredWithoutInvoiceNestedInput
    billToCustomer?: CustomerUpdateOneRequiredWithoutBilledInvoicesNestedInput
    billToCustomerTaxProfile?: CustomerTaxProfileUpdateOneRequiredWithoutBillInvoiceNestedInput
    shipToCustomer?: CustomerUpdateOneWithoutShippedInvoicesNestedInput
    shipToCustomerTaxProfile?: CustomerTaxProfileUpdateOneWithoutShipInvoiceNestedInput
    InvoiceItem?: InvoiceItemUpdateManyWithoutInvoiceNestedInput
    UserInvoice?: UserInvoiceUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceNumber?: BigIntFieldUpdateOperationsInput | bigint | number
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    issuerUserId?: BigIntFieldUpdateOperationsInput | bigint | number
    issuerTaxProfileId?: BigIntFieldUpdateOperationsInput | bigint | number
    billToCustomerId?: BigIntFieldUpdateOperationsInput | bigint | number
    billToCustomerTaxProfileId?: BigIntFieldUpdateOperationsInput | bigint | number
    shipToCustomerId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    shipToCustomerTaxProfileId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    currency?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    grandTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InvoiceItem?: InvoiceItemUncheckedUpdateManyWithoutInvoiceNestedInput
    UserInvoice?: UserInvoiceUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceCreateManyInput = {
    id?: bigint | number
    invoiceNumber: bigint | number
    issueDate: Date | string
    dueDate: Date | string
    status?: $Enums.InvoiceStatus
    issuerUserId: bigint | number
    issuerTaxProfileId: bigint | number
    billToCustomerId: bigint | number
    billToCustomerTaxProfileId: bigint | number
    shipToCustomerId?: bigint | number | null
    shipToCustomerTaxProfileId?: bigint | number | null
    currency?: string
    subtotal: Decimal | DecimalJsLike | number | string
    taxTotal: Decimal | DecimalJsLike | number | string
    grandTotal: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InvoiceUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceNumber?: BigIntFieldUpdateOperationsInput | bigint | number
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    currency?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    grandTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceNumber?: BigIntFieldUpdateOperationsInput | bigint | number
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    issuerUserId?: BigIntFieldUpdateOperationsInput | bigint | number
    issuerTaxProfileId?: BigIntFieldUpdateOperationsInput | bigint | number
    billToCustomerId?: BigIntFieldUpdateOperationsInput | bigint | number
    billToCustomerTaxProfileId?: BigIntFieldUpdateOperationsInput | bigint | number
    shipToCustomerId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    shipToCustomerTaxProfileId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    currency?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    grandTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceItemCreateInput = {
    id?: bigint | number
    codProduct?: string | null
    description: string
    quantity: Decimal | DecimalJsLike | number | string
    unitPrice: Decimal | DecimalJsLike | number | string
    taxRate: Decimal | DecimalJsLike | number | string
    lineTotal: Decimal | DecimalJsLike | number | string
    invoice: InvoiceCreateNestedOneWithoutInvoiceItemInput
  }

  export type InvoiceItemUncheckedCreateInput = {
    id?: bigint | number
    invoiceId: bigint | number
    codProduct?: string | null
    description: string
    quantity: Decimal | DecimalJsLike | number | string
    unitPrice: Decimal | DecimalJsLike | number | string
    taxRate: Decimal | DecimalJsLike | number | string
    lineTotal: Decimal | DecimalJsLike | number | string
  }

  export type InvoiceItemUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    codProduct?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    lineTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    invoice?: InvoiceUpdateOneRequiredWithoutInvoiceItemNestedInput
  }

  export type InvoiceItemUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceId?: BigIntFieldUpdateOperationsInput | bigint | number
    codProduct?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    lineTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type InvoiceItemCreateManyInput = {
    id?: bigint | number
    invoiceId: bigint | number
    codProduct?: string | null
    description: string
    quantity: Decimal | DecimalJsLike | number | string
    unitPrice: Decimal | DecimalJsLike | number | string
    taxRate: Decimal | DecimalJsLike | number | string
    lineTotal: Decimal | DecimalJsLike | number | string
  }

  export type InvoiceItemUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    codProduct?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    lineTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type InvoiceItemUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceId?: BigIntFieldUpdateOperationsInput | bigint | number
    codProduct?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    lineTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type UserInvoiceCreateInput = {
    id?: bigint | number
    dateLinked?: Date | string
    firstView?: Date | string | null
    lastView?: Date | string | null
    user: UserCreateNestedOneWithoutSharesInput
    invoice: InvoiceCreateNestedOneWithoutUserInvoiceInput
  }

  export type UserInvoiceUncheckedCreateInput = {
    id?: bigint | number
    userId: bigint | number
    invoiceId: bigint | number
    dateLinked?: Date | string
    firstView?: Date | string | null
    lastView?: Date | string | null
  }

  export type UserInvoiceUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    dateLinked?: DateTimeFieldUpdateOperationsInput | Date | string
    firstView?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastView?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutSharesNestedInput
    invoice?: InvoiceUpdateOneRequiredWithoutUserInvoiceNestedInput
  }

  export type UserInvoiceUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceId?: BigIntFieldUpdateOperationsInput | bigint | number
    dateLinked?: DateTimeFieldUpdateOperationsInput | Date | string
    firstView?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastView?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserInvoiceCreateManyInput = {
    id?: bigint | number
    userId: bigint | number
    invoiceId: bigint | number
    dateLinked?: Date | string
    firstView?: Date | string | null
    lastView?: Date | string | null
  }

  export type UserInvoiceUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    dateLinked?: DateTimeFieldUpdateOperationsInput | Date | string
    firstView?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastView?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserInvoiceUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceId?: BigIntFieldUpdateOperationsInput | bigint | number
    dateLinked?: DateTimeFieldUpdateOperationsInput | Date | string
    firstView?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastView?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserTaxProfileNullableScalarRelationFilter = {
    is?: UserTaxProfileWhereInput | null
    isNot?: UserTaxProfileWhereInput | null
  }

  export type InvoiceListRelationFilter = {
    every?: InvoiceWhereInput
    some?: InvoiceWhereInput
    none?: InvoiceWhereInput
  }

  export type UserInvoiceListRelationFilter = {
    every?: UserInvoiceWhereInput
    some?: UserInvoiceWhereInput
    none?: UserInvoiceWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type InvoiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserInvoiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    passwordHash?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    passwordHash?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    passwordHash?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumTaxTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TaxType | EnumTaxTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TaxType[] | ListEnumTaxTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaxType[] | ListEnumTaxTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTaxTypeFilter<$PrismaModel> | $Enums.TaxType
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserTaxProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    legalName?: SortOrder
    fiscalCode?: SortOrder
    vatNumber?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    city?: SortOrder
    province?: SortOrder
    postalCode?: SortOrder
    countryCode?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserTaxProfileAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserTaxProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    legalName?: SortOrder
    fiscalCode?: SortOrder
    vatNumber?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    city?: SortOrder
    province?: SortOrder
    postalCode?: SortOrder
    countryCode?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserTaxProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    legalName?: SortOrder
    fiscalCode?: SortOrder
    vatNumber?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    city?: SortOrder
    province?: SortOrder
    postalCode?: SortOrder
    countryCode?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserTaxProfileSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EnumTaxTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaxType | EnumTaxTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TaxType[] | ListEnumTaxTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaxType[] | ListEnumTaxTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTaxTypeWithAggregatesFilter<$PrismaModel> | $Enums.TaxType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaxTypeFilter<$PrismaModel>
    _max?: NestedEnumTaxTypeFilter<$PrismaModel>
  }

  export type CustomerTaxProfileListRelationFilter = {
    every?: CustomerTaxProfileWhereInput
    some?: CustomerTaxProfileWhereInput
    none?: CustomerTaxProfileWhereInput
  }

  export type CustomerTaxProfileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    isEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CustomerMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    isEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    isEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CustomerScalarRelationFilter = {
    is?: CustomerWhereInput
    isNot?: CustomerWhereInput
  }

  export type CustomerTaxProfileCountOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    type?: SortOrder
    legalName?: SortOrder
    fiscalCode?: SortOrder
    vatNumber?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    city?: SortOrder
    province?: SortOrder
    postalCode?: SortOrder
    countryCode?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerTaxProfileAvgOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
  }

  export type CustomerTaxProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    type?: SortOrder
    legalName?: SortOrder
    fiscalCode?: SortOrder
    vatNumber?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    city?: SortOrder
    province?: SortOrder
    postalCode?: SortOrder
    countryCode?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerTaxProfileMinOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    type?: SortOrder
    legalName?: SortOrder
    fiscalCode?: SortOrder
    vatNumber?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    city?: SortOrder
    province?: SortOrder
    postalCode?: SortOrder
    countryCode?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerTaxProfileSumOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
  }

  export type EnumInvoiceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.InvoiceStatus | EnumInvoiceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInvoiceStatusFilter<$PrismaModel> | $Enums.InvoiceStatus
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type EnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type UserTaxProfileScalarRelationFilter = {
    is?: UserTaxProfileWhereInput
    isNot?: UserTaxProfileWhereInput
  }

  export type CustomerTaxProfileScalarRelationFilter = {
    is?: CustomerTaxProfileWhereInput
    isNot?: CustomerTaxProfileWhereInput
  }

  export type CustomerNullableScalarRelationFilter = {
    is?: CustomerWhereInput | null
    isNot?: CustomerWhereInput | null
  }

  export type CustomerTaxProfileNullableScalarRelationFilter = {
    is?: CustomerTaxProfileWhereInput | null
    isNot?: CustomerTaxProfileWhereInput | null
  }

  export type InvoiceItemListRelationFilter = {
    every?: InvoiceItemWhereInput
    some?: InvoiceItemWhereInput
    none?: InvoiceItemWhereInput
  }

  export type InvoiceItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvoiceCountOrderByAggregateInput = {
    id?: SortOrder
    invoiceNumber?: SortOrder
    issueDate?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    issuerUserId?: SortOrder
    issuerTaxProfileId?: SortOrder
    billToCustomerId?: SortOrder
    billToCustomerTaxProfileId?: SortOrder
    shipToCustomerId?: SortOrder
    shipToCustomerTaxProfileId?: SortOrder
    currency?: SortOrder
    subtotal?: SortOrder
    taxTotal?: SortOrder
    grandTotal?: SortOrder
    paymentMethod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InvoiceAvgOrderByAggregateInput = {
    id?: SortOrder
    invoiceNumber?: SortOrder
    issuerUserId?: SortOrder
    issuerTaxProfileId?: SortOrder
    billToCustomerId?: SortOrder
    billToCustomerTaxProfileId?: SortOrder
    shipToCustomerId?: SortOrder
    shipToCustomerTaxProfileId?: SortOrder
    subtotal?: SortOrder
    taxTotal?: SortOrder
    grandTotal?: SortOrder
  }

  export type InvoiceMaxOrderByAggregateInput = {
    id?: SortOrder
    invoiceNumber?: SortOrder
    issueDate?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    issuerUserId?: SortOrder
    issuerTaxProfileId?: SortOrder
    billToCustomerId?: SortOrder
    billToCustomerTaxProfileId?: SortOrder
    shipToCustomerId?: SortOrder
    shipToCustomerTaxProfileId?: SortOrder
    currency?: SortOrder
    subtotal?: SortOrder
    taxTotal?: SortOrder
    grandTotal?: SortOrder
    paymentMethod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InvoiceMinOrderByAggregateInput = {
    id?: SortOrder
    invoiceNumber?: SortOrder
    issueDate?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    issuerUserId?: SortOrder
    issuerTaxProfileId?: SortOrder
    billToCustomerId?: SortOrder
    billToCustomerTaxProfileId?: SortOrder
    shipToCustomerId?: SortOrder
    shipToCustomerTaxProfileId?: SortOrder
    currency?: SortOrder
    subtotal?: SortOrder
    taxTotal?: SortOrder
    grandTotal?: SortOrder
    paymentMethod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InvoiceSumOrderByAggregateInput = {
    id?: SortOrder
    invoiceNumber?: SortOrder
    issuerUserId?: SortOrder
    issuerTaxProfileId?: SortOrder
    billToCustomerId?: SortOrder
    billToCustomerTaxProfileId?: SortOrder
    shipToCustomerId?: SortOrder
    shipToCustomerTaxProfileId?: SortOrder
    subtotal?: SortOrder
    taxTotal?: SortOrder
    grandTotal?: SortOrder
  }

  export type EnumInvoiceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InvoiceStatus | EnumInvoiceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInvoiceStatusWithAggregatesFilter<$PrismaModel> | $Enums.InvoiceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInvoiceStatusFilter<$PrismaModel>
    _max?: NestedEnumInvoiceStatusFilter<$PrismaModel>
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type EnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type InvoiceScalarRelationFilter = {
    is?: InvoiceWhereInput
    isNot?: InvoiceWhereInput
  }

  export type InvoiceItemCountOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    codProduct?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    taxRate?: SortOrder
    lineTotal?: SortOrder
  }

  export type InvoiceItemAvgOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    taxRate?: SortOrder
    lineTotal?: SortOrder
  }

  export type InvoiceItemMaxOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    codProduct?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    taxRate?: SortOrder
    lineTotal?: SortOrder
  }

  export type InvoiceItemMinOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    codProduct?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    taxRate?: SortOrder
    lineTotal?: SortOrder
  }

  export type InvoiceItemSumOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    taxRate?: SortOrder
    lineTotal?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserInvoiceUser_invoice_unique_idCompoundUniqueInput = {
    userId: bigint | number
    invoiceId: bigint | number
  }

  export type UserInvoiceCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    invoiceId?: SortOrder
    dateLinked?: SortOrder
    firstView?: SortOrder
    lastView?: SortOrder
  }

  export type UserInvoiceAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    invoiceId?: SortOrder
  }

  export type UserInvoiceMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    invoiceId?: SortOrder
    dateLinked?: SortOrder
    firstView?: SortOrder
    lastView?: SortOrder
  }

  export type UserInvoiceMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    invoiceId?: SortOrder
    dateLinked?: SortOrder
    firstView?: SortOrder
    lastView?: SortOrder
  }

  export type UserInvoiceSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    invoiceId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UserTaxProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<UserTaxProfileCreateWithoutUserInput, UserTaxProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserTaxProfileCreateOrConnectWithoutUserInput
    connect?: UserTaxProfileWhereUniqueInput
  }

  export type InvoiceCreateNestedManyWithoutIssuerUserInput = {
    create?: XOR<InvoiceCreateWithoutIssuerUserInput, InvoiceUncheckedCreateWithoutIssuerUserInput> | InvoiceCreateWithoutIssuerUserInput[] | InvoiceUncheckedCreateWithoutIssuerUserInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutIssuerUserInput | InvoiceCreateOrConnectWithoutIssuerUserInput[]
    createMany?: InvoiceCreateManyIssuerUserInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type UserInvoiceCreateNestedManyWithoutUserInput = {
    create?: XOR<UserInvoiceCreateWithoutUserInput, UserInvoiceUncheckedCreateWithoutUserInput> | UserInvoiceCreateWithoutUserInput[] | UserInvoiceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserInvoiceCreateOrConnectWithoutUserInput | UserInvoiceCreateOrConnectWithoutUserInput[]
    createMany?: UserInvoiceCreateManyUserInputEnvelope
    connect?: UserInvoiceWhereUniqueInput | UserInvoiceWhereUniqueInput[]
  }

  export type UserTaxProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserTaxProfileCreateWithoutUserInput, UserTaxProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserTaxProfileCreateOrConnectWithoutUserInput
    connect?: UserTaxProfileWhereUniqueInput
  }

  export type InvoiceUncheckedCreateNestedManyWithoutIssuerUserInput = {
    create?: XOR<InvoiceCreateWithoutIssuerUserInput, InvoiceUncheckedCreateWithoutIssuerUserInput> | InvoiceCreateWithoutIssuerUserInput[] | InvoiceUncheckedCreateWithoutIssuerUserInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutIssuerUserInput | InvoiceCreateOrConnectWithoutIssuerUserInput[]
    createMany?: InvoiceCreateManyIssuerUserInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type UserInvoiceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserInvoiceCreateWithoutUserInput, UserInvoiceUncheckedCreateWithoutUserInput> | UserInvoiceCreateWithoutUserInput[] | UserInvoiceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserInvoiceCreateOrConnectWithoutUserInput | UserInvoiceCreateOrConnectWithoutUserInput[]
    createMany?: UserInvoiceCreateManyUserInputEnvelope
    connect?: UserInvoiceWhereUniqueInput | UserInvoiceWhereUniqueInput[]
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserTaxProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserTaxProfileCreateWithoutUserInput, UserTaxProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserTaxProfileCreateOrConnectWithoutUserInput
    upsert?: UserTaxProfileUpsertWithoutUserInput
    disconnect?: UserTaxProfileWhereInput | boolean
    delete?: UserTaxProfileWhereInput | boolean
    connect?: UserTaxProfileWhereUniqueInput
    update?: XOR<XOR<UserTaxProfileUpdateToOneWithWhereWithoutUserInput, UserTaxProfileUpdateWithoutUserInput>, UserTaxProfileUncheckedUpdateWithoutUserInput>
  }

  export type InvoiceUpdateManyWithoutIssuerUserNestedInput = {
    create?: XOR<InvoiceCreateWithoutIssuerUserInput, InvoiceUncheckedCreateWithoutIssuerUserInput> | InvoiceCreateWithoutIssuerUserInput[] | InvoiceUncheckedCreateWithoutIssuerUserInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutIssuerUserInput | InvoiceCreateOrConnectWithoutIssuerUserInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutIssuerUserInput | InvoiceUpsertWithWhereUniqueWithoutIssuerUserInput[]
    createMany?: InvoiceCreateManyIssuerUserInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutIssuerUserInput | InvoiceUpdateWithWhereUniqueWithoutIssuerUserInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutIssuerUserInput | InvoiceUpdateManyWithWhereWithoutIssuerUserInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type UserInvoiceUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserInvoiceCreateWithoutUserInput, UserInvoiceUncheckedCreateWithoutUserInput> | UserInvoiceCreateWithoutUserInput[] | UserInvoiceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserInvoiceCreateOrConnectWithoutUserInput | UserInvoiceCreateOrConnectWithoutUserInput[]
    upsert?: UserInvoiceUpsertWithWhereUniqueWithoutUserInput | UserInvoiceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserInvoiceCreateManyUserInputEnvelope
    set?: UserInvoiceWhereUniqueInput | UserInvoiceWhereUniqueInput[]
    disconnect?: UserInvoiceWhereUniqueInput | UserInvoiceWhereUniqueInput[]
    delete?: UserInvoiceWhereUniqueInput | UserInvoiceWhereUniqueInput[]
    connect?: UserInvoiceWhereUniqueInput | UserInvoiceWhereUniqueInput[]
    update?: UserInvoiceUpdateWithWhereUniqueWithoutUserInput | UserInvoiceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserInvoiceUpdateManyWithWhereWithoutUserInput | UserInvoiceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserInvoiceScalarWhereInput | UserInvoiceScalarWhereInput[]
  }

  export type UserTaxProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserTaxProfileCreateWithoutUserInput, UserTaxProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserTaxProfileCreateOrConnectWithoutUserInput
    upsert?: UserTaxProfileUpsertWithoutUserInput
    disconnect?: UserTaxProfileWhereInput | boolean
    delete?: UserTaxProfileWhereInput | boolean
    connect?: UserTaxProfileWhereUniqueInput
    update?: XOR<XOR<UserTaxProfileUpdateToOneWithWhereWithoutUserInput, UserTaxProfileUpdateWithoutUserInput>, UserTaxProfileUncheckedUpdateWithoutUserInput>
  }

  export type InvoiceUncheckedUpdateManyWithoutIssuerUserNestedInput = {
    create?: XOR<InvoiceCreateWithoutIssuerUserInput, InvoiceUncheckedCreateWithoutIssuerUserInput> | InvoiceCreateWithoutIssuerUserInput[] | InvoiceUncheckedCreateWithoutIssuerUserInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutIssuerUserInput | InvoiceCreateOrConnectWithoutIssuerUserInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutIssuerUserInput | InvoiceUpsertWithWhereUniqueWithoutIssuerUserInput[]
    createMany?: InvoiceCreateManyIssuerUserInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutIssuerUserInput | InvoiceUpdateWithWhereUniqueWithoutIssuerUserInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutIssuerUserInput | InvoiceUpdateManyWithWhereWithoutIssuerUserInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type UserInvoiceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserInvoiceCreateWithoutUserInput, UserInvoiceUncheckedCreateWithoutUserInput> | UserInvoiceCreateWithoutUserInput[] | UserInvoiceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserInvoiceCreateOrConnectWithoutUserInput | UserInvoiceCreateOrConnectWithoutUserInput[]
    upsert?: UserInvoiceUpsertWithWhereUniqueWithoutUserInput | UserInvoiceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserInvoiceCreateManyUserInputEnvelope
    set?: UserInvoiceWhereUniqueInput | UserInvoiceWhereUniqueInput[]
    disconnect?: UserInvoiceWhereUniqueInput | UserInvoiceWhereUniqueInput[]
    delete?: UserInvoiceWhereUniqueInput | UserInvoiceWhereUniqueInput[]
    connect?: UserInvoiceWhereUniqueInput | UserInvoiceWhereUniqueInput[]
    update?: UserInvoiceUpdateWithWhereUniqueWithoutUserInput | UserInvoiceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserInvoiceUpdateManyWithWhereWithoutUserInput | UserInvoiceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserInvoiceScalarWhereInput | UserInvoiceScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutTaxProfileInput = {
    create?: XOR<UserCreateWithoutTaxProfileInput, UserUncheckedCreateWithoutTaxProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutTaxProfileInput
    connect?: UserWhereUniqueInput
  }

  export type InvoiceCreateNestedManyWithoutIssuerTaxProfileInput = {
    create?: XOR<InvoiceCreateWithoutIssuerTaxProfileInput, InvoiceUncheckedCreateWithoutIssuerTaxProfileInput> | InvoiceCreateWithoutIssuerTaxProfileInput[] | InvoiceUncheckedCreateWithoutIssuerTaxProfileInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutIssuerTaxProfileInput | InvoiceCreateOrConnectWithoutIssuerTaxProfileInput[]
    createMany?: InvoiceCreateManyIssuerTaxProfileInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type InvoiceUncheckedCreateNestedManyWithoutIssuerTaxProfileInput = {
    create?: XOR<InvoiceCreateWithoutIssuerTaxProfileInput, InvoiceUncheckedCreateWithoutIssuerTaxProfileInput> | InvoiceCreateWithoutIssuerTaxProfileInput[] | InvoiceUncheckedCreateWithoutIssuerTaxProfileInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutIssuerTaxProfileInput | InvoiceCreateOrConnectWithoutIssuerTaxProfileInput[]
    createMany?: InvoiceCreateManyIssuerTaxProfileInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type EnumTaxTypeFieldUpdateOperationsInput = {
    set?: $Enums.TaxType
  }

  export type UserUpdateOneRequiredWithoutTaxProfileNestedInput = {
    create?: XOR<UserCreateWithoutTaxProfileInput, UserUncheckedCreateWithoutTaxProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutTaxProfileInput
    upsert?: UserUpsertWithoutTaxProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTaxProfileInput, UserUpdateWithoutTaxProfileInput>, UserUncheckedUpdateWithoutTaxProfileInput>
  }

  export type InvoiceUpdateManyWithoutIssuerTaxProfileNestedInput = {
    create?: XOR<InvoiceCreateWithoutIssuerTaxProfileInput, InvoiceUncheckedCreateWithoutIssuerTaxProfileInput> | InvoiceCreateWithoutIssuerTaxProfileInput[] | InvoiceUncheckedCreateWithoutIssuerTaxProfileInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutIssuerTaxProfileInput | InvoiceCreateOrConnectWithoutIssuerTaxProfileInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutIssuerTaxProfileInput | InvoiceUpsertWithWhereUniqueWithoutIssuerTaxProfileInput[]
    createMany?: InvoiceCreateManyIssuerTaxProfileInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutIssuerTaxProfileInput | InvoiceUpdateWithWhereUniqueWithoutIssuerTaxProfileInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutIssuerTaxProfileInput | InvoiceUpdateManyWithWhereWithoutIssuerTaxProfileInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type InvoiceUncheckedUpdateManyWithoutIssuerTaxProfileNestedInput = {
    create?: XOR<InvoiceCreateWithoutIssuerTaxProfileInput, InvoiceUncheckedCreateWithoutIssuerTaxProfileInput> | InvoiceCreateWithoutIssuerTaxProfileInput[] | InvoiceUncheckedCreateWithoutIssuerTaxProfileInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutIssuerTaxProfileInput | InvoiceCreateOrConnectWithoutIssuerTaxProfileInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutIssuerTaxProfileInput | InvoiceUpsertWithWhereUniqueWithoutIssuerTaxProfileInput[]
    createMany?: InvoiceCreateManyIssuerTaxProfileInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutIssuerTaxProfileInput | InvoiceUpdateWithWhereUniqueWithoutIssuerTaxProfileInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutIssuerTaxProfileInput | InvoiceUpdateManyWithWhereWithoutIssuerTaxProfileInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type CustomerTaxProfileCreateNestedManyWithoutCustomerInput = {
    create?: XOR<CustomerTaxProfileCreateWithoutCustomerInput, CustomerTaxProfileUncheckedCreateWithoutCustomerInput> | CustomerTaxProfileCreateWithoutCustomerInput[] | CustomerTaxProfileUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerTaxProfileCreateOrConnectWithoutCustomerInput | CustomerTaxProfileCreateOrConnectWithoutCustomerInput[]
    createMany?: CustomerTaxProfileCreateManyCustomerInputEnvelope
    connect?: CustomerTaxProfileWhereUniqueInput | CustomerTaxProfileWhereUniqueInput[]
  }

  export type InvoiceCreateNestedManyWithoutBillToCustomerInput = {
    create?: XOR<InvoiceCreateWithoutBillToCustomerInput, InvoiceUncheckedCreateWithoutBillToCustomerInput> | InvoiceCreateWithoutBillToCustomerInput[] | InvoiceUncheckedCreateWithoutBillToCustomerInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutBillToCustomerInput | InvoiceCreateOrConnectWithoutBillToCustomerInput[]
    createMany?: InvoiceCreateManyBillToCustomerInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type InvoiceCreateNestedManyWithoutShipToCustomerInput = {
    create?: XOR<InvoiceCreateWithoutShipToCustomerInput, InvoiceUncheckedCreateWithoutShipToCustomerInput> | InvoiceCreateWithoutShipToCustomerInput[] | InvoiceUncheckedCreateWithoutShipToCustomerInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutShipToCustomerInput | InvoiceCreateOrConnectWithoutShipToCustomerInput[]
    createMany?: InvoiceCreateManyShipToCustomerInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type CustomerTaxProfileUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<CustomerTaxProfileCreateWithoutCustomerInput, CustomerTaxProfileUncheckedCreateWithoutCustomerInput> | CustomerTaxProfileCreateWithoutCustomerInput[] | CustomerTaxProfileUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerTaxProfileCreateOrConnectWithoutCustomerInput | CustomerTaxProfileCreateOrConnectWithoutCustomerInput[]
    createMany?: CustomerTaxProfileCreateManyCustomerInputEnvelope
    connect?: CustomerTaxProfileWhereUniqueInput | CustomerTaxProfileWhereUniqueInput[]
  }

  export type InvoiceUncheckedCreateNestedManyWithoutBillToCustomerInput = {
    create?: XOR<InvoiceCreateWithoutBillToCustomerInput, InvoiceUncheckedCreateWithoutBillToCustomerInput> | InvoiceCreateWithoutBillToCustomerInput[] | InvoiceUncheckedCreateWithoutBillToCustomerInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutBillToCustomerInput | InvoiceCreateOrConnectWithoutBillToCustomerInput[]
    createMany?: InvoiceCreateManyBillToCustomerInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type InvoiceUncheckedCreateNestedManyWithoutShipToCustomerInput = {
    create?: XOR<InvoiceCreateWithoutShipToCustomerInput, InvoiceUncheckedCreateWithoutShipToCustomerInput> | InvoiceCreateWithoutShipToCustomerInput[] | InvoiceUncheckedCreateWithoutShipToCustomerInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutShipToCustomerInput | InvoiceCreateOrConnectWithoutShipToCustomerInput[]
    createMany?: InvoiceCreateManyShipToCustomerInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type CustomerTaxProfileUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<CustomerTaxProfileCreateWithoutCustomerInput, CustomerTaxProfileUncheckedCreateWithoutCustomerInput> | CustomerTaxProfileCreateWithoutCustomerInput[] | CustomerTaxProfileUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerTaxProfileCreateOrConnectWithoutCustomerInput | CustomerTaxProfileCreateOrConnectWithoutCustomerInput[]
    upsert?: CustomerTaxProfileUpsertWithWhereUniqueWithoutCustomerInput | CustomerTaxProfileUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: CustomerTaxProfileCreateManyCustomerInputEnvelope
    set?: CustomerTaxProfileWhereUniqueInput | CustomerTaxProfileWhereUniqueInput[]
    disconnect?: CustomerTaxProfileWhereUniqueInput | CustomerTaxProfileWhereUniqueInput[]
    delete?: CustomerTaxProfileWhereUniqueInput | CustomerTaxProfileWhereUniqueInput[]
    connect?: CustomerTaxProfileWhereUniqueInput | CustomerTaxProfileWhereUniqueInput[]
    update?: CustomerTaxProfileUpdateWithWhereUniqueWithoutCustomerInput | CustomerTaxProfileUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: CustomerTaxProfileUpdateManyWithWhereWithoutCustomerInput | CustomerTaxProfileUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: CustomerTaxProfileScalarWhereInput | CustomerTaxProfileScalarWhereInput[]
  }

  export type InvoiceUpdateManyWithoutBillToCustomerNestedInput = {
    create?: XOR<InvoiceCreateWithoutBillToCustomerInput, InvoiceUncheckedCreateWithoutBillToCustomerInput> | InvoiceCreateWithoutBillToCustomerInput[] | InvoiceUncheckedCreateWithoutBillToCustomerInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutBillToCustomerInput | InvoiceCreateOrConnectWithoutBillToCustomerInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutBillToCustomerInput | InvoiceUpsertWithWhereUniqueWithoutBillToCustomerInput[]
    createMany?: InvoiceCreateManyBillToCustomerInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutBillToCustomerInput | InvoiceUpdateWithWhereUniqueWithoutBillToCustomerInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutBillToCustomerInput | InvoiceUpdateManyWithWhereWithoutBillToCustomerInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type InvoiceUpdateManyWithoutShipToCustomerNestedInput = {
    create?: XOR<InvoiceCreateWithoutShipToCustomerInput, InvoiceUncheckedCreateWithoutShipToCustomerInput> | InvoiceCreateWithoutShipToCustomerInput[] | InvoiceUncheckedCreateWithoutShipToCustomerInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutShipToCustomerInput | InvoiceCreateOrConnectWithoutShipToCustomerInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutShipToCustomerInput | InvoiceUpsertWithWhereUniqueWithoutShipToCustomerInput[]
    createMany?: InvoiceCreateManyShipToCustomerInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutShipToCustomerInput | InvoiceUpdateWithWhereUniqueWithoutShipToCustomerInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutShipToCustomerInput | InvoiceUpdateManyWithWhereWithoutShipToCustomerInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type CustomerTaxProfileUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<CustomerTaxProfileCreateWithoutCustomerInput, CustomerTaxProfileUncheckedCreateWithoutCustomerInput> | CustomerTaxProfileCreateWithoutCustomerInput[] | CustomerTaxProfileUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerTaxProfileCreateOrConnectWithoutCustomerInput | CustomerTaxProfileCreateOrConnectWithoutCustomerInput[]
    upsert?: CustomerTaxProfileUpsertWithWhereUniqueWithoutCustomerInput | CustomerTaxProfileUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: CustomerTaxProfileCreateManyCustomerInputEnvelope
    set?: CustomerTaxProfileWhereUniqueInput | CustomerTaxProfileWhereUniqueInput[]
    disconnect?: CustomerTaxProfileWhereUniqueInput | CustomerTaxProfileWhereUniqueInput[]
    delete?: CustomerTaxProfileWhereUniqueInput | CustomerTaxProfileWhereUniqueInput[]
    connect?: CustomerTaxProfileWhereUniqueInput | CustomerTaxProfileWhereUniqueInput[]
    update?: CustomerTaxProfileUpdateWithWhereUniqueWithoutCustomerInput | CustomerTaxProfileUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: CustomerTaxProfileUpdateManyWithWhereWithoutCustomerInput | CustomerTaxProfileUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: CustomerTaxProfileScalarWhereInput | CustomerTaxProfileScalarWhereInput[]
  }

  export type InvoiceUncheckedUpdateManyWithoutBillToCustomerNestedInput = {
    create?: XOR<InvoiceCreateWithoutBillToCustomerInput, InvoiceUncheckedCreateWithoutBillToCustomerInput> | InvoiceCreateWithoutBillToCustomerInput[] | InvoiceUncheckedCreateWithoutBillToCustomerInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutBillToCustomerInput | InvoiceCreateOrConnectWithoutBillToCustomerInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutBillToCustomerInput | InvoiceUpsertWithWhereUniqueWithoutBillToCustomerInput[]
    createMany?: InvoiceCreateManyBillToCustomerInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutBillToCustomerInput | InvoiceUpdateWithWhereUniqueWithoutBillToCustomerInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutBillToCustomerInput | InvoiceUpdateManyWithWhereWithoutBillToCustomerInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type InvoiceUncheckedUpdateManyWithoutShipToCustomerNestedInput = {
    create?: XOR<InvoiceCreateWithoutShipToCustomerInput, InvoiceUncheckedCreateWithoutShipToCustomerInput> | InvoiceCreateWithoutShipToCustomerInput[] | InvoiceUncheckedCreateWithoutShipToCustomerInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutShipToCustomerInput | InvoiceCreateOrConnectWithoutShipToCustomerInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutShipToCustomerInput | InvoiceUpsertWithWhereUniqueWithoutShipToCustomerInput[]
    createMany?: InvoiceCreateManyShipToCustomerInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutShipToCustomerInput | InvoiceUpdateWithWhereUniqueWithoutShipToCustomerInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutShipToCustomerInput | InvoiceUpdateManyWithWhereWithoutShipToCustomerInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type CustomerCreateNestedOneWithoutTaxProfilesInput = {
    create?: XOR<CustomerCreateWithoutTaxProfilesInput, CustomerUncheckedCreateWithoutTaxProfilesInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutTaxProfilesInput
    connect?: CustomerWhereUniqueInput
  }

  export type InvoiceCreateNestedManyWithoutBillToCustomerTaxProfileInput = {
    create?: XOR<InvoiceCreateWithoutBillToCustomerTaxProfileInput, InvoiceUncheckedCreateWithoutBillToCustomerTaxProfileInput> | InvoiceCreateWithoutBillToCustomerTaxProfileInput[] | InvoiceUncheckedCreateWithoutBillToCustomerTaxProfileInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutBillToCustomerTaxProfileInput | InvoiceCreateOrConnectWithoutBillToCustomerTaxProfileInput[]
    createMany?: InvoiceCreateManyBillToCustomerTaxProfileInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type InvoiceCreateNestedManyWithoutShipToCustomerTaxProfileInput = {
    create?: XOR<InvoiceCreateWithoutShipToCustomerTaxProfileInput, InvoiceUncheckedCreateWithoutShipToCustomerTaxProfileInput> | InvoiceCreateWithoutShipToCustomerTaxProfileInput[] | InvoiceUncheckedCreateWithoutShipToCustomerTaxProfileInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutShipToCustomerTaxProfileInput | InvoiceCreateOrConnectWithoutShipToCustomerTaxProfileInput[]
    createMany?: InvoiceCreateManyShipToCustomerTaxProfileInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type InvoiceUncheckedCreateNestedManyWithoutBillToCustomerTaxProfileInput = {
    create?: XOR<InvoiceCreateWithoutBillToCustomerTaxProfileInput, InvoiceUncheckedCreateWithoutBillToCustomerTaxProfileInput> | InvoiceCreateWithoutBillToCustomerTaxProfileInput[] | InvoiceUncheckedCreateWithoutBillToCustomerTaxProfileInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutBillToCustomerTaxProfileInput | InvoiceCreateOrConnectWithoutBillToCustomerTaxProfileInput[]
    createMany?: InvoiceCreateManyBillToCustomerTaxProfileInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type InvoiceUncheckedCreateNestedManyWithoutShipToCustomerTaxProfileInput = {
    create?: XOR<InvoiceCreateWithoutShipToCustomerTaxProfileInput, InvoiceUncheckedCreateWithoutShipToCustomerTaxProfileInput> | InvoiceCreateWithoutShipToCustomerTaxProfileInput[] | InvoiceUncheckedCreateWithoutShipToCustomerTaxProfileInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutShipToCustomerTaxProfileInput | InvoiceCreateOrConnectWithoutShipToCustomerTaxProfileInput[]
    createMany?: InvoiceCreateManyShipToCustomerTaxProfileInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type CustomerUpdateOneRequiredWithoutTaxProfilesNestedInput = {
    create?: XOR<CustomerCreateWithoutTaxProfilesInput, CustomerUncheckedCreateWithoutTaxProfilesInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutTaxProfilesInput
    upsert?: CustomerUpsertWithoutTaxProfilesInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutTaxProfilesInput, CustomerUpdateWithoutTaxProfilesInput>, CustomerUncheckedUpdateWithoutTaxProfilesInput>
  }

  export type InvoiceUpdateManyWithoutBillToCustomerTaxProfileNestedInput = {
    create?: XOR<InvoiceCreateWithoutBillToCustomerTaxProfileInput, InvoiceUncheckedCreateWithoutBillToCustomerTaxProfileInput> | InvoiceCreateWithoutBillToCustomerTaxProfileInput[] | InvoiceUncheckedCreateWithoutBillToCustomerTaxProfileInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutBillToCustomerTaxProfileInput | InvoiceCreateOrConnectWithoutBillToCustomerTaxProfileInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutBillToCustomerTaxProfileInput | InvoiceUpsertWithWhereUniqueWithoutBillToCustomerTaxProfileInput[]
    createMany?: InvoiceCreateManyBillToCustomerTaxProfileInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutBillToCustomerTaxProfileInput | InvoiceUpdateWithWhereUniqueWithoutBillToCustomerTaxProfileInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutBillToCustomerTaxProfileInput | InvoiceUpdateManyWithWhereWithoutBillToCustomerTaxProfileInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type InvoiceUpdateManyWithoutShipToCustomerTaxProfileNestedInput = {
    create?: XOR<InvoiceCreateWithoutShipToCustomerTaxProfileInput, InvoiceUncheckedCreateWithoutShipToCustomerTaxProfileInput> | InvoiceCreateWithoutShipToCustomerTaxProfileInput[] | InvoiceUncheckedCreateWithoutShipToCustomerTaxProfileInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutShipToCustomerTaxProfileInput | InvoiceCreateOrConnectWithoutShipToCustomerTaxProfileInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutShipToCustomerTaxProfileInput | InvoiceUpsertWithWhereUniqueWithoutShipToCustomerTaxProfileInput[]
    createMany?: InvoiceCreateManyShipToCustomerTaxProfileInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutShipToCustomerTaxProfileInput | InvoiceUpdateWithWhereUniqueWithoutShipToCustomerTaxProfileInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutShipToCustomerTaxProfileInput | InvoiceUpdateManyWithWhereWithoutShipToCustomerTaxProfileInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type InvoiceUncheckedUpdateManyWithoutBillToCustomerTaxProfileNestedInput = {
    create?: XOR<InvoiceCreateWithoutBillToCustomerTaxProfileInput, InvoiceUncheckedCreateWithoutBillToCustomerTaxProfileInput> | InvoiceCreateWithoutBillToCustomerTaxProfileInput[] | InvoiceUncheckedCreateWithoutBillToCustomerTaxProfileInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutBillToCustomerTaxProfileInput | InvoiceCreateOrConnectWithoutBillToCustomerTaxProfileInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutBillToCustomerTaxProfileInput | InvoiceUpsertWithWhereUniqueWithoutBillToCustomerTaxProfileInput[]
    createMany?: InvoiceCreateManyBillToCustomerTaxProfileInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutBillToCustomerTaxProfileInput | InvoiceUpdateWithWhereUniqueWithoutBillToCustomerTaxProfileInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutBillToCustomerTaxProfileInput | InvoiceUpdateManyWithWhereWithoutBillToCustomerTaxProfileInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type InvoiceUncheckedUpdateManyWithoutShipToCustomerTaxProfileNestedInput = {
    create?: XOR<InvoiceCreateWithoutShipToCustomerTaxProfileInput, InvoiceUncheckedCreateWithoutShipToCustomerTaxProfileInput> | InvoiceCreateWithoutShipToCustomerTaxProfileInput[] | InvoiceUncheckedCreateWithoutShipToCustomerTaxProfileInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutShipToCustomerTaxProfileInput | InvoiceCreateOrConnectWithoutShipToCustomerTaxProfileInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutShipToCustomerTaxProfileInput | InvoiceUpsertWithWhereUniqueWithoutShipToCustomerTaxProfileInput[]
    createMany?: InvoiceCreateManyShipToCustomerTaxProfileInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutShipToCustomerTaxProfileInput | InvoiceUpdateWithWhereUniqueWithoutShipToCustomerTaxProfileInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutShipToCustomerTaxProfileInput | InvoiceUpdateManyWithWhereWithoutShipToCustomerTaxProfileInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutInvoicesInput = {
    create?: XOR<UserCreateWithoutInvoicesInput, UserUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvoicesInput
    connect?: UserWhereUniqueInput
  }

  export type UserTaxProfileCreateNestedOneWithoutInvoiceInput = {
    create?: XOR<UserTaxProfileCreateWithoutInvoiceInput, UserTaxProfileUncheckedCreateWithoutInvoiceInput>
    connectOrCreate?: UserTaxProfileCreateOrConnectWithoutInvoiceInput
    connect?: UserTaxProfileWhereUniqueInput
  }

  export type CustomerCreateNestedOneWithoutBilledInvoicesInput = {
    create?: XOR<CustomerCreateWithoutBilledInvoicesInput, CustomerUncheckedCreateWithoutBilledInvoicesInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutBilledInvoicesInput
    connect?: CustomerWhereUniqueInput
  }

  export type CustomerTaxProfileCreateNestedOneWithoutBillInvoiceInput = {
    create?: XOR<CustomerTaxProfileCreateWithoutBillInvoiceInput, CustomerTaxProfileUncheckedCreateWithoutBillInvoiceInput>
    connectOrCreate?: CustomerTaxProfileCreateOrConnectWithoutBillInvoiceInput
    connect?: CustomerTaxProfileWhereUniqueInput
  }

  export type CustomerCreateNestedOneWithoutShippedInvoicesInput = {
    create?: XOR<CustomerCreateWithoutShippedInvoicesInput, CustomerUncheckedCreateWithoutShippedInvoicesInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutShippedInvoicesInput
    connect?: CustomerWhereUniqueInput
  }

  export type CustomerTaxProfileCreateNestedOneWithoutShipInvoiceInput = {
    create?: XOR<CustomerTaxProfileCreateWithoutShipInvoiceInput, CustomerTaxProfileUncheckedCreateWithoutShipInvoiceInput>
    connectOrCreate?: CustomerTaxProfileCreateOrConnectWithoutShipInvoiceInput
    connect?: CustomerTaxProfileWhereUniqueInput
  }

  export type InvoiceItemCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<InvoiceItemCreateWithoutInvoiceInput, InvoiceItemUncheckedCreateWithoutInvoiceInput> | InvoiceItemCreateWithoutInvoiceInput[] | InvoiceItemUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: InvoiceItemCreateOrConnectWithoutInvoiceInput | InvoiceItemCreateOrConnectWithoutInvoiceInput[]
    createMany?: InvoiceItemCreateManyInvoiceInputEnvelope
    connect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
  }

  export type UserInvoiceCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<UserInvoiceCreateWithoutInvoiceInput, UserInvoiceUncheckedCreateWithoutInvoiceInput> | UserInvoiceCreateWithoutInvoiceInput[] | UserInvoiceUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: UserInvoiceCreateOrConnectWithoutInvoiceInput | UserInvoiceCreateOrConnectWithoutInvoiceInput[]
    createMany?: UserInvoiceCreateManyInvoiceInputEnvelope
    connect?: UserInvoiceWhereUniqueInput | UserInvoiceWhereUniqueInput[]
  }

  export type InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<InvoiceItemCreateWithoutInvoiceInput, InvoiceItemUncheckedCreateWithoutInvoiceInput> | InvoiceItemCreateWithoutInvoiceInput[] | InvoiceItemUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: InvoiceItemCreateOrConnectWithoutInvoiceInput | InvoiceItemCreateOrConnectWithoutInvoiceInput[]
    createMany?: InvoiceItemCreateManyInvoiceInputEnvelope
    connect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
  }

  export type UserInvoiceUncheckedCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<UserInvoiceCreateWithoutInvoiceInput, UserInvoiceUncheckedCreateWithoutInvoiceInput> | UserInvoiceCreateWithoutInvoiceInput[] | UserInvoiceUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: UserInvoiceCreateOrConnectWithoutInvoiceInput | UserInvoiceCreateOrConnectWithoutInvoiceInput[]
    createMany?: UserInvoiceCreateManyInvoiceInputEnvelope
    connect?: UserInvoiceWhereUniqueInput | UserInvoiceWhereUniqueInput[]
  }

  export type EnumInvoiceStatusFieldUpdateOperationsInput = {
    set?: $Enums.InvoiceStatus
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type EnumPaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMethod
  }

  export type UserUpdateOneRequiredWithoutInvoicesNestedInput = {
    create?: XOR<UserCreateWithoutInvoicesInput, UserUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvoicesInput
    upsert?: UserUpsertWithoutInvoicesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInvoicesInput, UserUpdateWithoutInvoicesInput>, UserUncheckedUpdateWithoutInvoicesInput>
  }

  export type UserTaxProfileUpdateOneRequiredWithoutInvoiceNestedInput = {
    create?: XOR<UserTaxProfileCreateWithoutInvoiceInput, UserTaxProfileUncheckedCreateWithoutInvoiceInput>
    connectOrCreate?: UserTaxProfileCreateOrConnectWithoutInvoiceInput
    upsert?: UserTaxProfileUpsertWithoutInvoiceInput
    connect?: UserTaxProfileWhereUniqueInput
    update?: XOR<XOR<UserTaxProfileUpdateToOneWithWhereWithoutInvoiceInput, UserTaxProfileUpdateWithoutInvoiceInput>, UserTaxProfileUncheckedUpdateWithoutInvoiceInput>
  }

  export type CustomerUpdateOneRequiredWithoutBilledInvoicesNestedInput = {
    create?: XOR<CustomerCreateWithoutBilledInvoicesInput, CustomerUncheckedCreateWithoutBilledInvoicesInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutBilledInvoicesInput
    upsert?: CustomerUpsertWithoutBilledInvoicesInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutBilledInvoicesInput, CustomerUpdateWithoutBilledInvoicesInput>, CustomerUncheckedUpdateWithoutBilledInvoicesInput>
  }

  export type CustomerTaxProfileUpdateOneRequiredWithoutBillInvoiceNestedInput = {
    create?: XOR<CustomerTaxProfileCreateWithoutBillInvoiceInput, CustomerTaxProfileUncheckedCreateWithoutBillInvoiceInput>
    connectOrCreate?: CustomerTaxProfileCreateOrConnectWithoutBillInvoiceInput
    upsert?: CustomerTaxProfileUpsertWithoutBillInvoiceInput
    connect?: CustomerTaxProfileWhereUniqueInput
    update?: XOR<XOR<CustomerTaxProfileUpdateToOneWithWhereWithoutBillInvoiceInput, CustomerTaxProfileUpdateWithoutBillInvoiceInput>, CustomerTaxProfileUncheckedUpdateWithoutBillInvoiceInput>
  }

  export type CustomerUpdateOneWithoutShippedInvoicesNestedInput = {
    create?: XOR<CustomerCreateWithoutShippedInvoicesInput, CustomerUncheckedCreateWithoutShippedInvoicesInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutShippedInvoicesInput
    upsert?: CustomerUpsertWithoutShippedInvoicesInput
    disconnect?: CustomerWhereInput | boolean
    delete?: CustomerWhereInput | boolean
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutShippedInvoicesInput, CustomerUpdateWithoutShippedInvoicesInput>, CustomerUncheckedUpdateWithoutShippedInvoicesInput>
  }

  export type CustomerTaxProfileUpdateOneWithoutShipInvoiceNestedInput = {
    create?: XOR<CustomerTaxProfileCreateWithoutShipInvoiceInput, CustomerTaxProfileUncheckedCreateWithoutShipInvoiceInput>
    connectOrCreate?: CustomerTaxProfileCreateOrConnectWithoutShipInvoiceInput
    upsert?: CustomerTaxProfileUpsertWithoutShipInvoiceInput
    disconnect?: CustomerTaxProfileWhereInput | boolean
    delete?: CustomerTaxProfileWhereInput | boolean
    connect?: CustomerTaxProfileWhereUniqueInput
    update?: XOR<XOR<CustomerTaxProfileUpdateToOneWithWhereWithoutShipInvoiceInput, CustomerTaxProfileUpdateWithoutShipInvoiceInput>, CustomerTaxProfileUncheckedUpdateWithoutShipInvoiceInput>
  }

  export type InvoiceItemUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<InvoiceItemCreateWithoutInvoiceInput, InvoiceItemUncheckedCreateWithoutInvoiceInput> | InvoiceItemCreateWithoutInvoiceInput[] | InvoiceItemUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: InvoiceItemCreateOrConnectWithoutInvoiceInput | InvoiceItemCreateOrConnectWithoutInvoiceInput[]
    upsert?: InvoiceItemUpsertWithWhereUniqueWithoutInvoiceInput | InvoiceItemUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: InvoiceItemCreateManyInvoiceInputEnvelope
    set?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    disconnect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    delete?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    connect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    update?: InvoiceItemUpdateWithWhereUniqueWithoutInvoiceInput | InvoiceItemUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: InvoiceItemUpdateManyWithWhereWithoutInvoiceInput | InvoiceItemUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: InvoiceItemScalarWhereInput | InvoiceItemScalarWhereInput[]
  }

  export type UserInvoiceUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<UserInvoiceCreateWithoutInvoiceInput, UserInvoiceUncheckedCreateWithoutInvoiceInput> | UserInvoiceCreateWithoutInvoiceInput[] | UserInvoiceUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: UserInvoiceCreateOrConnectWithoutInvoiceInput | UserInvoiceCreateOrConnectWithoutInvoiceInput[]
    upsert?: UserInvoiceUpsertWithWhereUniqueWithoutInvoiceInput | UserInvoiceUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: UserInvoiceCreateManyInvoiceInputEnvelope
    set?: UserInvoiceWhereUniqueInput | UserInvoiceWhereUniqueInput[]
    disconnect?: UserInvoiceWhereUniqueInput | UserInvoiceWhereUniqueInput[]
    delete?: UserInvoiceWhereUniqueInput | UserInvoiceWhereUniqueInput[]
    connect?: UserInvoiceWhereUniqueInput | UserInvoiceWhereUniqueInput[]
    update?: UserInvoiceUpdateWithWhereUniqueWithoutInvoiceInput | UserInvoiceUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: UserInvoiceUpdateManyWithWhereWithoutInvoiceInput | UserInvoiceUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: UserInvoiceScalarWhereInput | UserInvoiceScalarWhereInput[]
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type InvoiceItemUncheckedUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<InvoiceItemCreateWithoutInvoiceInput, InvoiceItemUncheckedCreateWithoutInvoiceInput> | InvoiceItemCreateWithoutInvoiceInput[] | InvoiceItemUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: InvoiceItemCreateOrConnectWithoutInvoiceInput | InvoiceItemCreateOrConnectWithoutInvoiceInput[]
    upsert?: InvoiceItemUpsertWithWhereUniqueWithoutInvoiceInput | InvoiceItemUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: InvoiceItemCreateManyInvoiceInputEnvelope
    set?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    disconnect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    delete?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    connect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    update?: InvoiceItemUpdateWithWhereUniqueWithoutInvoiceInput | InvoiceItemUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: InvoiceItemUpdateManyWithWhereWithoutInvoiceInput | InvoiceItemUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: InvoiceItemScalarWhereInput | InvoiceItemScalarWhereInput[]
  }

  export type UserInvoiceUncheckedUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<UserInvoiceCreateWithoutInvoiceInput, UserInvoiceUncheckedCreateWithoutInvoiceInput> | UserInvoiceCreateWithoutInvoiceInput[] | UserInvoiceUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: UserInvoiceCreateOrConnectWithoutInvoiceInput | UserInvoiceCreateOrConnectWithoutInvoiceInput[]
    upsert?: UserInvoiceUpsertWithWhereUniqueWithoutInvoiceInput | UserInvoiceUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: UserInvoiceCreateManyInvoiceInputEnvelope
    set?: UserInvoiceWhereUniqueInput | UserInvoiceWhereUniqueInput[]
    disconnect?: UserInvoiceWhereUniqueInput | UserInvoiceWhereUniqueInput[]
    delete?: UserInvoiceWhereUniqueInput | UserInvoiceWhereUniqueInput[]
    connect?: UserInvoiceWhereUniqueInput | UserInvoiceWhereUniqueInput[]
    update?: UserInvoiceUpdateWithWhereUniqueWithoutInvoiceInput | UserInvoiceUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: UserInvoiceUpdateManyWithWhereWithoutInvoiceInput | UserInvoiceUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: UserInvoiceScalarWhereInput | UserInvoiceScalarWhereInput[]
  }

  export type InvoiceCreateNestedOneWithoutInvoiceItemInput = {
    create?: XOR<InvoiceCreateWithoutInvoiceItemInput, InvoiceUncheckedCreateWithoutInvoiceItemInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutInvoiceItemInput
    connect?: InvoiceWhereUniqueInput
  }

  export type InvoiceUpdateOneRequiredWithoutInvoiceItemNestedInput = {
    create?: XOR<InvoiceCreateWithoutInvoiceItemInput, InvoiceUncheckedCreateWithoutInvoiceItemInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutInvoiceItemInput
    upsert?: InvoiceUpsertWithoutInvoiceItemInput
    connect?: InvoiceWhereUniqueInput
    update?: XOR<XOR<InvoiceUpdateToOneWithWhereWithoutInvoiceItemInput, InvoiceUpdateWithoutInvoiceItemInput>, InvoiceUncheckedUpdateWithoutInvoiceItemInput>
  }

  export type UserCreateNestedOneWithoutSharesInput = {
    create?: XOR<UserCreateWithoutSharesInput, UserUncheckedCreateWithoutSharesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSharesInput
    connect?: UserWhereUniqueInput
  }

  export type InvoiceCreateNestedOneWithoutUserInvoiceInput = {
    create?: XOR<InvoiceCreateWithoutUserInvoiceInput, InvoiceUncheckedCreateWithoutUserInvoiceInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutUserInvoiceInput
    connect?: InvoiceWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutSharesNestedInput = {
    create?: XOR<UserCreateWithoutSharesInput, UserUncheckedCreateWithoutSharesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSharesInput
    upsert?: UserUpsertWithoutSharesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSharesInput, UserUpdateWithoutSharesInput>, UserUncheckedUpdateWithoutSharesInput>
  }

  export type InvoiceUpdateOneRequiredWithoutUserInvoiceNestedInput = {
    create?: XOR<InvoiceCreateWithoutUserInvoiceInput, InvoiceUncheckedCreateWithoutUserInvoiceInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutUserInvoiceInput
    upsert?: InvoiceUpsertWithoutUserInvoiceInput
    connect?: InvoiceWhereUniqueInput
    update?: XOR<XOR<InvoiceUpdateToOneWithWhereWithoutUserInvoiceInput, InvoiceUpdateWithoutUserInvoiceInput>, InvoiceUncheckedUpdateWithoutUserInvoiceInput>
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumTaxTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TaxType | EnumTaxTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TaxType[] | ListEnumTaxTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaxType[] | ListEnumTaxTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTaxTypeFilter<$PrismaModel> | $Enums.TaxType
  }

  export type NestedEnumTaxTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaxType | EnumTaxTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TaxType[] | ListEnumTaxTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaxType[] | ListEnumTaxTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTaxTypeWithAggregatesFilter<$PrismaModel> | $Enums.TaxType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaxTypeFilter<$PrismaModel>
    _max?: NestedEnumTaxTypeFilter<$PrismaModel>
  }

  export type NestedEnumInvoiceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.InvoiceStatus | EnumInvoiceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInvoiceStatusFilter<$PrismaModel> | $Enums.InvoiceStatus
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type NestedEnumInvoiceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InvoiceStatus | EnumInvoiceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInvoiceStatusWithAggregatesFilter<$PrismaModel> | $Enums.InvoiceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInvoiceStatusFilter<$PrismaModel>
    _max?: NestedEnumInvoiceStatusFilter<$PrismaModel>
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UserTaxProfileCreateWithoutUserInput = {
    id?: bigint | number
    type: $Enums.TaxType
    legalName: string
    fiscalCode?: string | null
    vatNumber?: string | null
    addressLine1: string
    addressLine2?: string | null
    city: string
    province?: string | null
    postalCode: string
    countryCode: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Invoice?: InvoiceCreateNestedManyWithoutIssuerTaxProfileInput
  }

  export type UserTaxProfileUncheckedCreateWithoutUserInput = {
    id?: bigint | number
    type: $Enums.TaxType
    legalName: string
    fiscalCode?: string | null
    vatNumber?: string | null
    addressLine1: string
    addressLine2?: string | null
    city: string
    province?: string | null
    postalCode: string
    countryCode: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutIssuerTaxProfileInput
  }

  export type UserTaxProfileCreateOrConnectWithoutUserInput = {
    where: UserTaxProfileWhereUniqueInput
    create: XOR<UserTaxProfileCreateWithoutUserInput, UserTaxProfileUncheckedCreateWithoutUserInput>
  }

  export type InvoiceCreateWithoutIssuerUserInput = {
    id?: bigint | number
    invoiceNumber: bigint | number
    issueDate: Date | string
    dueDate: Date | string
    status?: $Enums.InvoiceStatus
    currency?: string
    subtotal: Decimal | DecimalJsLike | number | string
    taxTotal: Decimal | DecimalJsLike | number | string
    grandTotal: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    issuerTaxProfile: UserTaxProfileCreateNestedOneWithoutInvoiceInput
    billToCustomer: CustomerCreateNestedOneWithoutBilledInvoicesInput
    billToCustomerTaxProfile: CustomerTaxProfileCreateNestedOneWithoutBillInvoiceInput
    shipToCustomer?: CustomerCreateNestedOneWithoutShippedInvoicesInput
    shipToCustomerTaxProfile?: CustomerTaxProfileCreateNestedOneWithoutShipInvoiceInput
    InvoiceItem?: InvoiceItemCreateNestedManyWithoutInvoiceInput
    UserInvoice?: UserInvoiceCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutIssuerUserInput = {
    id?: bigint | number
    invoiceNumber: bigint | number
    issueDate: Date | string
    dueDate: Date | string
    status?: $Enums.InvoiceStatus
    issuerTaxProfileId: bigint | number
    billToCustomerId: bigint | number
    billToCustomerTaxProfileId: bigint | number
    shipToCustomerId?: bigint | number | null
    shipToCustomerTaxProfileId?: bigint | number | null
    currency?: string
    subtotal: Decimal | DecimalJsLike | number | string
    taxTotal: Decimal | DecimalJsLike | number | string
    grandTotal: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    InvoiceItem?: InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInput
    UserInvoice?: UserInvoiceUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutIssuerUserInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutIssuerUserInput, InvoiceUncheckedCreateWithoutIssuerUserInput>
  }

  export type InvoiceCreateManyIssuerUserInputEnvelope = {
    data: InvoiceCreateManyIssuerUserInput | InvoiceCreateManyIssuerUserInput[]
    skipDuplicates?: boolean
  }

  export type UserInvoiceCreateWithoutUserInput = {
    id?: bigint | number
    dateLinked?: Date | string
    firstView?: Date | string | null
    lastView?: Date | string | null
    invoice: InvoiceCreateNestedOneWithoutUserInvoiceInput
  }

  export type UserInvoiceUncheckedCreateWithoutUserInput = {
    id?: bigint | number
    invoiceId: bigint | number
    dateLinked?: Date | string
    firstView?: Date | string | null
    lastView?: Date | string | null
  }

  export type UserInvoiceCreateOrConnectWithoutUserInput = {
    where: UserInvoiceWhereUniqueInput
    create: XOR<UserInvoiceCreateWithoutUserInput, UserInvoiceUncheckedCreateWithoutUserInput>
  }

  export type UserInvoiceCreateManyUserInputEnvelope = {
    data: UserInvoiceCreateManyUserInput | UserInvoiceCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserTaxProfileUpsertWithoutUserInput = {
    update: XOR<UserTaxProfileUpdateWithoutUserInput, UserTaxProfileUncheckedUpdateWithoutUserInput>
    create: XOR<UserTaxProfileCreateWithoutUserInput, UserTaxProfileUncheckedCreateWithoutUserInput>
    where?: UserTaxProfileWhereInput
  }

  export type UserTaxProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: UserTaxProfileWhereInput
    data: XOR<UserTaxProfileUpdateWithoutUserInput, UserTaxProfileUncheckedUpdateWithoutUserInput>
  }

  export type UserTaxProfileUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTaxTypeFieldUpdateOperationsInput | $Enums.TaxType
    legalName?: StringFieldUpdateOperationsInput | string
    fiscalCode?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUpdateManyWithoutIssuerTaxProfileNestedInput
  }

  export type UserTaxProfileUncheckedUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTaxTypeFieldUpdateOperationsInput | $Enums.TaxType
    legalName?: StringFieldUpdateOperationsInput | string
    fiscalCode?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUncheckedUpdateManyWithoutIssuerTaxProfileNestedInput
  }

  export type InvoiceUpsertWithWhereUniqueWithoutIssuerUserInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutIssuerUserInput, InvoiceUncheckedUpdateWithoutIssuerUserInput>
    create: XOR<InvoiceCreateWithoutIssuerUserInput, InvoiceUncheckedCreateWithoutIssuerUserInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutIssuerUserInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutIssuerUserInput, InvoiceUncheckedUpdateWithoutIssuerUserInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutIssuerUserInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutIssuerUserInput>
  }

  export type InvoiceScalarWhereInput = {
    AND?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
    OR?: InvoiceScalarWhereInput[]
    NOT?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
    id?: BigIntFilter<"Invoice"> | bigint | number
    invoiceNumber?: BigIntFilter<"Invoice"> | bigint | number
    issueDate?: DateTimeFilter<"Invoice"> | Date | string
    dueDate?: DateTimeFilter<"Invoice"> | Date | string
    status?: EnumInvoiceStatusFilter<"Invoice"> | $Enums.InvoiceStatus
    issuerUserId?: BigIntFilter<"Invoice"> | bigint | number
    issuerTaxProfileId?: BigIntFilter<"Invoice"> | bigint | number
    billToCustomerId?: BigIntFilter<"Invoice"> | bigint | number
    billToCustomerTaxProfileId?: BigIntFilter<"Invoice"> | bigint | number
    shipToCustomerId?: BigIntNullableFilter<"Invoice"> | bigint | number | null
    shipToCustomerTaxProfileId?: BigIntNullableFilter<"Invoice"> | bigint | number | null
    currency?: StringFilter<"Invoice"> | string
    subtotal?: DecimalFilter<"Invoice"> | Decimal | DecimalJsLike | number | string
    taxTotal?: DecimalFilter<"Invoice"> | Decimal | DecimalJsLike | number | string
    grandTotal?: DecimalFilter<"Invoice"> | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFilter<"Invoice"> | $Enums.PaymentMethod
    createdAt?: DateTimeFilter<"Invoice"> | Date | string
    updatedAt?: DateTimeFilter<"Invoice"> | Date | string
  }

  export type UserInvoiceUpsertWithWhereUniqueWithoutUserInput = {
    where: UserInvoiceWhereUniqueInput
    update: XOR<UserInvoiceUpdateWithoutUserInput, UserInvoiceUncheckedUpdateWithoutUserInput>
    create: XOR<UserInvoiceCreateWithoutUserInput, UserInvoiceUncheckedCreateWithoutUserInput>
  }

  export type UserInvoiceUpdateWithWhereUniqueWithoutUserInput = {
    where: UserInvoiceWhereUniqueInput
    data: XOR<UserInvoiceUpdateWithoutUserInput, UserInvoiceUncheckedUpdateWithoutUserInput>
  }

  export type UserInvoiceUpdateManyWithWhereWithoutUserInput = {
    where: UserInvoiceScalarWhereInput
    data: XOR<UserInvoiceUpdateManyMutationInput, UserInvoiceUncheckedUpdateManyWithoutUserInput>
  }

  export type UserInvoiceScalarWhereInput = {
    AND?: UserInvoiceScalarWhereInput | UserInvoiceScalarWhereInput[]
    OR?: UserInvoiceScalarWhereInput[]
    NOT?: UserInvoiceScalarWhereInput | UserInvoiceScalarWhereInput[]
    id?: BigIntFilter<"UserInvoice"> | bigint | number
    userId?: BigIntFilter<"UserInvoice"> | bigint | number
    invoiceId?: BigIntFilter<"UserInvoice"> | bigint | number
    dateLinked?: DateTimeFilter<"UserInvoice"> | Date | string
    firstView?: DateTimeNullableFilter<"UserInvoice"> | Date | string | null
    lastView?: DateTimeNullableFilter<"UserInvoice"> | Date | string | null
  }

  export type UserCreateWithoutTaxProfileInput = {
    id?: bigint | number
    email: string
    phone?: string | null
    passwordHash: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    invoices?: InvoiceCreateNestedManyWithoutIssuerUserInput
    shares?: UserInvoiceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTaxProfileInput = {
    id?: bigint | number
    email: string
    phone?: string | null
    passwordHash: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    invoices?: InvoiceUncheckedCreateNestedManyWithoutIssuerUserInput
    shares?: UserInvoiceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTaxProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTaxProfileInput, UserUncheckedCreateWithoutTaxProfileInput>
  }

  export type InvoiceCreateWithoutIssuerTaxProfileInput = {
    id?: bigint | number
    invoiceNumber: bigint | number
    issueDate: Date | string
    dueDate: Date | string
    status?: $Enums.InvoiceStatus
    currency?: string
    subtotal: Decimal | DecimalJsLike | number | string
    taxTotal: Decimal | DecimalJsLike | number | string
    grandTotal: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    issuerUser: UserCreateNestedOneWithoutInvoicesInput
    billToCustomer: CustomerCreateNestedOneWithoutBilledInvoicesInput
    billToCustomerTaxProfile: CustomerTaxProfileCreateNestedOneWithoutBillInvoiceInput
    shipToCustomer?: CustomerCreateNestedOneWithoutShippedInvoicesInput
    shipToCustomerTaxProfile?: CustomerTaxProfileCreateNestedOneWithoutShipInvoiceInput
    InvoiceItem?: InvoiceItemCreateNestedManyWithoutInvoiceInput
    UserInvoice?: UserInvoiceCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutIssuerTaxProfileInput = {
    id?: bigint | number
    invoiceNumber: bigint | number
    issueDate: Date | string
    dueDate: Date | string
    status?: $Enums.InvoiceStatus
    issuerUserId: bigint | number
    billToCustomerId: bigint | number
    billToCustomerTaxProfileId: bigint | number
    shipToCustomerId?: bigint | number | null
    shipToCustomerTaxProfileId?: bigint | number | null
    currency?: string
    subtotal: Decimal | DecimalJsLike | number | string
    taxTotal: Decimal | DecimalJsLike | number | string
    grandTotal: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    InvoiceItem?: InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInput
    UserInvoice?: UserInvoiceUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutIssuerTaxProfileInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutIssuerTaxProfileInput, InvoiceUncheckedCreateWithoutIssuerTaxProfileInput>
  }

  export type InvoiceCreateManyIssuerTaxProfileInputEnvelope = {
    data: InvoiceCreateManyIssuerTaxProfileInput | InvoiceCreateManyIssuerTaxProfileInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutTaxProfileInput = {
    update: XOR<UserUpdateWithoutTaxProfileInput, UserUncheckedUpdateWithoutTaxProfileInput>
    create: XOR<UserCreateWithoutTaxProfileInput, UserUncheckedCreateWithoutTaxProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTaxProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTaxProfileInput, UserUncheckedUpdateWithoutTaxProfileInput>
  }

  export type UserUpdateWithoutTaxProfileInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoices?: InvoiceUpdateManyWithoutIssuerUserNestedInput
    shares?: UserInvoiceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTaxProfileInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoices?: InvoiceUncheckedUpdateManyWithoutIssuerUserNestedInput
    shares?: UserInvoiceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type InvoiceUpsertWithWhereUniqueWithoutIssuerTaxProfileInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutIssuerTaxProfileInput, InvoiceUncheckedUpdateWithoutIssuerTaxProfileInput>
    create: XOR<InvoiceCreateWithoutIssuerTaxProfileInput, InvoiceUncheckedCreateWithoutIssuerTaxProfileInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutIssuerTaxProfileInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutIssuerTaxProfileInput, InvoiceUncheckedUpdateWithoutIssuerTaxProfileInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutIssuerTaxProfileInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutIssuerTaxProfileInput>
  }

  export type CustomerTaxProfileCreateWithoutCustomerInput = {
    id?: bigint | number
    type: $Enums.TaxType
    legalName: string
    fiscalCode?: string | null
    vatNumber?: string | null
    addressLine1: string
    addressLine2?: string | null
    city: string
    province?: string | null
    postalCode: string
    countryCode: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    BillInvoice?: InvoiceCreateNestedManyWithoutBillToCustomerTaxProfileInput
    ShipInvoice?: InvoiceCreateNestedManyWithoutShipToCustomerTaxProfileInput
  }

  export type CustomerTaxProfileUncheckedCreateWithoutCustomerInput = {
    id?: bigint | number
    type: $Enums.TaxType
    legalName: string
    fiscalCode?: string | null
    vatNumber?: string | null
    addressLine1: string
    addressLine2?: string | null
    city: string
    province?: string | null
    postalCode: string
    countryCode: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    BillInvoice?: InvoiceUncheckedCreateNestedManyWithoutBillToCustomerTaxProfileInput
    ShipInvoice?: InvoiceUncheckedCreateNestedManyWithoutShipToCustomerTaxProfileInput
  }

  export type CustomerTaxProfileCreateOrConnectWithoutCustomerInput = {
    where: CustomerTaxProfileWhereUniqueInput
    create: XOR<CustomerTaxProfileCreateWithoutCustomerInput, CustomerTaxProfileUncheckedCreateWithoutCustomerInput>
  }

  export type CustomerTaxProfileCreateManyCustomerInputEnvelope = {
    data: CustomerTaxProfileCreateManyCustomerInput | CustomerTaxProfileCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type InvoiceCreateWithoutBillToCustomerInput = {
    id?: bigint | number
    invoiceNumber: bigint | number
    issueDate: Date | string
    dueDate: Date | string
    status?: $Enums.InvoiceStatus
    currency?: string
    subtotal: Decimal | DecimalJsLike | number | string
    taxTotal: Decimal | DecimalJsLike | number | string
    grandTotal: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    issuerUser: UserCreateNestedOneWithoutInvoicesInput
    issuerTaxProfile: UserTaxProfileCreateNestedOneWithoutInvoiceInput
    billToCustomerTaxProfile: CustomerTaxProfileCreateNestedOneWithoutBillInvoiceInput
    shipToCustomer?: CustomerCreateNestedOneWithoutShippedInvoicesInput
    shipToCustomerTaxProfile?: CustomerTaxProfileCreateNestedOneWithoutShipInvoiceInput
    InvoiceItem?: InvoiceItemCreateNestedManyWithoutInvoiceInput
    UserInvoice?: UserInvoiceCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutBillToCustomerInput = {
    id?: bigint | number
    invoiceNumber: bigint | number
    issueDate: Date | string
    dueDate: Date | string
    status?: $Enums.InvoiceStatus
    issuerUserId: bigint | number
    issuerTaxProfileId: bigint | number
    billToCustomerTaxProfileId: bigint | number
    shipToCustomerId?: bigint | number | null
    shipToCustomerTaxProfileId?: bigint | number | null
    currency?: string
    subtotal: Decimal | DecimalJsLike | number | string
    taxTotal: Decimal | DecimalJsLike | number | string
    grandTotal: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    InvoiceItem?: InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInput
    UserInvoice?: UserInvoiceUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutBillToCustomerInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutBillToCustomerInput, InvoiceUncheckedCreateWithoutBillToCustomerInput>
  }

  export type InvoiceCreateManyBillToCustomerInputEnvelope = {
    data: InvoiceCreateManyBillToCustomerInput | InvoiceCreateManyBillToCustomerInput[]
    skipDuplicates?: boolean
  }

  export type InvoiceCreateWithoutShipToCustomerInput = {
    id?: bigint | number
    invoiceNumber: bigint | number
    issueDate: Date | string
    dueDate: Date | string
    status?: $Enums.InvoiceStatus
    currency?: string
    subtotal: Decimal | DecimalJsLike | number | string
    taxTotal: Decimal | DecimalJsLike | number | string
    grandTotal: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    issuerUser: UserCreateNestedOneWithoutInvoicesInput
    issuerTaxProfile: UserTaxProfileCreateNestedOneWithoutInvoiceInput
    billToCustomer: CustomerCreateNestedOneWithoutBilledInvoicesInput
    billToCustomerTaxProfile: CustomerTaxProfileCreateNestedOneWithoutBillInvoiceInput
    shipToCustomerTaxProfile?: CustomerTaxProfileCreateNestedOneWithoutShipInvoiceInput
    InvoiceItem?: InvoiceItemCreateNestedManyWithoutInvoiceInput
    UserInvoice?: UserInvoiceCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutShipToCustomerInput = {
    id?: bigint | number
    invoiceNumber: bigint | number
    issueDate: Date | string
    dueDate: Date | string
    status?: $Enums.InvoiceStatus
    issuerUserId: bigint | number
    issuerTaxProfileId: bigint | number
    billToCustomerId: bigint | number
    billToCustomerTaxProfileId: bigint | number
    shipToCustomerTaxProfileId?: bigint | number | null
    currency?: string
    subtotal: Decimal | DecimalJsLike | number | string
    taxTotal: Decimal | DecimalJsLike | number | string
    grandTotal: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    InvoiceItem?: InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInput
    UserInvoice?: UserInvoiceUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutShipToCustomerInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutShipToCustomerInput, InvoiceUncheckedCreateWithoutShipToCustomerInput>
  }

  export type InvoiceCreateManyShipToCustomerInputEnvelope = {
    data: InvoiceCreateManyShipToCustomerInput | InvoiceCreateManyShipToCustomerInput[]
    skipDuplicates?: boolean
  }

  export type CustomerTaxProfileUpsertWithWhereUniqueWithoutCustomerInput = {
    where: CustomerTaxProfileWhereUniqueInput
    update: XOR<CustomerTaxProfileUpdateWithoutCustomerInput, CustomerTaxProfileUncheckedUpdateWithoutCustomerInput>
    create: XOR<CustomerTaxProfileCreateWithoutCustomerInput, CustomerTaxProfileUncheckedCreateWithoutCustomerInput>
  }

  export type CustomerTaxProfileUpdateWithWhereUniqueWithoutCustomerInput = {
    where: CustomerTaxProfileWhereUniqueInput
    data: XOR<CustomerTaxProfileUpdateWithoutCustomerInput, CustomerTaxProfileUncheckedUpdateWithoutCustomerInput>
  }

  export type CustomerTaxProfileUpdateManyWithWhereWithoutCustomerInput = {
    where: CustomerTaxProfileScalarWhereInput
    data: XOR<CustomerTaxProfileUpdateManyMutationInput, CustomerTaxProfileUncheckedUpdateManyWithoutCustomerInput>
  }

  export type CustomerTaxProfileScalarWhereInput = {
    AND?: CustomerTaxProfileScalarWhereInput | CustomerTaxProfileScalarWhereInput[]
    OR?: CustomerTaxProfileScalarWhereInput[]
    NOT?: CustomerTaxProfileScalarWhereInput | CustomerTaxProfileScalarWhereInput[]
    id?: BigIntFilter<"CustomerTaxProfile"> | bigint | number
    customerId?: BigIntFilter<"CustomerTaxProfile"> | bigint | number
    type?: EnumTaxTypeFilter<"CustomerTaxProfile"> | $Enums.TaxType
    legalName?: StringFilter<"CustomerTaxProfile"> | string
    fiscalCode?: StringNullableFilter<"CustomerTaxProfile"> | string | null
    vatNumber?: StringNullableFilter<"CustomerTaxProfile"> | string | null
    addressLine1?: StringFilter<"CustomerTaxProfile"> | string
    addressLine2?: StringNullableFilter<"CustomerTaxProfile"> | string | null
    city?: StringFilter<"CustomerTaxProfile"> | string
    province?: StringNullableFilter<"CustomerTaxProfile"> | string | null
    postalCode?: StringFilter<"CustomerTaxProfile"> | string
    countryCode?: StringFilter<"CustomerTaxProfile"> | string
    isActive?: BoolFilter<"CustomerTaxProfile"> | boolean
    createdAt?: DateTimeFilter<"CustomerTaxProfile"> | Date | string
    updatedAt?: DateTimeFilter<"CustomerTaxProfile"> | Date | string
  }

  export type InvoiceUpsertWithWhereUniqueWithoutBillToCustomerInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutBillToCustomerInput, InvoiceUncheckedUpdateWithoutBillToCustomerInput>
    create: XOR<InvoiceCreateWithoutBillToCustomerInput, InvoiceUncheckedCreateWithoutBillToCustomerInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutBillToCustomerInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutBillToCustomerInput, InvoiceUncheckedUpdateWithoutBillToCustomerInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutBillToCustomerInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutBillToCustomerInput>
  }

  export type InvoiceUpsertWithWhereUniqueWithoutShipToCustomerInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutShipToCustomerInput, InvoiceUncheckedUpdateWithoutShipToCustomerInput>
    create: XOR<InvoiceCreateWithoutShipToCustomerInput, InvoiceUncheckedCreateWithoutShipToCustomerInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutShipToCustomerInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutShipToCustomerInput, InvoiceUncheckedUpdateWithoutShipToCustomerInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutShipToCustomerInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutShipToCustomerInput>
  }

  export type CustomerCreateWithoutTaxProfilesInput = {
    id?: bigint | number
    email: string
    phone?: string | null
    firstName: string
    lastName: string
    isEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    billedInvoices?: InvoiceCreateNestedManyWithoutBillToCustomerInput
    shippedInvoices?: InvoiceCreateNestedManyWithoutShipToCustomerInput
  }

  export type CustomerUncheckedCreateWithoutTaxProfilesInput = {
    id?: bigint | number
    email: string
    phone?: string | null
    firstName: string
    lastName: string
    isEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    billedInvoices?: InvoiceUncheckedCreateNestedManyWithoutBillToCustomerInput
    shippedInvoices?: InvoiceUncheckedCreateNestedManyWithoutShipToCustomerInput
  }

  export type CustomerCreateOrConnectWithoutTaxProfilesInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutTaxProfilesInput, CustomerUncheckedCreateWithoutTaxProfilesInput>
  }

  export type InvoiceCreateWithoutBillToCustomerTaxProfileInput = {
    id?: bigint | number
    invoiceNumber: bigint | number
    issueDate: Date | string
    dueDate: Date | string
    status?: $Enums.InvoiceStatus
    currency?: string
    subtotal: Decimal | DecimalJsLike | number | string
    taxTotal: Decimal | DecimalJsLike | number | string
    grandTotal: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    issuerUser: UserCreateNestedOneWithoutInvoicesInput
    issuerTaxProfile: UserTaxProfileCreateNestedOneWithoutInvoiceInput
    billToCustomer: CustomerCreateNestedOneWithoutBilledInvoicesInput
    shipToCustomer?: CustomerCreateNestedOneWithoutShippedInvoicesInput
    shipToCustomerTaxProfile?: CustomerTaxProfileCreateNestedOneWithoutShipInvoiceInput
    InvoiceItem?: InvoiceItemCreateNestedManyWithoutInvoiceInput
    UserInvoice?: UserInvoiceCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutBillToCustomerTaxProfileInput = {
    id?: bigint | number
    invoiceNumber: bigint | number
    issueDate: Date | string
    dueDate: Date | string
    status?: $Enums.InvoiceStatus
    issuerUserId: bigint | number
    issuerTaxProfileId: bigint | number
    billToCustomerId: bigint | number
    shipToCustomerId?: bigint | number | null
    shipToCustomerTaxProfileId?: bigint | number | null
    currency?: string
    subtotal: Decimal | DecimalJsLike | number | string
    taxTotal: Decimal | DecimalJsLike | number | string
    grandTotal: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    InvoiceItem?: InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInput
    UserInvoice?: UserInvoiceUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutBillToCustomerTaxProfileInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutBillToCustomerTaxProfileInput, InvoiceUncheckedCreateWithoutBillToCustomerTaxProfileInput>
  }

  export type InvoiceCreateManyBillToCustomerTaxProfileInputEnvelope = {
    data: InvoiceCreateManyBillToCustomerTaxProfileInput | InvoiceCreateManyBillToCustomerTaxProfileInput[]
    skipDuplicates?: boolean
  }

  export type InvoiceCreateWithoutShipToCustomerTaxProfileInput = {
    id?: bigint | number
    invoiceNumber: bigint | number
    issueDate: Date | string
    dueDate: Date | string
    status?: $Enums.InvoiceStatus
    currency?: string
    subtotal: Decimal | DecimalJsLike | number | string
    taxTotal: Decimal | DecimalJsLike | number | string
    grandTotal: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    issuerUser: UserCreateNestedOneWithoutInvoicesInput
    issuerTaxProfile: UserTaxProfileCreateNestedOneWithoutInvoiceInput
    billToCustomer: CustomerCreateNestedOneWithoutBilledInvoicesInput
    billToCustomerTaxProfile: CustomerTaxProfileCreateNestedOneWithoutBillInvoiceInput
    shipToCustomer?: CustomerCreateNestedOneWithoutShippedInvoicesInput
    InvoiceItem?: InvoiceItemCreateNestedManyWithoutInvoiceInput
    UserInvoice?: UserInvoiceCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutShipToCustomerTaxProfileInput = {
    id?: bigint | number
    invoiceNumber: bigint | number
    issueDate: Date | string
    dueDate: Date | string
    status?: $Enums.InvoiceStatus
    issuerUserId: bigint | number
    issuerTaxProfileId: bigint | number
    billToCustomerId: bigint | number
    billToCustomerTaxProfileId: bigint | number
    shipToCustomerId?: bigint | number | null
    currency?: string
    subtotal: Decimal | DecimalJsLike | number | string
    taxTotal: Decimal | DecimalJsLike | number | string
    grandTotal: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    InvoiceItem?: InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInput
    UserInvoice?: UserInvoiceUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutShipToCustomerTaxProfileInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutShipToCustomerTaxProfileInput, InvoiceUncheckedCreateWithoutShipToCustomerTaxProfileInput>
  }

  export type InvoiceCreateManyShipToCustomerTaxProfileInputEnvelope = {
    data: InvoiceCreateManyShipToCustomerTaxProfileInput | InvoiceCreateManyShipToCustomerTaxProfileInput[]
    skipDuplicates?: boolean
  }

  export type CustomerUpsertWithoutTaxProfilesInput = {
    update: XOR<CustomerUpdateWithoutTaxProfilesInput, CustomerUncheckedUpdateWithoutTaxProfilesInput>
    create: XOR<CustomerCreateWithoutTaxProfilesInput, CustomerUncheckedCreateWithoutTaxProfilesInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutTaxProfilesInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutTaxProfilesInput, CustomerUncheckedUpdateWithoutTaxProfilesInput>
  }

  export type CustomerUpdateWithoutTaxProfilesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billedInvoices?: InvoiceUpdateManyWithoutBillToCustomerNestedInput
    shippedInvoices?: InvoiceUpdateManyWithoutShipToCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutTaxProfilesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billedInvoices?: InvoiceUncheckedUpdateManyWithoutBillToCustomerNestedInput
    shippedInvoices?: InvoiceUncheckedUpdateManyWithoutShipToCustomerNestedInput
  }

  export type InvoiceUpsertWithWhereUniqueWithoutBillToCustomerTaxProfileInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutBillToCustomerTaxProfileInput, InvoiceUncheckedUpdateWithoutBillToCustomerTaxProfileInput>
    create: XOR<InvoiceCreateWithoutBillToCustomerTaxProfileInput, InvoiceUncheckedCreateWithoutBillToCustomerTaxProfileInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutBillToCustomerTaxProfileInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutBillToCustomerTaxProfileInput, InvoiceUncheckedUpdateWithoutBillToCustomerTaxProfileInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutBillToCustomerTaxProfileInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutBillToCustomerTaxProfileInput>
  }

  export type InvoiceUpsertWithWhereUniqueWithoutShipToCustomerTaxProfileInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutShipToCustomerTaxProfileInput, InvoiceUncheckedUpdateWithoutShipToCustomerTaxProfileInput>
    create: XOR<InvoiceCreateWithoutShipToCustomerTaxProfileInput, InvoiceUncheckedCreateWithoutShipToCustomerTaxProfileInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutShipToCustomerTaxProfileInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutShipToCustomerTaxProfileInput, InvoiceUncheckedUpdateWithoutShipToCustomerTaxProfileInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutShipToCustomerTaxProfileInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutShipToCustomerTaxProfileInput>
  }

  export type UserCreateWithoutInvoicesInput = {
    id?: bigint | number
    email: string
    phone?: string | null
    passwordHash: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    taxProfile?: UserTaxProfileCreateNestedOneWithoutUserInput
    shares?: UserInvoiceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInvoicesInput = {
    id?: bigint | number
    email: string
    phone?: string | null
    passwordHash: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    taxProfile?: UserTaxProfileUncheckedCreateNestedOneWithoutUserInput
    shares?: UserInvoiceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInvoicesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInvoicesInput, UserUncheckedCreateWithoutInvoicesInput>
  }

  export type UserTaxProfileCreateWithoutInvoiceInput = {
    id?: bigint | number
    type: $Enums.TaxType
    legalName: string
    fiscalCode?: string | null
    vatNumber?: string | null
    addressLine1: string
    addressLine2?: string | null
    city: string
    province?: string | null
    postalCode: string
    countryCode: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTaxProfileInput
  }

  export type UserTaxProfileUncheckedCreateWithoutInvoiceInput = {
    id?: bigint | number
    userId: bigint | number
    type: $Enums.TaxType
    legalName: string
    fiscalCode?: string | null
    vatNumber?: string | null
    addressLine1: string
    addressLine2?: string | null
    city: string
    province?: string | null
    postalCode: string
    countryCode: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserTaxProfileCreateOrConnectWithoutInvoiceInput = {
    where: UserTaxProfileWhereUniqueInput
    create: XOR<UserTaxProfileCreateWithoutInvoiceInput, UserTaxProfileUncheckedCreateWithoutInvoiceInput>
  }

  export type CustomerCreateWithoutBilledInvoicesInput = {
    id?: bigint | number
    email: string
    phone?: string | null
    firstName: string
    lastName: string
    isEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    taxProfiles?: CustomerTaxProfileCreateNestedManyWithoutCustomerInput
    shippedInvoices?: InvoiceCreateNestedManyWithoutShipToCustomerInput
  }

  export type CustomerUncheckedCreateWithoutBilledInvoicesInput = {
    id?: bigint | number
    email: string
    phone?: string | null
    firstName: string
    lastName: string
    isEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    taxProfiles?: CustomerTaxProfileUncheckedCreateNestedManyWithoutCustomerInput
    shippedInvoices?: InvoiceUncheckedCreateNestedManyWithoutShipToCustomerInput
  }

  export type CustomerCreateOrConnectWithoutBilledInvoicesInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutBilledInvoicesInput, CustomerUncheckedCreateWithoutBilledInvoicesInput>
  }

  export type CustomerTaxProfileCreateWithoutBillInvoiceInput = {
    id?: bigint | number
    type: $Enums.TaxType
    legalName: string
    fiscalCode?: string | null
    vatNumber?: string | null
    addressLine1: string
    addressLine2?: string | null
    city: string
    province?: string | null
    postalCode: string
    countryCode: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutTaxProfilesInput
    ShipInvoice?: InvoiceCreateNestedManyWithoutShipToCustomerTaxProfileInput
  }

  export type CustomerTaxProfileUncheckedCreateWithoutBillInvoiceInput = {
    id?: bigint | number
    customerId: bigint | number
    type: $Enums.TaxType
    legalName: string
    fiscalCode?: string | null
    vatNumber?: string | null
    addressLine1: string
    addressLine2?: string | null
    city: string
    province?: string | null
    postalCode: string
    countryCode: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    ShipInvoice?: InvoiceUncheckedCreateNestedManyWithoutShipToCustomerTaxProfileInput
  }

  export type CustomerTaxProfileCreateOrConnectWithoutBillInvoiceInput = {
    where: CustomerTaxProfileWhereUniqueInput
    create: XOR<CustomerTaxProfileCreateWithoutBillInvoiceInput, CustomerTaxProfileUncheckedCreateWithoutBillInvoiceInput>
  }

  export type CustomerCreateWithoutShippedInvoicesInput = {
    id?: bigint | number
    email: string
    phone?: string | null
    firstName: string
    lastName: string
    isEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    taxProfiles?: CustomerTaxProfileCreateNestedManyWithoutCustomerInput
    billedInvoices?: InvoiceCreateNestedManyWithoutBillToCustomerInput
  }

  export type CustomerUncheckedCreateWithoutShippedInvoicesInput = {
    id?: bigint | number
    email: string
    phone?: string | null
    firstName: string
    lastName: string
    isEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    taxProfiles?: CustomerTaxProfileUncheckedCreateNestedManyWithoutCustomerInput
    billedInvoices?: InvoiceUncheckedCreateNestedManyWithoutBillToCustomerInput
  }

  export type CustomerCreateOrConnectWithoutShippedInvoicesInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutShippedInvoicesInput, CustomerUncheckedCreateWithoutShippedInvoicesInput>
  }

  export type CustomerTaxProfileCreateWithoutShipInvoiceInput = {
    id?: bigint | number
    type: $Enums.TaxType
    legalName: string
    fiscalCode?: string | null
    vatNumber?: string | null
    addressLine1: string
    addressLine2?: string | null
    city: string
    province?: string | null
    postalCode: string
    countryCode: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutTaxProfilesInput
    BillInvoice?: InvoiceCreateNestedManyWithoutBillToCustomerTaxProfileInput
  }

  export type CustomerTaxProfileUncheckedCreateWithoutShipInvoiceInput = {
    id?: bigint | number
    customerId: bigint | number
    type: $Enums.TaxType
    legalName: string
    fiscalCode?: string | null
    vatNumber?: string | null
    addressLine1: string
    addressLine2?: string | null
    city: string
    province?: string | null
    postalCode: string
    countryCode: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    BillInvoice?: InvoiceUncheckedCreateNestedManyWithoutBillToCustomerTaxProfileInput
  }

  export type CustomerTaxProfileCreateOrConnectWithoutShipInvoiceInput = {
    where: CustomerTaxProfileWhereUniqueInput
    create: XOR<CustomerTaxProfileCreateWithoutShipInvoiceInput, CustomerTaxProfileUncheckedCreateWithoutShipInvoiceInput>
  }

  export type InvoiceItemCreateWithoutInvoiceInput = {
    id?: bigint | number
    codProduct?: string | null
    description: string
    quantity: Decimal | DecimalJsLike | number | string
    unitPrice: Decimal | DecimalJsLike | number | string
    taxRate: Decimal | DecimalJsLike | number | string
    lineTotal: Decimal | DecimalJsLike | number | string
  }

  export type InvoiceItemUncheckedCreateWithoutInvoiceInput = {
    id?: bigint | number
    codProduct?: string | null
    description: string
    quantity: Decimal | DecimalJsLike | number | string
    unitPrice: Decimal | DecimalJsLike | number | string
    taxRate: Decimal | DecimalJsLike | number | string
    lineTotal: Decimal | DecimalJsLike | number | string
  }

  export type InvoiceItemCreateOrConnectWithoutInvoiceInput = {
    where: InvoiceItemWhereUniqueInput
    create: XOR<InvoiceItemCreateWithoutInvoiceInput, InvoiceItemUncheckedCreateWithoutInvoiceInput>
  }

  export type InvoiceItemCreateManyInvoiceInputEnvelope = {
    data: InvoiceItemCreateManyInvoiceInput | InvoiceItemCreateManyInvoiceInput[]
    skipDuplicates?: boolean
  }

  export type UserInvoiceCreateWithoutInvoiceInput = {
    id?: bigint | number
    dateLinked?: Date | string
    firstView?: Date | string | null
    lastView?: Date | string | null
    user: UserCreateNestedOneWithoutSharesInput
  }

  export type UserInvoiceUncheckedCreateWithoutInvoiceInput = {
    id?: bigint | number
    userId: bigint | number
    dateLinked?: Date | string
    firstView?: Date | string | null
    lastView?: Date | string | null
  }

  export type UserInvoiceCreateOrConnectWithoutInvoiceInput = {
    where: UserInvoiceWhereUniqueInput
    create: XOR<UserInvoiceCreateWithoutInvoiceInput, UserInvoiceUncheckedCreateWithoutInvoiceInput>
  }

  export type UserInvoiceCreateManyInvoiceInputEnvelope = {
    data: UserInvoiceCreateManyInvoiceInput | UserInvoiceCreateManyInvoiceInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutInvoicesInput = {
    update: XOR<UserUpdateWithoutInvoicesInput, UserUncheckedUpdateWithoutInvoicesInput>
    create: XOR<UserCreateWithoutInvoicesInput, UserUncheckedCreateWithoutInvoicesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInvoicesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInvoicesInput, UserUncheckedUpdateWithoutInvoicesInput>
  }

  export type UserUpdateWithoutInvoicesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxProfile?: UserTaxProfileUpdateOneWithoutUserNestedInput
    shares?: UserInvoiceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInvoicesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxProfile?: UserTaxProfileUncheckedUpdateOneWithoutUserNestedInput
    shares?: UserInvoiceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserTaxProfileUpsertWithoutInvoiceInput = {
    update: XOR<UserTaxProfileUpdateWithoutInvoiceInput, UserTaxProfileUncheckedUpdateWithoutInvoiceInput>
    create: XOR<UserTaxProfileCreateWithoutInvoiceInput, UserTaxProfileUncheckedCreateWithoutInvoiceInput>
    where?: UserTaxProfileWhereInput
  }

  export type UserTaxProfileUpdateToOneWithWhereWithoutInvoiceInput = {
    where?: UserTaxProfileWhereInput
    data: XOR<UserTaxProfileUpdateWithoutInvoiceInput, UserTaxProfileUncheckedUpdateWithoutInvoiceInput>
  }

  export type UserTaxProfileUpdateWithoutInvoiceInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTaxTypeFieldUpdateOperationsInput | $Enums.TaxType
    legalName?: StringFieldUpdateOperationsInput | string
    fiscalCode?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTaxProfileNestedInput
  }

  export type UserTaxProfileUncheckedUpdateWithoutInvoiceInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTaxTypeFieldUpdateOperationsInput | $Enums.TaxType
    legalName?: StringFieldUpdateOperationsInput | string
    fiscalCode?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerUpsertWithoutBilledInvoicesInput = {
    update: XOR<CustomerUpdateWithoutBilledInvoicesInput, CustomerUncheckedUpdateWithoutBilledInvoicesInput>
    create: XOR<CustomerCreateWithoutBilledInvoicesInput, CustomerUncheckedCreateWithoutBilledInvoicesInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutBilledInvoicesInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutBilledInvoicesInput, CustomerUncheckedUpdateWithoutBilledInvoicesInput>
  }

  export type CustomerUpdateWithoutBilledInvoicesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxProfiles?: CustomerTaxProfileUpdateManyWithoutCustomerNestedInput
    shippedInvoices?: InvoiceUpdateManyWithoutShipToCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutBilledInvoicesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxProfiles?: CustomerTaxProfileUncheckedUpdateManyWithoutCustomerNestedInput
    shippedInvoices?: InvoiceUncheckedUpdateManyWithoutShipToCustomerNestedInput
  }

  export type CustomerTaxProfileUpsertWithoutBillInvoiceInput = {
    update: XOR<CustomerTaxProfileUpdateWithoutBillInvoiceInput, CustomerTaxProfileUncheckedUpdateWithoutBillInvoiceInput>
    create: XOR<CustomerTaxProfileCreateWithoutBillInvoiceInput, CustomerTaxProfileUncheckedCreateWithoutBillInvoiceInput>
    where?: CustomerTaxProfileWhereInput
  }

  export type CustomerTaxProfileUpdateToOneWithWhereWithoutBillInvoiceInput = {
    where?: CustomerTaxProfileWhereInput
    data: XOR<CustomerTaxProfileUpdateWithoutBillInvoiceInput, CustomerTaxProfileUncheckedUpdateWithoutBillInvoiceInput>
  }

  export type CustomerTaxProfileUpdateWithoutBillInvoiceInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTaxTypeFieldUpdateOperationsInput | $Enums.TaxType
    legalName?: StringFieldUpdateOperationsInput | string
    fiscalCode?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutTaxProfilesNestedInput
    ShipInvoice?: InvoiceUpdateManyWithoutShipToCustomerTaxProfileNestedInput
  }

  export type CustomerTaxProfileUncheckedUpdateWithoutBillInvoiceInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    customerId?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTaxTypeFieldUpdateOperationsInput | $Enums.TaxType
    legalName?: StringFieldUpdateOperationsInput | string
    fiscalCode?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ShipInvoice?: InvoiceUncheckedUpdateManyWithoutShipToCustomerTaxProfileNestedInput
  }

  export type CustomerUpsertWithoutShippedInvoicesInput = {
    update: XOR<CustomerUpdateWithoutShippedInvoicesInput, CustomerUncheckedUpdateWithoutShippedInvoicesInput>
    create: XOR<CustomerCreateWithoutShippedInvoicesInput, CustomerUncheckedCreateWithoutShippedInvoicesInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutShippedInvoicesInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutShippedInvoicesInput, CustomerUncheckedUpdateWithoutShippedInvoicesInput>
  }

  export type CustomerUpdateWithoutShippedInvoicesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxProfiles?: CustomerTaxProfileUpdateManyWithoutCustomerNestedInput
    billedInvoices?: InvoiceUpdateManyWithoutBillToCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutShippedInvoicesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxProfiles?: CustomerTaxProfileUncheckedUpdateManyWithoutCustomerNestedInput
    billedInvoices?: InvoiceUncheckedUpdateManyWithoutBillToCustomerNestedInput
  }

  export type CustomerTaxProfileUpsertWithoutShipInvoiceInput = {
    update: XOR<CustomerTaxProfileUpdateWithoutShipInvoiceInput, CustomerTaxProfileUncheckedUpdateWithoutShipInvoiceInput>
    create: XOR<CustomerTaxProfileCreateWithoutShipInvoiceInput, CustomerTaxProfileUncheckedCreateWithoutShipInvoiceInput>
    where?: CustomerTaxProfileWhereInput
  }

  export type CustomerTaxProfileUpdateToOneWithWhereWithoutShipInvoiceInput = {
    where?: CustomerTaxProfileWhereInput
    data: XOR<CustomerTaxProfileUpdateWithoutShipInvoiceInput, CustomerTaxProfileUncheckedUpdateWithoutShipInvoiceInput>
  }

  export type CustomerTaxProfileUpdateWithoutShipInvoiceInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTaxTypeFieldUpdateOperationsInput | $Enums.TaxType
    legalName?: StringFieldUpdateOperationsInput | string
    fiscalCode?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutTaxProfilesNestedInput
    BillInvoice?: InvoiceUpdateManyWithoutBillToCustomerTaxProfileNestedInput
  }

  export type CustomerTaxProfileUncheckedUpdateWithoutShipInvoiceInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    customerId?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTaxTypeFieldUpdateOperationsInput | $Enums.TaxType
    legalName?: StringFieldUpdateOperationsInput | string
    fiscalCode?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    BillInvoice?: InvoiceUncheckedUpdateManyWithoutBillToCustomerTaxProfileNestedInput
  }

  export type InvoiceItemUpsertWithWhereUniqueWithoutInvoiceInput = {
    where: InvoiceItemWhereUniqueInput
    update: XOR<InvoiceItemUpdateWithoutInvoiceInput, InvoiceItemUncheckedUpdateWithoutInvoiceInput>
    create: XOR<InvoiceItemCreateWithoutInvoiceInput, InvoiceItemUncheckedCreateWithoutInvoiceInput>
  }

  export type InvoiceItemUpdateWithWhereUniqueWithoutInvoiceInput = {
    where: InvoiceItemWhereUniqueInput
    data: XOR<InvoiceItemUpdateWithoutInvoiceInput, InvoiceItemUncheckedUpdateWithoutInvoiceInput>
  }

  export type InvoiceItemUpdateManyWithWhereWithoutInvoiceInput = {
    where: InvoiceItemScalarWhereInput
    data: XOR<InvoiceItemUpdateManyMutationInput, InvoiceItemUncheckedUpdateManyWithoutInvoiceInput>
  }

  export type InvoiceItemScalarWhereInput = {
    AND?: InvoiceItemScalarWhereInput | InvoiceItemScalarWhereInput[]
    OR?: InvoiceItemScalarWhereInput[]
    NOT?: InvoiceItemScalarWhereInput | InvoiceItemScalarWhereInput[]
    id?: BigIntFilter<"InvoiceItem"> | bigint | number
    invoiceId?: BigIntFilter<"InvoiceItem"> | bigint | number
    codProduct?: StringNullableFilter<"InvoiceItem"> | string | null
    description?: StringFilter<"InvoiceItem"> | string
    quantity?: DecimalFilter<"InvoiceItem"> | Decimal | DecimalJsLike | number | string
    unitPrice?: DecimalFilter<"InvoiceItem"> | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFilter<"InvoiceItem"> | Decimal | DecimalJsLike | number | string
    lineTotal?: DecimalFilter<"InvoiceItem"> | Decimal | DecimalJsLike | number | string
  }

  export type UserInvoiceUpsertWithWhereUniqueWithoutInvoiceInput = {
    where: UserInvoiceWhereUniqueInput
    update: XOR<UserInvoiceUpdateWithoutInvoiceInput, UserInvoiceUncheckedUpdateWithoutInvoiceInput>
    create: XOR<UserInvoiceCreateWithoutInvoiceInput, UserInvoiceUncheckedCreateWithoutInvoiceInput>
  }

  export type UserInvoiceUpdateWithWhereUniqueWithoutInvoiceInput = {
    where: UserInvoiceWhereUniqueInput
    data: XOR<UserInvoiceUpdateWithoutInvoiceInput, UserInvoiceUncheckedUpdateWithoutInvoiceInput>
  }

  export type UserInvoiceUpdateManyWithWhereWithoutInvoiceInput = {
    where: UserInvoiceScalarWhereInput
    data: XOR<UserInvoiceUpdateManyMutationInput, UserInvoiceUncheckedUpdateManyWithoutInvoiceInput>
  }

  export type InvoiceCreateWithoutInvoiceItemInput = {
    id?: bigint | number
    invoiceNumber: bigint | number
    issueDate: Date | string
    dueDate: Date | string
    status?: $Enums.InvoiceStatus
    currency?: string
    subtotal: Decimal | DecimalJsLike | number | string
    taxTotal: Decimal | DecimalJsLike | number | string
    grandTotal: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    issuerUser: UserCreateNestedOneWithoutInvoicesInput
    issuerTaxProfile: UserTaxProfileCreateNestedOneWithoutInvoiceInput
    billToCustomer: CustomerCreateNestedOneWithoutBilledInvoicesInput
    billToCustomerTaxProfile: CustomerTaxProfileCreateNestedOneWithoutBillInvoiceInput
    shipToCustomer?: CustomerCreateNestedOneWithoutShippedInvoicesInput
    shipToCustomerTaxProfile?: CustomerTaxProfileCreateNestedOneWithoutShipInvoiceInput
    UserInvoice?: UserInvoiceCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutInvoiceItemInput = {
    id?: bigint | number
    invoiceNumber: bigint | number
    issueDate: Date | string
    dueDate: Date | string
    status?: $Enums.InvoiceStatus
    issuerUserId: bigint | number
    issuerTaxProfileId: bigint | number
    billToCustomerId: bigint | number
    billToCustomerTaxProfileId: bigint | number
    shipToCustomerId?: bigint | number | null
    shipToCustomerTaxProfileId?: bigint | number | null
    currency?: string
    subtotal: Decimal | DecimalJsLike | number | string
    taxTotal: Decimal | DecimalJsLike | number | string
    grandTotal: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    UserInvoice?: UserInvoiceUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutInvoiceItemInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutInvoiceItemInput, InvoiceUncheckedCreateWithoutInvoiceItemInput>
  }

  export type InvoiceUpsertWithoutInvoiceItemInput = {
    update: XOR<InvoiceUpdateWithoutInvoiceItemInput, InvoiceUncheckedUpdateWithoutInvoiceItemInput>
    create: XOR<InvoiceCreateWithoutInvoiceItemInput, InvoiceUncheckedCreateWithoutInvoiceItemInput>
    where?: InvoiceWhereInput
  }

  export type InvoiceUpdateToOneWithWhereWithoutInvoiceItemInput = {
    where?: InvoiceWhereInput
    data: XOR<InvoiceUpdateWithoutInvoiceItemInput, InvoiceUncheckedUpdateWithoutInvoiceItemInput>
  }

  export type InvoiceUpdateWithoutInvoiceItemInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceNumber?: BigIntFieldUpdateOperationsInput | bigint | number
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    currency?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    grandTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    issuerUser?: UserUpdateOneRequiredWithoutInvoicesNestedInput
    issuerTaxProfile?: UserTaxProfileUpdateOneRequiredWithoutInvoiceNestedInput
    billToCustomer?: CustomerUpdateOneRequiredWithoutBilledInvoicesNestedInput
    billToCustomerTaxProfile?: CustomerTaxProfileUpdateOneRequiredWithoutBillInvoiceNestedInput
    shipToCustomer?: CustomerUpdateOneWithoutShippedInvoicesNestedInput
    shipToCustomerTaxProfile?: CustomerTaxProfileUpdateOneWithoutShipInvoiceNestedInput
    UserInvoice?: UserInvoiceUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutInvoiceItemInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceNumber?: BigIntFieldUpdateOperationsInput | bigint | number
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    issuerUserId?: BigIntFieldUpdateOperationsInput | bigint | number
    issuerTaxProfileId?: BigIntFieldUpdateOperationsInput | bigint | number
    billToCustomerId?: BigIntFieldUpdateOperationsInput | bigint | number
    billToCustomerTaxProfileId?: BigIntFieldUpdateOperationsInput | bigint | number
    shipToCustomerId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    shipToCustomerTaxProfileId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    currency?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    grandTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UserInvoice?: UserInvoiceUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type UserCreateWithoutSharesInput = {
    id?: bigint | number
    email: string
    phone?: string | null
    passwordHash: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    taxProfile?: UserTaxProfileCreateNestedOneWithoutUserInput
    invoices?: InvoiceCreateNestedManyWithoutIssuerUserInput
  }

  export type UserUncheckedCreateWithoutSharesInput = {
    id?: bigint | number
    email: string
    phone?: string | null
    passwordHash: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    taxProfile?: UserTaxProfileUncheckedCreateNestedOneWithoutUserInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutIssuerUserInput
  }

  export type UserCreateOrConnectWithoutSharesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSharesInput, UserUncheckedCreateWithoutSharesInput>
  }

  export type InvoiceCreateWithoutUserInvoiceInput = {
    id?: bigint | number
    invoiceNumber: bigint | number
    issueDate: Date | string
    dueDate: Date | string
    status?: $Enums.InvoiceStatus
    currency?: string
    subtotal: Decimal | DecimalJsLike | number | string
    taxTotal: Decimal | DecimalJsLike | number | string
    grandTotal: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    issuerUser: UserCreateNestedOneWithoutInvoicesInput
    issuerTaxProfile: UserTaxProfileCreateNestedOneWithoutInvoiceInput
    billToCustomer: CustomerCreateNestedOneWithoutBilledInvoicesInput
    billToCustomerTaxProfile: CustomerTaxProfileCreateNestedOneWithoutBillInvoiceInput
    shipToCustomer?: CustomerCreateNestedOneWithoutShippedInvoicesInput
    shipToCustomerTaxProfile?: CustomerTaxProfileCreateNestedOneWithoutShipInvoiceInput
    InvoiceItem?: InvoiceItemCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutUserInvoiceInput = {
    id?: bigint | number
    invoiceNumber: bigint | number
    issueDate: Date | string
    dueDate: Date | string
    status?: $Enums.InvoiceStatus
    issuerUserId: bigint | number
    issuerTaxProfileId: bigint | number
    billToCustomerId: bigint | number
    billToCustomerTaxProfileId: bigint | number
    shipToCustomerId?: bigint | number | null
    shipToCustomerTaxProfileId?: bigint | number | null
    currency?: string
    subtotal: Decimal | DecimalJsLike | number | string
    taxTotal: Decimal | DecimalJsLike | number | string
    grandTotal: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    InvoiceItem?: InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutUserInvoiceInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutUserInvoiceInput, InvoiceUncheckedCreateWithoutUserInvoiceInput>
  }

  export type UserUpsertWithoutSharesInput = {
    update: XOR<UserUpdateWithoutSharesInput, UserUncheckedUpdateWithoutSharesInput>
    create: XOR<UserCreateWithoutSharesInput, UserUncheckedCreateWithoutSharesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSharesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSharesInput, UserUncheckedUpdateWithoutSharesInput>
  }

  export type UserUpdateWithoutSharesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxProfile?: UserTaxProfileUpdateOneWithoutUserNestedInput
    invoices?: InvoiceUpdateManyWithoutIssuerUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSharesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxProfile?: UserTaxProfileUncheckedUpdateOneWithoutUserNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutIssuerUserNestedInput
  }

  export type InvoiceUpsertWithoutUserInvoiceInput = {
    update: XOR<InvoiceUpdateWithoutUserInvoiceInput, InvoiceUncheckedUpdateWithoutUserInvoiceInput>
    create: XOR<InvoiceCreateWithoutUserInvoiceInput, InvoiceUncheckedCreateWithoutUserInvoiceInput>
    where?: InvoiceWhereInput
  }

  export type InvoiceUpdateToOneWithWhereWithoutUserInvoiceInput = {
    where?: InvoiceWhereInput
    data: XOR<InvoiceUpdateWithoutUserInvoiceInput, InvoiceUncheckedUpdateWithoutUserInvoiceInput>
  }

  export type InvoiceUpdateWithoutUserInvoiceInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceNumber?: BigIntFieldUpdateOperationsInput | bigint | number
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    currency?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    grandTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    issuerUser?: UserUpdateOneRequiredWithoutInvoicesNestedInput
    issuerTaxProfile?: UserTaxProfileUpdateOneRequiredWithoutInvoiceNestedInput
    billToCustomer?: CustomerUpdateOneRequiredWithoutBilledInvoicesNestedInput
    billToCustomerTaxProfile?: CustomerTaxProfileUpdateOneRequiredWithoutBillInvoiceNestedInput
    shipToCustomer?: CustomerUpdateOneWithoutShippedInvoicesNestedInput
    shipToCustomerTaxProfile?: CustomerTaxProfileUpdateOneWithoutShipInvoiceNestedInput
    InvoiceItem?: InvoiceItemUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutUserInvoiceInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceNumber?: BigIntFieldUpdateOperationsInput | bigint | number
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    issuerUserId?: BigIntFieldUpdateOperationsInput | bigint | number
    issuerTaxProfileId?: BigIntFieldUpdateOperationsInput | bigint | number
    billToCustomerId?: BigIntFieldUpdateOperationsInput | bigint | number
    billToCustomerTaxProfileId?: BigIntFieldUpdateOperationsInput | bigint | number
    shipToCustomerId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    shipToCustomerTaxProfileId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    currency?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    grandTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InvoiceItem?: InvoiceItemUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceCreateManyIssuerUserInput = {
    id?: bigint | number
    invoiceNumber: bigint | number
    issueDate: Date | string
    dueDate: Date | string
    status?: $Enums.InvoiceStatus
    issuerTaxProfileId: bigint | number
    billToCustomerId: bigint | number
    billToCustomerTaxProfileId: bigint | number
    shipToCustomerId?: bigint | number | null
    shipToCustomerTaxProfileId?: bigint | number | null
    currency?: string
    subtotal: Decimal | DecimalJsLike | number | string
    taxTotal: Decimal | DecimalJsLike | number | string
    grandTotal: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserInvoiceCreateManyUserInput = {
    id?: bigint | number
    invoiceId: bigint | number
    dateLinked?: Date | string
    firstView?: Date | string | null
    lastView?: Date | string | null
  }

  export type InvoiceUpdateWithoutIssuerUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceNumber?: BigIntFieldUpdateOperationsInput | bigint | number
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    currency?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    grandTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    issuerTaxProfile?: UserTaxProfileUpdateOneRequiredWithoutInvoiceNestedInput
    billToCustomer?: CustomerUpdateOneRequiredWithoutBilledInvoicesNestedInput
    billToCustomerTaxProfile?: CustomerTaxProfileUpdateOneRequiredWithoutBillInvoiceNestedInput
    shipToCustomer?: CustomerUpdateOneWithoutShippedInvoicesNestedInput
    shipToCustomerTaxProfile?: CustomerTaxProfileUpdateOneWithoutShipInvoiceNestedInput
    InvoiceItem?: InvoiceItemUpdateManyWithoutInvoiceNestedInput
    UserInvoice?: UserInvoiceUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutIssuerUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceNumber?: BigIntFieldUpdateOperationsInput | bigint | number
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    issuerTaxProfileId?: BigIntFieldUpdateOperationsInput | bigint | number
    billToCustomerId?: BigIntFieldUpdateOperationsInput | bigint | number
    billToCustomerTaxProfileId?: BigIntFieldUpdateOperationsInput | bigint | number
    shipToCustomerId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    shipToCustomerTaxProfileId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    currency?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    grandTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InvoiceItem?: InvoiceItemUncheckedUpdateManyWithoutInvoiceNestedInput
    UserInvoice?: UserInvoiceUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateManyWithoutIssuerUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceNumber?: BigIntFieldUpdateOperationsInput | bigint | number
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    issuerTaxProfileId?: BigIntFieldUpdateOperationsInput | bigint | number
    billToCustomerId?: BigIntFieldUpdateOperationsInput | bigint | number
    billToCustomerTaxProfileId?: BigIntFieldUpdateOperationsInput | bigint | number
    shipToCustomerId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    shipToCustomerTaxProfileId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    currency?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    grandTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserInvoiceUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    dateLinked?: DateTimeFieldUpdateOperationsInput | Date | string
    firstView?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastView?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    invoice?: InvoiceUpdateOneRequiredWithoutUserInvoiceNestedInput
  }

  export type UserInvoiceUncheckedUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceId?: BigIntFieldUpdateOperationsInput | bigint | number
    dateLinked?: DateTimeFieldUpdateOperationsInput | Date | string
    firstView?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastView?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserInvoiceUncheckedUpdateManyWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceId?: BigIntFieldUpdateOperationsInput | bigint | number
    dateLinked?: DateTimeFieldUpdateOperationsInput | Date | string
    firstView?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastView?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InvoiceCreateManyIssuerTaxProfileInput = {
    id?: bigint | number
    invoiceNumber: bigint | number
    issueDate: Date | string
    dueDate: Date | string
    status?: $Enums.InvoiceStatus
    issuerUserId: bigint | number
    billToCustomerId: bigint | number
    billToCustomerTaxProfileId: bigint | number
    shipToCustomerId?: bigint | number | null
    shipToCustomerTaxProfileId?: bigint | number | null
    currency?: string
    subtotal: Decimal | DecimalJsLike | number | string
    taxTotal: Decimal | DecimalJsLike | number | string
    grandTotal: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InvoiceUpdateWithoutIssuerTaxProfileInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceNumber?: BigIntFieldUpdateOperationsInput | bigint | number
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    currency?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    grandTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    issuerUser?: UserUpdateOneRequiredWithoutInvoicesNestedInput
    billToCustomer?: CustomerUpdateOneRequiredWithoutBilledInvoicesNestedInput
    billToCustomerTaxProfile?: CustomerTaxProfileUpdateOneRequiredWithoutBillInvoiceNestedInput
    shipToCustomer?: CustomerUpdateOneWithoutShippedInvoicesNestedInput
    shipToCustomerTaxProfile?: CustomerTaxProfileUpdateOneWithoutShipInvoiceNestedInput
    InvoiceItem?: InvoiceItemUpdateManyWithoutInvoiceNestedInput
    UserInvoice?: UserInvoiceUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutIssuerTaxProfileInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceNumber?: BigIntFieldUpdateOperationsInput | bigint | number
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    issuerUserId?: BigIntFieldUpdateOperationsInput | bigint | number
    billToCustomerId?: BigIntFieldUpdateOperationsInput | bigint | number
    billToCustomerTaxProfileId?: BigIntFieldUpdateOperationsInput | bigint | number
    shipToCustomerId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    shipToCustomerTaxProfileId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    currency?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    grandTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InvoiceItem?: InvoiceItemUncheckedUpdateManyWithoutInvoiceNestedInput
    UserInvoice?: UserInvoiceUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateManyWithoutIssuerTaxProfileInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceNumber?: BigIntFieldUpdateOperationsInput | bigint | number
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    issuerUserId?: BigIntFieldUpdateOperationsInput | bigint | number
    billToCustomerId?: BigIntFieldUpdateOperationsInput | bigint | number
    billToCustomerTaxProfileId?: BigIntFieldUpdateOperationsInput | bigint | number
    shipToCustomerId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    shipToCustomerTaxProfileId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    currency?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    grandTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerTaxProfileCreateManyCustomerInput = {
    id?: bigint | number
    type: $Enums.TaxType
    legalName: string
    fiscalCode?: string | null
    vatNumber?: string | null
    addressLine1: string
    addressLine2?: string | null
    city: string
    province?: string | null
    postalCode: string
    countryCode: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InvoiceCreateManyBillToCustomerInput = {
    id?: bigint | number
    invoiceNumber: bigint | number
    issueDate: Date | string
    dueDate: Date | string
    status?: $Enums.InvoiceStatus
    issuerUserId: bigint | number
    issuerTaxProfileId: bigint | number
    billToCustomerTaxProfileId: bigint | number
    shipToCustomerId?: bigint | number | null
    shipToCustomerTaxProfileId?: bigint | number | null
    currency?: string
    subtotal: Decimal | DecimalJsLike | number | string
    taxTotal: Decimal | DecimalJsLike | number | string
    grandTotal: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InvoiceCreateManyShipToCustomerInput = {
    id?: bigint | number
    invoiceNumber: bigint | number
    issueDate: Date | string
    dueDate: Date | string
    status?: $Enums.InvoiceStatus
    issuerUserId: bigint | number
    issuerTaxProfileId: bigint | number
    billToCustomerId: bigint | number
    billToCustomerTaxProfileId: bigint | number
    shipToCustomerTaxProfileId?: bigint | number | null
    currency?: string
    subtotal: Decimal | DecimalJsLike | number | string
    taxTotal: Decimal | DecimalJsLike | number | string
    grandTotal: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerTaxProfileUpdateWithoutCustomerInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTaxTypeFieldUpdateOperationsInput | $Enums.TaxType
    legalName?: StringFieldUpdateOperationsInput | string
    fiscalCode?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    BillInvoice?: InvoiceUpdateManyWithoutBillToCustomerTaxProfileNestedInput
    ShipInvoice?: InvoiceUpdateManyWithoutShipToCustomerTaxProfileNestedInput
  }

  export type CustomerTaxProfileUncheckedUpdateWithoutCustomerInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTaxTypeFieldUpdateOperationsInput | $Enums.TaxType
    legalName?: StringFieldUpdateOperationsInput | string
    fiscalCode?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    BillInvoice?: InvoiceUncheckedUpdateManyWithoutBillToCustomerTaxProfileNestedInput
    ShipInvoice?: InvoiceUncheckedUpdateManyWithoutShipToCustomerTaxProfileNestedInput
  }

  export type CustomerTaxProfileUncheckedUpdateManyWithoutCustomerInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTaxTypeFieldUpdateOperationsInput | $Enums.TaxType
    legalName?: StringFieldUpdateOperationsInput | string
    fiscalCode?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    province?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceUpdateWithoutBillToCustomerInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceNumber?: BigIntFieldUpdateOperationsInput | bigint | number
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    currency?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    grandTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    issuerUser?: UserUpdateOneRequiredWithoutInvoicesNestedInput
    issuerTaxProfile?: UserTaxProfileUpdateOneRequiredWithoutInvoiceNestedInput
    billToCustomerTaxProfile?: CustomerTaxProfileUpdateOneRequiredWithoutBillInvoiceNestedInput
    shipToCustomer?: CustomerUpdateOneWithoutShippedInvoicesNestedInput
    shipToCustomerTaxProfile?: CustomerTaxProfileUpdateOneWithoutShipInvoiceNestedInput
    InvoiceItem?: InvoiceItemUpdateManyWithoutInvoiceNestedInput
    UserInvoice?: UserInvoiceUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutBillToCustomerInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceNumber?: BigIntFieldUpdateOperationsInput | bigint | number
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    issuerUserId?: BigIntFieldUpdateOperationsInput | bigint | number
    issuerTaxProfileId?: BigIntFieldUpdateOperationsInput | bigint | number
    billToCustomerTaxProfileId?: BigIntFieldUpdateOperationsInput | bigint | number
    shipToCustomerId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    shipToCustomerTaxProfileId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    currency?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    grandTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InvoiceItem?: InvoiceItemUncheckedUpdateManyWithoutInvoiceNestedInput
    UserInvoice?: UserInvoiceUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateManyWithoutBillToCustomerInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceNumber?: BigIntFieldUpdateOperationsInput | bigint | number
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    issuerUserId?: BigIntFieldUpdateOperationsInput | bigint | number
    issuerTaxProfileId?: BigIntFieldUpdateOperationsInput | bigint | number
    billToCustomerTaxProfileId?: BigIntFieldUpdateOperationsInput | bigint | number
    shipToCustomerId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    shipToCustomerTaxProfileId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    currency?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    grandTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceUpdateWithoutShipToCustomerInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceNumber?: BigIntFieldUpdateOperationsInput | bigint | number
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    currency?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    grandTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    issuerUser?: UserUpdateOneRequiredWithoutInvoicesNestedInput
    issuerTaxProfile?: UserTaxProfileUpdateOneRequiredWithoutInvoiceNestedInput
    billToCustomer?: CustomerUpdateOneRequiredWithoutBilledInvoicesNestedInput
    billToCustomerTaxProfile?: CustomerTaxProfileUpdateOneRequiredWithoutBillInvoiceNestedInput
    shipToCustomerTaxProfile?: CustomerTaxProfileUpdateOneWithoutShipInvoiceNestedInput
    InvoiceItem?: InvoiceItemUpdateManyWithoutInvoiceNestedInput
    UserInvoice?: UserInvoiceUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutShipToCustomerInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceNumber?: BigIntFieldUpdateOperationsInput | bigint | number
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    issuerUserId?: BigIntFieldUpdateOperationsInput | bigint | number
    issuerTaxProfileId?: BigIntFieldUpdateOperationsInput | bigint | number
    billToCustomerId?: BigIntFieldUpdateOperationsInput | bigint | number
    billToCustomerTaxProfileId?: BigIntFieldUpdateOperationsInput | bigint | number
    shipToCustomerTaxProfileId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    currency?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    grandTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InvoiceItem?: InvoiceItemUncheckedUpdateManyWithoutInvoiceNestedInput
    UserInvoice?: UserInvoiceUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateManyWithoutShipToCustomerInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceNumber?: BigIntFieldUpdateOperationsInput | bigint | number
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    issuerUserId?: BigIntFieldUpdateOperationsInput | bigint | number
    issuerTaxProfileId?: BigIntFieldUpdateOperationsInput | bigint | number
    billToCustomerId?: BigIntFieldUpdateOperationsInput | bigint | number
    billToCustomerTaxProfileId?: BigIntFieldUpdateOperationsInput | bigint | number
    shipToCustomerTaxProfileId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    currency?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    grandTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceCreateManyBillToCustomerTaxProfileInput = {
    id?: bigint | number
    invoiceNumber: bigint | number
    issueDate: Date | string
    dueDate: Date | string
    status?: $Enums.InvoiceStatus
    issuerUserId: bigint | number
    issuerTaxProfileId: bigint | number
    billToCustomerId: bigint | number
    shipToCustomerId?: bigint | number | null
    shipToCustomerTaxProfileId?: bigint | number | null
    currency?: string
    subtotal: Decimal | DecimalJsLike | number | string
    taxTotal: Decimal | DecimalJsLike | number | string
    grandTotal: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InvoiceCreateManyShipToCustomerTaxProfileInput = {
    id?: bigint | number
    invoiceNumber: bigint | number
    issueDate: Date | string
    dueDate: Date | string
    status?: $Enums.InvoiceStatus
    issuerUserId: bigint | number
    issuerTaxProfileId: bigint | number
    billToCustomerId: bigint | number
    billToCustomerTaxProfileId: bigint | number
    shipToCustomerId?: bigint | number | null
    currency?: string
    subtotal: Decimal | DecimalJsLike | number | string
    taxTotal: Decimal | DecimalJsLike | number | string
    grandTotal: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InvoiceUpdateWithoutBillToCustomerTaxProfileInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceNumber?: BigIntFieldUpdateOperationsInput | bigint | number
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    currency?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    grandTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    issuerUser?: UserUpdateOneRequiredWithoutInvoicesNestedInput
    issuerTaxProfile?: UserTaxProfileUpdateOneRequiredWithoutInvoiceNestedInput
    billToCustomer?: CustomerUpdateOneRequiredWithoutBilledInvoicesNestedInput
    shipToCustomer?: CustomerUpdateOneWithoutShippedInvoicesNestedInput
    shipToCustomerTaxProfile?: CustomerTaxProfileUpdateOneWithoutShipInvoiceNestedInput
    InvoiceItem?: InvoiceItemUpdateManyWithoutInvoiceNestedInput
    UserInvoice?: UserInvoiceUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutBillToCustomerTaxProfileInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceNumber?: BigIntFieldUpdateOperationsInput | bigint | number
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    issuerUserId?: BigIntFieldUpdateOperationsInput | bigint | number
    issuerTaxProfileId?: BigIntFieldUpdateOperationsInput | bigint | number
    billToCustomerId?: BigIntFieldUpdateOperationsInput | bigint | number
    shipToCustomerId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    shipToCustomerTaxProfileId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    currency?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    grandTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InvoiceItem?: InvoiceItemUncheckedUpdateManyWithoutInvoiceNestedInput
    UserInvoice?: UserInvoiceUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateManyWithoutBillToCustomerTaxProfileInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceNumber?: BigIntFieldUpdateOperationsInput | bigint | number
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    issuerUserId?: BigIntFieldUpdateOperationsInput | bigint | number
    issuerTaxProfileId?: BigIntFieldUpdateOperationsInput | bigint | number
    billToCustomerId?: BigIntFieldUpdateOperationsInput | bigint | number
    shipToCustomerId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    shipToCustomerTaxProfileId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    currency?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    grandTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceUpdateWithoutShipToCustomerTaxProfileInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceNumber?: BigIntFieldUpdateOperationsInput | bigint | number
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    currency?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    grandTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    issuerUser?: UserUpdateOneRequiredWithoutInvoicesNestedInput
    issuerTaxProfile?: UserTaxProfileUpdateOneRequiredWithoutInvoiceNestedInput
    billToCustomer?: CustomerUpdateOneRequiredWithoutBilledInvoicesNestedInput
    billToCustomerTaxProfile?: CustomerTaxProfileUpdateOneRequiredWithoutBillInvoiceNestedInput
    shipToCustomer?: CustomerUpdateOneWithoutShippedInvoicesNestedInput
    InvoiceItem?: InvoiceItemUpdateManyWithoutInvoiceNestedInput
    UserInvoice?: UserInvoiceUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutShipToCustomerTaxProfileInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceNumber?: BigIntFieldUpdateOperationsInput | bigint | number
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    issuerUserId?: BigIntFieldUpdateOperationsInput | bigint | number
    issuerTaxProfileId?: BigIntFieldUpdateOperationsInput | bigint | number
    billToCustomerId?: BigIntFieldUpdateOperationsInput | bigint | number
    billToCustomerTaxProfileId?: BigIntFieldUpdateOperationsInput | bigint | number
    shipToCustomerId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    currency?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    grandTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    InvoiceItem?: InvoiceItemUncheckedUpdateManyWithoutInvoiceNestedInput
    UserInvoice?: UserInvoiceUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateManyWithoutShipToCustomerTaxProfileInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    invoiceNumber?: BigIntFieldUpdateOperationsInput | bigint | number
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    issuerUserId?: BigIntFieldUpdateOperationsInput | bigint | number
    issuerTaxProfileId?: BigIntFieldUpdateOperationsInput | bigint | number
    billToCustomerId?: BigIntFieldUpdateOperationsInput | bigint | number
    billToCustomerTaxProfileId?: BigIntFieldUpdateOperationsInput | bigint | number
    shipToCustomerId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    currency?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    grandTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceItemCreateManyInvoiceInput = {
    id?: bigint | number
    codProduct?: string | null
    description: string
    quantity: Decimal | DecimalJsLike | number | string
    unitPrice: Decimal | DecimalJsLike | number | string
    taxRate: Decimal | DecimalJsLike | number | string
    lineTotal: Decimal | DecimalJsLike | number | string
  }

  export type UserInvoiceCreateManyInvoiceInput = {
    id?: bigint | number
    userId: bigint | number
    dateLinked?: Date | string
    firstView?: Date | string | null
    lastView?: Date | string | null
  }

  export type InvoiceItemUpdateWithoutInvoiceInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    codProduct?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    lineTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type InvoiceItemUncheckedUpdateWithoutInvoiceInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    codProduct?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    lineTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type InvoiceItemUncheckedUpdateManyWithoutInvoiceInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    codProduct?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    lineTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type UserInvoiceUpdateWithoutInvoiceInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    dateLinked?: DateTimeFieldUpdateOperationsInput | Date | string
    firstView?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastView?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutSharesNestedInput
  }

  export type UserInvoiceUncheckedUpdateWithoutInvoiceInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    dateLinked?: DateTimeFieldUpdateOperationsInput | Date | string
    firstView?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastView?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserInvoiceUncheckedUpdateManyWithoutInvoiceInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    dateLinked?: DateTimeFieldUpdateOperationsInput | Date | string
    firstView?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastView?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}